{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"","title":"Home"},{"location":"faq/","text":"Below, we have a list of frequently asked questions about ELRS Why ExpressLRS? \u00b6 ExpressLRS is competing with some of the best commercial solutions out there, but all are expensive \ud83d\ude41. Well, ELRS is not \ud83d\ude04, it can be set up for around 60$ (Using second-hand r9 hardware). It also is better than many (higher sensitivity, lower latency\ud83d\udc4c) Is it better than the commercial solutions? \u00b6 It is faster than most links out there with a latency of 6.5ms (at 200hz). At 250hz 100mW 2.4GHz it is capable of ranges 30km+. Why do I need to update OpenTX? \u00b6 ExpressLRS needs your radio to support crsfshot (a.k.a. Mixersync) to work properly. This will give you the lowest possible latency and optimal consistency of the RC link. When your radio does not have crsfshot working, this often shows in your ExpressLRS Lua script. The Lua script top bar will show inconsistent numbers like 0:63 or is stuck at 0:250 at every packet rate rate you select. The Lua script top bar should always show a stable 0:[user selected packet rate] For example: 0:50, 0:150, 0:250, 0:500, ... When that is the case your radio has crsfshot working and you're good to go. Click here to read more on OpenTX. What's the difference between the different Happymodel 2.4GHz receivers (PP, EP1, EP2)? \u00b6 The difference between the PP and the EP1/EP2 is only the processor. The PP is the original design and uses an STM32 while the EP1/EP2 use an ESP82xx. Both offer firmware update through Betaflight passthrough, but the EPx also support firmware upload over wifi. The EP1 is the same as the EP2 except it has a U.FL/IPEX1 connector for an external antenna. The wifi capability of the ESP is not used apart from the update procedure, and the wifi is only enabled shortly after power-up if no TX connection is received ( AUTO_WIFI_ON_INTERVAL if bound, 60s otherwise). Receiver performance should be identical between the two. If you're confused by the PP being more expensive, it's because there is a shortage of the STM part. Will x Receiver work with y TX Module from z Manufacturer? \u00b6 Any Receiver and TX Module from the same Band (2.4GHz or 900Mhz) will work together. Supported R9 receivers will work with the 900Mhz modules from Happy Model, Namimno RC and the R9M, same with the other 900Mhz receivers, DIY or off-the-shelf. Likewise, any 2.4Ghz receivers should work with any 2.4Ghz TX Modules, from any manufacturer and even the DIY ones. This is as long as they have the same binding phrase and configuration options (Regulatory Domain, Performance Options and Extra Data). How do I flash the R9M module? \u00b6 Flashing R9M TX . Overview: flash our bootloader using OpenTX, then our firmware also using OpenTX. How do I flash the receiver? \u00b6 Right now there are 5 options but 3 currently work for flashing the bootloader. STlink V2 (bootloader \u2611\ufe0f), FTDI (bootloader \u2611\ufe0f), betaflight passthrough (bootloader \u2716\ufe0f), openTX on radio via the module bay (bootloader \u2611\ufe0f), USB via DFU (bootloader \u2716\ufe0f). We ARE working on making a pull request with BF for adding \u201dbootloader flash support\u201c so soon flash it with the BF passthrough will be possible What is required to achieve a 500hz update rate on 2.4ghz on OpenTX? \u00b6 Make sure to enable the \"Use_500hz\" option when you flash the TX and RX. You must also be on a version of OpenTX that supports Mixer Sync (TBS Nightly, ELRS Nightly, or current 2.3.12 Nightly). To confirm your update rate is working as intended, you can use the ExpressLRS Lua script to check the current update rate and confirm you are getting 500hz. How many channels does ELRS support? \u00b6 12 channels(suspicious asterisk). There is not enough bandwidth to support all full-resolution channels (e.g. for pan/tilt servos). It is possible that future versions could include some tricks to expand this by sending extra channel data in a slow upload, but it is not a priority for development. Therefore, ELRS provides: * 4x full-resolution (10-bit) channels for sticks (CH1-4) * Either: * Standard Mode 4x 2-position channels sent every frame (increased to 8x in 1.0), OR * HYBRID_SWITCHES_8 Mode 8x 3-position channels, where CH5 (AUX1/ARM) is sent every frame, and the other 7 are sent round-robin (7 frames to send all channels) also changed in 1.0, see Switch Modes Is my binding phrase a secret? \u00b6 No, just like what channel your VTX is on is not a secret. The binding phrase is not security, it is anti-collision. If everyone kept their VTX channel a secret, the chances of you blasting someone out of the sky accidentally is pretty high. To provide the best chance of not interfering with other pilots and them not interfering with you, be sure you're not using the same dumb bind phrase as someone else. Express your style with a hilarious or saucy bind phrase. What does RQLY, TQLY, RSSI x2, SNR x2 mean? \u00b6 Datapoint Description Range Info RQly Uplink - link quality (valid packets) 0 - 100 The number of successful packets out of the last 100 from TX \u2192 RX 1RSS Uplink - received signal strength antenna 1 (RSSI) -128 - 0 RSSI dBm as reported by the RX. Values vary depending on mode, antenna quality, output power and distance 2RSS Uplink - received signal strength antenna 2 (RSSI) Second antenna RSSI, used in diversity mode ANT RX active Antenna Not populated currently RSNR Uplink - signal-to-noise ratio SNR reported by the RX. Value varies mostly by radio chip and gets lower with distance (once the agc hits its limit) RFMD Uplink - update rate TPWR Uplink - transmitting power 50mW reported as 0, as CRSF/OpenTX do not have this option TQly Downlink - link quality (valid packets) 0 - 100 An LQ indicator of telemetry packets received RX \u2192 TX TRSS Downlink - received signal strength (RSSI) RSSI dBm of telemetry packets received by TX TSNR Downlink - signal-to-noise ratio SNR reported by the radio in the TX module when receiving telemetry packets Is it normal to get \"RF Signal Critical\" when plugging in? \u00b6 Yes. When the connection is first established, the link quality starts at 0 and climbs as packets are received. Expect low RF Signal warnings until enough packets are reported received to pass your warning threshold set in OpenTX -> Telemetry -> RSSI -> Low alarm / Critical alarm.","title":"FAQ"},{"location":"faq/#why-expresslrs","text":"ExpressLRS is competing with some of the best commercial solutions out there, but all are expensive \ud83d\ude41. Well, ELRS is not \ud83d\ude04, it can be set up for around 60$ (Using second-hand r9 hardware). It also is better than many (higher sensitivity, lower latency\ud83d\udc4c)","title":"Why ExpressLRS?"},{"location":"faq/#is-it-better-than-the-commercial-solutions","text":"It is faster than most links out there with a latency of 6.5ms (at 200hz). At 250hz 100mW 2.4GHz it is capable of ranges 30km+.","title":"Is it better than the commercial solutions?"},{"location":"faq/#why-do-i-need-to-update-opentx","text":"ExpressLRS needs your radio to support crsfshot (a.k.a. Mixersync) to work properly. This will give you the lowest possible latency and optimal consistency of the RC link. When your radio does not have crsfshot working, this often shows in your ExpressLRS Lua script. The Lua script top bar will show inconsistent numbers like 0:63 or is stuck at 0:250 at every packet rate rate you select. The Lua script top bar should always show a stable 0:[user selected packet rate] For example: 0:50, 0:150, 0:250, 0:500, ... When that is the case your radio has crsfshot working and you're good to go. Click here to read more on OpenTX.","title":"Why do I need to update OpenTX?"},{"location":"faq/#whats-the-difference-between-the-different-happymodel-24ghz-receivers-pp-ep1-ep2","text":"The difference between the PP and the EP1/EP2 is only the processor. The PP is the original design and uses an STM32 while the EP1/EP2 use an ESP82xx. Both offer firmware update through Betaflight passthrough, but the EPx also support firmware upload over wifi. The EP1 is the same as the EP2 except it has a U.FL/IPEX1 connector for an external antenna. The wifi capability of the ESP is not used apart from the update procedure, and the wifi is only enabled shortly after power-up if no TX connection is received ( AUTO_WIFI_ON_INTERVAL if bound, 60s otherwise). Receiver performance should be identical between the two. If you're confused by the PP being more expensive, it's because there is a shortage of the STM part.","title":"What's the difference between the different Happymodel 2.4GHz receivers (PP, EP1, EP2)?"},{"location":"faq/#will-x-receiver-work-with-y-tx-module-from-z-manufacturer","text":"Any Receiver and TX Module from the same Band (2.4GHz or 900Mhz) will work together. Supported R9 receivers will work with the 900Mhz modules from Happy Model, Namimno RC and the R9M, same with the other 900Mhz receivers, DIY or off-the-shelf. Likewise, any 2.4Ghz receivers should work with any 2.4Ghz TX Modules, from any manufacturer and even the DIY ones. This is as long as they have the same binding phrase and configuration options (Regulatory Domain, Performance Options and Extra Data).","title":"Will x Receiver work with y TX Module from z Manufacturer?"},{"location":"faq/#how-do-i-flash-the-r9m-module","text":"Flashing R9M TX . Overview: flash our bootloader using OpenTX, then our firmware also using OpenTX.","title":"How do I flash the R9M module?"},{"location":"faq/#how-do-i-flash-the-receiver","text":"Right now there are 5 options but 3 currently work for flashing the bootloader. STlink V2 (bootloader \u2611\ufe0f), FTDI (bootloader \u2611\ufe0f), betaflight passthrough (bootloader \u2716\ufe0f), openTX on radio via the module bay (bootloader \u2611\ufe0f), USB via DFU (bootloader \u2716\ufe0f). We ARE working on making a pull request with BF for adding \u201dbootloader flash support\u201c so soon flash it with the BF passthrough will be possible","title":"How do I flash the receiver?"},{"location":"faq/#what-is-required-to-achieve-a-500hz-update-rate-on-24ghz-on-opentx","text":"Make sure to enable the \"Use_500hz\" option when you flash the TX and RX. You must also be on a version of OpenTX that supports Mixer Sync (TBS Nightly, ELRS Nightly, or current 2.3.12 Nightly). To confirm your update rate is working as intended, you can use the ExpressLRS Lua script to check the current update rate and confirm you are getting 500hz.","title":"What is required to achieve a 500hz update rate on 2.4ghz on OpenTX?"},{"location":"faq/#how-many-channels-does-elrs-support","text":"12 channels(suspicious asterisk). There is not enough bandwidth to support all full-resolution channels (e.g. for pan/tilt servos). It is possible that future versions could include some tricks to expand this by sending extra channel data in a slow upload, but it is not a priority for development. Therefore, ELRS provides: * 4x full-resolution (10-bit) channels for sticks (CH1-4) * Either: * Standard Mode 4x 2-position channels sent every frame (increased to 8x in 1.0), OR * HYBRID_SWITCHES_8 Mode 8x 3-position channels, where CH5 (AUX1/ARM) is sent every frame, and the other 7 are sent round-robin (7 frames to send all channels) also changed in 1.0, see Switch Modes","title":"How many channels does ELRS support?"},{"location":"faq/#is-my-binding-phrase-a-secret","text":"No, just like what channel your VTX is on is not a secret. The binding phrase is not security, it is anti-collision. If everyone kept their VTX channel a secret, the chances of you blasting someone out of the sky accidentally is pretty high. To provide the best chance of not interfering with other pilots and them not interfering with you, be sure you're not using the same dumb bind phrase as someone else. Express your style with a hilarious or saucy bind phrase.","title":"Is my binding phrase a secret?"},{"location":"faq/#what-does-rqly-tqly-rssi-x2-snr-x2-mean","text":"Datapoint Description Range Info RQly Uplink - link quality (valid packets) 0 - 100 The number of successful packets out of the last 100 from TX \u2192 RX 1RSS Uplink - received signal strength antenna 1 (RSSI) -128 - 0 RSSI dBm as reported by the RX. Values vary depending on mode, antenna quality, output power and distance 2RSS Uplink - received signal strength antenna 2 (RSSI) Second antenna RSSI, used in diversity mode ANT RX active Antenna Not populated currently RSNR Uplink - signal-to-noise ratio SNR reported by the RX. Value varies mostly by radio chip and gets lower with distance (once the agc hits its limit) RFMD Uplink - update rate TPWR Uplink - transmitting power 50mW reported as 0, as CRSF/OpenTX do not have this option TQly Downlink - link quality (valid packets) 0 - 100 An LQ indicator of telemetry packets received RX \u2192 TX TRSS Downlink - received signal strength (RSSI) RSSI dBm of telemetry packets received by TX TSNR Downlink - signal-to-noise ratio SNR reported by the radio in the TX module when receiving telemetry packets","title":"What does RQLY, TQLY, RSSI x2, SNR x2 mean?"},{"location":"faq/#is-it-normal-to-get-rf-signal-critical-when-plugging-in","text":"Yes. When the connection is first established, the link quality starts at 0 and climbs as packets are received. Expect low RF Signal warnings until enough packets are reported received to pass your warning threshold set in OpenTX -> Telemetry -> RSSI -> Low alarm / Critical alarm.","title":"Is it normal to get \"RF Signal Critical\" when plugging in?"},{"location":"license/","text":"License \u00b6 MIT License Copyright \u00a9 2016-2021 Martin Donath Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"license/#license","text":"MIT License Copyright \u00a9 2016-2021 Martin Donath Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"hardware/diy-rx/","text":"DIY Recievers \u00b6 Possibly one of the biggest benefits from using ExpressLRS is custom hardware! \ud83d\udcf6 Custom ESP 2.4 GHz RX \ud83d\udce1 Custom ESP 900 MHz RX \u26a1 Flashing ESP Based RX Custom ESP 2.4 GHz RX \u00b6 20x20 footprint and uses 0805 size SMD components. SMD components have been positioned on the PCB in a soldering iron friendly way. \ud83d\udeb8 The ELRS Nano RX is 18mm x 11mm and uses the same pinout as the Crossfire Nano RX. This allows for direct mounting to compatible flight controllers. \u26a0\ufe0f This PCB uses 0402 SMD components and will require a hot air rework station and probably a microscope. \ud83d\udd2c Custom ESP 900 MHz RX \u00b6 Uses the ESP-01F for WiFi and a RFM95 for our business \ud83d\udd74\ufe0f Requires ordering PCBs from Gerber files, a regulator chip, a few passives, a ESP-01F and a RFM95 (915/868MHz) Multiple RX PCB designs are available \u2705 20x20 RX - discrete SMD antenna for Wifi and RF directly soldered to PCB Target DIY_900_RX_ESP8285_SX127x_via_UART 20x20 RX 0805 - easier to build due to bigger SMD parts. PCB antenna for Wifi and u.fl connector for RF Mini RX - the smallest form factor, lightest weight and lowest cost per PCB If you need help soldering, please check out this video Flashing Custom RX \u00b6 Before you start \u00b6 The steps for building are in each individual README.md for the RX of your choice If you are using an ESP-12F instead of ESP-01F it is recommended to follow this tutorial but using the appropriate RX target \ud83e\uddd1\u200d\ud83c\udfeb Get it flashed \u00b6 Connect the serial adapter to GND , TX , RX , and the appropriate 3V3 or 5V . Additionally, connect IO0 to GND to activate the bootloader and enable flashing Quite some serial adapters have TX and RX swapped, mislabeled, or both \ud83d\ude38. Please double-check! Finally, select the appropriate RX target, make sure your user defines are correct, and press Upload in platformio","title":"DIY Reciever"},{"location":"hardware/diy-rx/#diy-recievers","text":"Possibly one of the biggest benefits from using ExpressLRS is custom hardware! \ud83d\udcf6 Custom ESP 2.4 GHz RX \ud83d\udce1 Custom ESP 900 MHz RX \u26a1 Flashing ESP Based RX","title":"DIY Recievers"},{"location":"hardware/diy-rx/#custom-esp-24-ghz-rx","text":"20x20 footprint and uses 0805 size SMD components. SMD components have been positioned on the PCB in a soldering iron friendly way. \ud83d\udeb8 The ELRS Nano RX is 18mm x 11mm and uses the same pinout as the Crossfire Nano RX. This allows for direct mounting to compatible flight controllers. \u26a0\ufe0f This PCB uses 0402 SMD components and will require a hot air rework station and probably a microscope. \ud83d\udd2c","title":"Custom ESP 2.4 GHz RX"},{"location":"hardware/diy-rx/#custom-esp-900-mhz-rx","text":"Uses the ESP-01F for WiFi and a RFM95 for our business \ud83d\udd74\ufe0f Requires ordering PCBs from Gerber files, a regulator chip, a few passives, a ESP-01F and a RFM95 (915/868MHz) Multiple RX PCB designs are available \u2705 20x20 RX - discrete SMD antenna for Wifi and RF directly soldered to PCB Target DIY_900_RX_ESP8285_SX127x_via_UART 20x20 RX 0805 - easier to build due to bigger SMD parts. PCB antenna for Wifi and u.fl connector for RF Mini RX - the smallest form factor, lightest weight and lowest cost per PCB If you need help soldering, please check out this video","title":"Custom ESP 900 MHz RX"},{"location":"hardware/diy-rx/#flashing-custom-rx","text":"","title":"Flashing Custom RX"},{"location":"hardware/diy-rx/#before-you-start","text":"The steps for building are in each individual README.md for the RX of your choice If you are using an ESP-12F instead of ESP-01F it is recommended to follow this tutorial but using the appropriate RX target \ud83e\uddd1\u200d\ud83c\udfeb","title":"Before you start"},{"location":"hardware/diy-rx/#get-it-flashed","text":"Connect the serial adapter to GND , TX , RX , and the appropriate 3V3 or 5V . Additionally, connect IO0 to GND to activate the bootloader and enable flashing Quite some serial adapters have TX and RX swapped, mislabeled, or both \ud83d\ude38. Please double-check! Finally, select the appropriate RX target, make sure your user defines are correct, and press Upload in platformio","title":"Get it flashed"},{"location":"hardware/diy-tx/","text":"DIY Transmitters \u00b6 Custom ESP 2.4 GHz TX (for JR module bay) \u00b6 All of the info on this topic can be found \ud83d\udc49 Here Custom Super Slim ESP 2.4 GHz TX (for lite module bay) \u00b6 The super slim is an evolution of the slim. It uses the same base hardware as the JR size one. It's the same size as an R9M Lite, and fits in all handsets with a lite module bay such as the X-Lite, X9 Lite, and Tango 2 (with the proper adapter). The rest of the info can be found \ud83d\udc49 Here","title":"DIY Transmitter"},{"location":"hardware/diy-tx/#diy-transmitters","text":"","title":"DIY Transmitters"},{"location":"hardware/diy-tx/#custom-esp-24-ghz-tx-for-jr-module-bay","text":"All of the info on this topic can be found \ud83d\udc49 Here","title":"Custom ESP 2.4 GHz TX (for JR module bay)"},{"location":"hardware/diy-tx/#custom-super-slim-esp-24-ghz-tx-for-lite-module-bay","text":"The super slim is an evolution of the slim. It uses the same base hardware as the JR size one. It's the same size as an R9M Lite, and fits in all handsets with a lite module bay such as the X-Lite, X9 Lite, and Tango 2 (with the proper adapter). The rest of the info can be found \ud83d\udc49 Here","title":"Custom Super Slim ESP 2.4 GHz TX (for lite module bay)"},{"location":"hardware/esp-backpack/","text":"Addon for R9M modules , HappyModel ELRS915TX , and HappyModel ES24TX to allow: Logging to Browser and via Websocket Flashing ESP Backpack (self) Flashing R9M TX Possibly more.. wireless trainer mode? Please contribute \ud83e\udd47 This is a convenience feature for development purposes and \"power users\" - soldering can be tricky - please be careful. \ud83d\udc6e Parts \u00b6 USB to Serial Dongle (aka FTDI Stick) R9M (previously flashed with ExpressLRS) \ud83d\udce1 any ESP 8266/8285 based chip should work, recommended are ESP01F for quick install (internal resistors ease initial flashing, but wire antenna) ESP12F for pcb wifi antenna, FCC/CE certififed (but more complex circuit required for initial flashing) very thin wire (AWG30 \"kynar\"); or enameled wire if you are good with routing (0.5mm holes in PCB) depending on your soldering skill using flux and leaded solder is recommended Board ESP01F (ESP8285) \u00b6 Connect the serial adapter to 3.3V , GND , TX and RX \ud83d\udd25 3.3V NOT 5V Additionally, connect IO0 to GND to activate the bootloader and enable flashing Quite some serial adapters have TX and RX swapped, mislabeled, or both \ud83d\ude38. Please double check! Board ESP12F (ESP8266) \u00b6 This module needs a more complex circuit to get flashed: PlatformIO \u00b6 The platformio sub-project is in src/ESPbackpack , please get into there first. Now, please call pio run -e ESP_BACKPACK_ESP8266 -t upload or optionally specify the serial adapter to be used pio run -e ESP_BACKPACK_ESP8266 -t upload --upload-port /dev/cu.SLAB_USBtoUART For 8285 please set the value of parameter -e to ESP_BACKPACK_ESP8285 . Connecting to R9M Module \u00b6 Let's get together: Solder wires connecting RX1 , TX1 , NRESET , and BOOT0 pins \ud83d\udd0c \u2757 Removing transistor J6 is not required in contrary to as shown on the picture Please note the alternative location to reach TX1 to keep you from having to solder on the chip's leg \ud83d\udc81 Connecting to Happymodel ELRS915TX \u00b6 The ESP module is wired: NRSET -> ESP DIO5 BOOT0 -> ESP DIO4 TX -> ESP RX RX -> ESP TX 3.3v -> ESP 3.3v GND -> ESP GND Updating the ELRS915TX over wifi is supported from 1.0.0 RC8 onwards. Connect via WiFi \u00b6 Initially, the module will open an accesspoint for you to connect and change the settings to your desire. WORK IN PROGRESS Why does the ES24TX have a wifi AP, is there any way to turn it off? \u00b6 No there is no way to disable it, HappyModel should not have put any firmware on it. You're welcome to wipe it with esptool.","title":"ESP Backpack"},{"location":"hardware/esp-backpack/#parts","text":"USB to Serial Dongle (aka FTDI Stick) R9M (previously flashed with ExpressLRS) \ud83d\udce1 any ESP 8266/8285 based chip should work, recommended are ESP01F for quick install (internal resistors ease initial flashing, but wire antenna) ESP12F for pcb wifi antenna, FCC/CE certififed (but more complex circuit required for initial flashing) very thin wire (AWG30 \"kynar\"); or enameled wire if you are good with routing (0.5mm holes in PCB) depending on your soldering skill using flux and leaded solder is recommended","title":"Parts"},{"location":"hardware/esp-backpack/#board-esp01f-esp8285","text":"Connect the serial adapter to 3.3V , GND , TX and RX \ud83d\udd25 3.3V NOT 5V Additionally, connect IO0 to GND to activate the bootloader and enable flashing Quite some serial adapters have TX and RX swapped, mislabeled, or both \ud83d\ude38. Please double check!","title":"Board ESP01F (ESP8285)"},{"location":"hardware/esp-backpack/#board-esp12f-esp8266","text":"This module needs a more complex circuit to get flashed:","title":"Board ESP12F (ESP8266)"},{"location":"hardware/esp-backpack/#platformio","text":"The platformio sub-project is in src/ESPbackpack , please get into there first. Now, please call pio run -e ESP_BACKPACK_ESP8266 -t upload or optionally specify the serial adapter to be used pio run -e ESP_BACKPACK_ESP8266 -t upload --upload-port /dev/cu.SLAB_USBtoUART For 8285 please set the value of parameter -e to ESP_BACKPACK_ESP8285 .","title":"PlatformIO"},{"location":"hardware/esp-backpack/#connecting-to-r9m-module","text":"Let's get together: Solder wires connecting RX1 , TX1 , NRESET , and BOOT0 pins \ud83d\udd0c \u2757 Removing transistor J6 is not required in contrary to as shown on the picture Please note the alternative location to reach TX1 to keep you from having to solder on the chip's leg \ud83d\udc81","title":"Connecting to R9M Module"},{"location":"hardware/esp-backpack/#connecting-to-happymodel-elrs915tx","text":"The ESP module is wired: NRSET -> ESP DIO5 BOOT0 -> ESP DIO4 TX -> ESP RX RX -> ESP TX 3.3v -> ESP 3.3v GND -> ESP GND Updating the ELRS915TX over wifi is supported from 1.0.0 RC8 onwards.","title":"Connecting to Happymodel ELRS915TX"},{"location":"hardware/esp-backpack/#connect-via-wifi","text":"Initially, the module will open an accesspoint for you to connect and change the settings to your desire. WORK IN PROGRESS","title":"Connect via WiFi"},{"location":"hardware/esp-backpack/#why-does-the-es24tx-have-a-wifi-ap-is-there-any-way-to-turn-it-off","text":"No there is no way to disable it, HappyModel should not have put any firmware on it. You're welcome to wipe it with esptool.","title":"Why does the ES24TX have a wifi AP, is there any way to turn it off?"},{"location":"hardware/fan-mod/","text":"R9M Fan Mod \u00b6 Initially this mod is brought to life by Niklas Voigt and Seba112PL as beta tester and is still a work in progress.. if you have suggestions don't hesitate to contact. 1W Mod \u00b6 \u26a0\ufe0f With this mod your R9M can handle 1W max You need a 20x20mm or 25x25mm fan in 5V version. Both sizes are supported. To secure the fan into the cover you can use 2x M2 screws , a thread is already in the print. U can solder the pins of the fan directly to the 5v port of the R9M or use the Controllable Fan Mod which can control the fan out of software (fan blows only at >250mw). R9M Fan Mod Cover is build out of four Parts and a Sticker: Download: \u00b6 R9M-Fan-Case-Cover.stl R9M-Fan-Case-Pins.stl R9M-Fan-Case-XT30.stl R9M-Fan-Case-Standoff.stl (2x) R9M-ExpressLRS-900Mhz.pdf or from Thingiverse Controllable Fan Mod \u00b6 Additionally to the fan you'll need one NPN Transistor (e.g. 2N4401 ) or N-Channel MOSFET (e.g. BS170 has built-in Shotky-Diode) and a resistor (200-3k7) R9M2019 Build notice \u00b6 The PB9 pad location on the R9M2019 module is a bit different. Please see the photo. 2W Mod (\u26a0\ufe0fOnly do this if you know what you are doing!\u26a0\ufe0f) \u00b6 Additionally to the 3D printed Cover & the Controllable Fan Mod you'll need: Fan + Heatsink \"2507 25MM 25x25x13MM Hydraulic bearing Graphics card Cooling fan with heat sink 5V 12V m.2 SSD Fan with 2pin\" Thermalpad 0.5mm \"1pc 100mmx100mmx0.5mm GPU Northbridge IC LED Chipset Heatsink Cooling Conductive Silicone Thermal Pad,100x100x0.5mm w/ 3.2W/M-K\" The screw heads are cut off to reduce height. > If you can see in picture 3, the 5v fan is connected to the power source of the module, so the fan is used with some overvoltage and spins with higher rpm... tested for a long time and should not be a problem for the fan. If you don't know how to allow the 2W in the firmware, don't do this mod!\ud83e\udd26\u200d\u2642\ufe0f Here are some makes: \u00b6","title":"R9M Fan Mod"},{"location":"hardware/fan-mod/#r9m-fan-mod","text":"Initially this mod is brought to life by Niklas Voigt and Seba112PL as beta tester and is still a work in progress.. if you have suggestions don't hesitate to contact.","title":"R9M Fan Mod"},{"location":"hardware/fan-mod/#1w-mod","text":"\u26a0\ufe0f With this mod your R9M can handle 1W max You need a 20x20mm or 25x25mm fan in 5V version. Both sizes are supported. To secure the fan into the cover you can use 2x M2 screws , a thread is already in the print. U can solder the pins of the fan directly to the 5v port of the R9M or use the Controllable Fan Mod which can control the fan out of software (fan blows only at >250mw). R9M Fan Mod Cover is build out of four Parts and a Sticker:","title":"1W Mod"},{"location":"hardware/fan-mod/#download","text":"R9M-Fan-Case-Cover.stl R9M-Fan-Case-Pins.stl R9M-Fan-Case-XT30.stl R9M-Fan-Case-Standoff.stl (2x) R9M-ExpressLRS-900Mhz.pdf or from Thingiverse","title":"Download:"},{"location":"hardware/fan-mod/#controllable-fan-mod","text":"Additionally to the fan you'll need one NPN Transistor (e.g. 2N4401 ) or N-Channel MOSFET (e.g. BS170 has built-in Shotky-Diode) and a resistor (200-3k7)","title":"Controllable Fan Mod"},{"location":"hardware/fan-mod/#r9m2019-build-notice","text":"The PB9 pad location on the R9M2019 module is a bit different. Please see the photo.","title":"R9M2019 Build notice"},{"location":"hardware/fan-mod/#2w-mod-only-do-this-if-you-know-what-you-are-doing","text":"Additionally to the 3D printed Cover & the Controllable Fan Mod you'll need: Fan + Heatsink \"2507 25MM 25x25x13MM Hydraulic bearing Graphics card Cooling fan with heat sink 5V 12V m.2 SSD Fan with 2pin\" Thermalpad 0.5mm \"1pc 100mmx100mmx0.5mm GPU Northbridge IC LED Chipset Heatsink Cooling Conductive Silicone Thermal Pad,100x100x0.5mm w/ 3.2W/M-K\" The screw heads are cut off to reduce height. > If you can see in picture 3, the 5v fan is connected to the power source of the module, so the fan is used with some overvoltage and spins with higher rpm... tested for a long time and should not be a problem for the fan. If you don't know how to allow the 2W in the firmware, don't do this mod!\ud83e\udd26\u200d\u2642\ufe0f","title":"2W Mod (\u26a0\ufe0fOnly do this if you know what you are doing!\u26a0\ufe0f)"},{"location":"hardware/fan-mod/#here-are-some-makes","text":"","title":"Here are some makes:"},{"location":"hardware/inverter-mod/","text":"To benefit from the higher bitrate of 400 kilobit per second using OpenTX you need to add a pullup resistor to the inverter of the serial port on the R9M 2018\ud83d\uddfb\ud83c\udd99 Strongly suggested to be done for anybody looking for higher than standard packet rates using ExpressLRS \ud83d\udd2e Identification \u00b6 \u26a0\ufe0f This is only required for the 2018 version of the module which has a ACCST logo on the case \ud83d\udd0d Modification \u00b6 Easy - connect a 300\u03a9 to 1000\u03a9 resistor between the 3.3V and inverter pin as shown on the picture \ud83d\udc67 Transmitter Notes \u00b6 X9D only does 400 kbit/s and does not allow lowering the bitrate to 115200 bit/s - 400k Mod is not required. X10S Express 400k Mod is not required. X10S modification is required \ud83d\ude45 X12 modification is required \ud83d\ude45 QX7 allows configuration of the bitrate in the OpenTX hardware menu. ELRS will work fine using 115200 bit/s but the modification is required for 400 kbit/s \ud83d\ude45\u200d\u2640\ufe0f The modification is not needed for ACCESS radios","title":"R9M Inverter Mod"},{"location":"hardware/inverter-mod/#identification","text":"\u26a0\ufe0f This is only required for the 2018 version of the module which has a ACCST logo on the case \ud83d\udd0d","title":"Identification"},{"location":"hardware/inverter-mod/#modification","text":"Easy - connect a 300\u03a9 to 1000\u03a9 resistor between the 3.3V and inverter pin as shown on the picture \ud83d\udc67","title":"Modification"},{"location":"hardware/inverter-mod/#transmitter-notes","text":"X9D only does 400 kbit/s and does not allow lowering the bitrate to 115200 bit/s - 400k Mod is not required. X10S Express 400k Mod is not required. X10S modification is required \ud83d\ude45 X12 modification is required \ud83d\ude45 QX7 allows configuration of the bitrate in the OpenTX hardware menu. ELRS will work fine using 115200 bit/s but the modification is required for 400 kbit/s \ud83d\ude45\u200d\u2640\ufe0f The modification is not needed for ACCESS radios","title":"Transmitter Notes"},{"location":"hardware/smd-antenna/","text":"Have you ever been frustrated that you can't finish a race because your receiver antenna got chopped? Have you ever wished you could build a quad without worrying about how to mount your antenna? If so, the SMD Antenna is for you! This perky little fellow is worse at receiving signals than his snaky brothers, but don't let that deter you! Because of the amazing range of ExpressLRS, he still gets all the range a racer could ever need. The SMD Antenna is available now on Happymodel PP/EP hardware and other 2.4GHz receivers. Take a look at the videos below to see what Mr. SMD can do for you. Range Tests \u00b6 3km flight on 500hz: https://www.youtube.com/watch?v=kfa6ugX46n8 Parking Garage on 500Hz: https://www.youtube.com/watch?v=Fr7CCeni2dY Range Comparison to Dipole: https://www.youtube.com/watch?v=A5w81n5qV1M RSSI Comparison Dipole: https://youtu.be/CnaEe7YZB-Q Maintenance \u00b6 Note: The antenna is sorta fragile and can break off or be melted by a stray soldering iron. If this happens, you can save your receiver by soldering a U.FL/IPEX1 connector onto the pads like shown here. Just make sure the center pin has continuity with the filter at the other end of the trace, and no continuity with ground. Conversely, the SMD antenna can be soldered to regular U.FL footprints if you're brave.","title":"SMD Antenna"},{"location":"hardware/smd-antenna/#range-tests","text":"3km flight on 500hz: https://www.youtube.com/watch?v=kfa6ugX46n8 Parking Garage on 500Hz: https://www.youtube.com/watch?v=Fr7CCeni2dY Range Comparison to Dipole: https://www.youtube.com/watch?v=A5w81n5qV1M RSSI Comparison Dipole: https://youtu.be/CnaEe7YZB-Q","title":"Range Tests"},{"location":"hardware/smd-antenna/#maintenance","text":"Note: The antenna is sorta fragile and can break off or be melted by a stray soldering iron. If this happens, you can save your receiver by soldering a U.FL/IPEX1 connector onto the pads like shown here. Just make sure the center pin has continuity with the filter at the other end of the trace, and no continuity with ground. Conversely, the SMD antenna can be soldered to regular U.FL footprints if you're brave.","title":"Maintenance"},{"location":"hardware/supported-hardware/","text":"This is the hardware landing page! Welcome in. To navigate through this (large) subsection, use the sidebar on the left . These pages show the supported hardware and also some modifications for existing hardware. The supported hardware is in the Targets subsection on the sidebar","title":"Navigation Guide"},{"location":"info/glossary/","text":"Glossary \u00b6 Below you can find a list of terms you might not be sure about, as well as some common abbreviations: CRSF : TBS Crossfire, more specifialy in our case most often refering to the communication protocol between TX and TX module and RX and FC respectively OTX : OpenTX FW : Firmware BL : Bootloader, loads the FW S.Port : SmartPort, sometimes referred to as sport . FrSky \"telemetry\" protocol. The S.Port also gets used for updating FrSky receivers. OTA : Update your device Over The Air (wifi) MCU : Micro Controller Unit, generally denotes an embedded system controller as opposed to big iron cpu OSD : On Screen Display, refer to this page for instructions for setup in BF LQ : Link Quality, percentage of expected packets received. Our preferred method of measuring the quality of the control link RSSI dBm : Measure of power level measured in dBm. Basically, how strong the signal being received is RSSI : Received Signal Strength Indicator, \"arbitrary\" scaled version of RSSI dBm or LQ. Signal Health: LQI and RSSI Explained Lua : Means \"Moon\" in Portuguese. As such, Lua is the correct way to write and not all uppercase. The ExpressLRS Lua script can be installed on a OpenTX radio, to easily alter TX parameters like Packet rate, Telemetry ratio and Output power. But also shows if the radio (OpenTX) is communicating correctly with the module. ( e.g. 0:50, 0:150, 0:200 and so on.) To be continued.","title":"Glossary"},{"location":"info/glossary/#glossary","text":"Below you can find a list of terms you might not be sure about, as well as some common abbreviations: CRSF : TBS Crossfire, more specifialy in our case most often refering to the communication protocol between TX and TX module and RX and FC respectively OTX : OpenTX FW : Firmware BL : Bootloader, loads the FW S.Port : SmartPort, sometimes referred to as sport . FrSky \"telemetry\" protocol. The S.Port also gets used for updating FrSky receivers. OTA : Update your device Over The Air (wifi) MCU : Micro Controller Unit, generally denotes an embedded system controller as opposed to big iron cpu OSD : On Screen Display, refer to this page for instructions for setup in BF LQ : Link Quality, percentage of expected packets received. Our preferred method of measuring the quality of the control link RSSI dBm : Measure of power level measured in dBm. Basically, how strong the signal being received is RSSI : Received Signal Strength Indicator, \"arbitrary\" scaled version of RSSI dBm or LQ. Signal Health: LQI and RSSI Explained Lua : Means \"Moon\" in Portuguese. As such, Lua is the correct way to write and not all uppercase. The ExpressLRS Lua script can be installed on a OpenTX radio, to easily alter TX parameters like Packet rate, Telemetry ratio and Output power. But also shows if the radio (OpenTX) is communicating correctly with the module. ( e.g. 0:50, 0:150, 0:200 and so on.) To be continued.","title":"Glossary"},{"location":"info/signal-health/","text":"RSSI has become somewhat a generic term for how good a signal is, and every manufacturer can have their own scale, with most agreeing that \"100\" is the best, less than that is bad, and expect have RXLOSS at ???. This is an explanation of the signal metrics provided by ExpressLRS and how to understand their values. Two Types of Signal Health \u00b6 There are two main types of signal information available from ExpressLRS: RSSI and LQI RSSI - Received Signal Strength Indicator, this value indicates how loud \ud83c\udfba the reception is. RSSI must be above the sensitivity level to be understood. Units are dBm and start from 0 and go down as the volume gets lower (-130dBm hard limit). LQI - Link Quality Indicator, this value indicates how much of the conversation is being understood and ultimately all that matters. Units are percent, with 100% being every packet is received, and 0% means no packets are being received. Consider you're having a conversation in a quiet room. Your partner speaks loudly enough for you to hear, so the RSSI of their voice is above the sensitivity of your ears. You're going to understand the conversation because you're hearing every word. That's a 100% LQI-- you're receiving 100% of the words. Now imagine someone blows an air horn right in the middle of a sentence. The RSSI is still the same level, you still hear what you could make out at the same volume, you missed a word so the LQI is lower. The closer the volume of the conversation is to the background noise level in the room, the greater the chance is that you'll miss a word due to it getting mixed in with the background noise and lowering your LQI. Remember, LQI is all that matters. Your partner could shout as loud as they want but if you could hear every word anyway, the volume doesn't matter, you always heard every word. Which do I care about? \u00b6 Both really. LQI is most important because you can't fly if you're not getting packets. RSSI is important because it tells you how close you are to the radio receiver not being able to receive packets at all. I'd say if you have just one, pick LQI, because that tells you what percentage of packets are getting through and you get to make the decision if it isn't enough. What you can't tell from LQI alone is when that number is going to drop off a cliff, and it could happen extremely fast because you hit the RSSI sensitivity limit. RSSI Sensitivity Limit \u00b6 This is the lowest theoretical RSSI value that can be distinguished by the radio receiver. It is displayed in the ELRS.lua when you select the packet rate, because different packet rates and frequency bands have different sensitivity limits. Lower rates are more sensitive, -123dBm for 25Hz 915MHz up to -105dBm for 500Hz 2400MHz. This gives you the limit you know you can't fly below. RSSI Channel \u00b6 RSSI and LQI are included already in the protocol used to communicate to the flight controller, so the \"RSSI Channel\" on the Receiver tab should be set to Disabled. RSSI_ADC / \"Analog RSSI input\" on the Configuration tab should also be disabled. Available RSSI OSD Fields \u00b6 RSSI dBm - This is the true RSSI value we've talked about here, and is available on Betaflight after 4.1 (?) and iNav after 2.6 (?) Link Quality - This is LQI discussed here, and has the same version requirements. Betaflight adds the RF Mode to this as well, e.g. 7:100 means mode 7 = 500Hz and 100% LQI. RSSI Value - Or sometimes just RSSI . This is the old undefined units of Signal Strength value that everyone is used to with no idea what value is good or what value is too bad. What value you'll actually see here varies, even on ExpressLRS, and is covered in the RSSI Value OSD field section. It is not recommended to use this field unless you have to (e.g. DJI). RSSI Value OSD field \u00b6 What appears in the RSSI Value field is based on what is selected as the RSSI Channel as ExpressLRS also sends LQI and RSSI as channels (AUX11/ch15 and AUX12/ch16 respectively). It is better to use the dBm or LQ OSD fields instead of this one if you can. DJI users are forced to use this due to it being the only field supported by their OSD. Changes to RSSI Channel in Betaflight requires a reboot to take effect. Disabled is set as the \"RSSI Channel\" field in Betaflight - Displays RSSI dBm scaled as a percentage from -130dBm to 0dBm. Not recommended since what percentage of 130 is the Sensitivity Limit for your selected rate? Math! AUX11/ch15 is set as the \"RSSI Channel\" - Simply LQI although the value might be slightly off due to rounding. AUX12/ch16 is set as the \"RSSI Channel\" - Displays the RSSI dBm scaled as a percentage from the current Sensitivity Limit to -50dBm and is a decent indicator of how much range is left before the LQI cliff (0 here = Sensitivity Limit). In iNAV, the RSSI Value on the OSD is called RSSI (Signal Strength), and will always display 0. To show a filtered (by iNav) LQI in that field, set the rssi_source to protocol using the CLI with set rssi_source = PROTOCOL . What about SNR? \u00b6 Wow look at you smarty pants! SNR stands for Signal to Noise ratio and compares RSSI dBm to the RF background noise level and is in dB units (not dBm). Notice it compares the background noise level and not the Sensitivity Limit. The value is of limited usefulness because the RF chip can only approximate the noise level and can only register a value so high above it leading to this value getting clipped. Add to that, LoRa modulation can actually receive data below the noise floor to some degree, so just ignore this number really, but positive values are better. How far can I go on XmW? \u00b6 Very far? This question is usually used in place of the actual question \"Will I get good signal where I fly?\" which is impossible to answer. ExpressLRS 2.4GHz can go over 40km at 250Hz 100mW on omnidirectional antennas with excellent LQI, or it can go 400m with less stellar LQI. By far the biggest factor in determining maximum range is direct line of sight. Blocking line of sight reduces RSSI dBm. A few trees or a building isn't going to keep you from flying due to ExpressLRS's excellent sensitivity even when line of sight isn't available, but range is reduced a bit for every physical object between you and the receiver. Piloting from an elevated position can eliminate some ground obstacles and provide a measurable boost in range. The second largest factor is interference. Interference is the clobbering of our packets by outside sources, such as wifi on 2.4GHz or other ISM transmissions on 868/915MHz, and is seen as a drop in LQI well before the sensitivity limit. Increasing TX power output is usually not the solution you'd expect, where each doubling in output power only might only add 10% to the usable range due to interference. #Team868/#Team915 or #Team2.4 \u00b6 Unfortunately, there is a misconception about the 2.4GHz range thanks to other radio protocols on the market. ExpressLRS uses LoRa, which has had some amazing results on 2.4GHz. Again, 40km on 100mW 250Hz on 2.4GHz. The advantages of 2.4GHz is that the antennas are 2.5x smaller than 915MHz antennas, and there's more spectrum for ExpressLRS to hop around in, opening up the air for more pilots at once. 868/915MHz does have increased penetration and is the ultimate king of long range flying, but penetration difference may not be as great as you think. The high sensitivity of ExpressLRS receivers allows them to fly places you wouldn't dream of flying FSK-based 2.4 receivers such as FrSky ACCST/ACCESS, FlySky AFHDS2A, Spektrum DMX, or Redpine. RF noise \u00b6 We have all heard the stories of racers powering up his TBS crossfire full module at 2W and causing people to fail-safe during a race. This happens because the 868/915mhz band has limited bandwidth. The solution for this is to use a low power mode during races, so you do not blast anyone out of the sky. 2.4ghz does not have this issue. Flite Test has a world record of having 179 RC airplanes in the sky using 2.4 GHz. 2.4GHz LoRa can also handle WiFi noise very well. Studies have been conducted with the coexistence of WiFi and LoRa bands. 868/915 does not have to worry about WiFi signal but it does have to worry about cell towers and other RF noise. You are fighting against thermostats, fire systems, burglar systems and any other device running on that band.","title":"Signal Health"},{"location":"info/signal-health/#two-types-of-signal-health","text":"There are two main types of signal information available from ExpressLRS: RSSI and LQI RSSI - Received Signal Strength Indicator, this value indicates how loud \ud83c\udfba the reception is. RSSI must be above the sensitivity level to be understood. Units are dBm and start from 0 and go down as the volume gets lower (-130dBm hard limit). LQI - Link Quality Indicator, this value indicates how much of the conversation is being understood and ultimately all that matters. Units are percent, with 100% being every packet is received, and 0% means no packets are being received. Consider you're having a conversation in a quiet room. Your partner speaks loudly enough for you to hear, so the RSSI of their voice is above the sensitivity of your ears. You're going to understand the conversation because you're hearing every word. That's a 100% LQI-- you're receiving 100% of the words. Now imagine someone blows an air horn right in the middle of a sentence. The RSSI is still the same level, you still hear what you could make out at the same volume, you missed a word so the LQI is lower. The closer the volume of the conversation is to the background noise level in the room, the greater the chance is that you'll miss a word due to it getting mixed in with the background noise and lowering your LQI. Remember, LQI is all that matters. Your partner could shout as loud as they want but if you could hear every word anyway, the volume doesn't matter, you always heard every word.","title":"Two Types of Signal Health"},{"location":"info/signal-health/#which-do-i-care-about","text":"Both really. LQI is most important because you can't fly if you're not getting packets. RSSI is important because it tells you how close you are to the radio receiver not being able to receive packets at all. I'd say if you have just one, pick LQI, because that tells you what percentage of packets are getting through and you get to make the decision if it isn't enough. What you can't tell from LQI alone is when that number is going to drop off a cliff, and it could happen extremely fast because you hit the RSSI sensitivity limit.","title":"Which do I care about?"},{"location":"info/signal-health/#rssi-sensitivity-limit","text":"This is the lowest theoretical RSSI value that can be distinguished by the radio receiver. It is displayed in the ELRS.lua when you select the packet rate, because different packet rates and frequency bands have different sensitivity limits. Lower rates are more sensitive, -123dBm for 25Hz 915MHz up to -105dBm for 500Hz 2400MHz. This gives you the limit you know you can't fly below.","title":"RSSI Sensitivity Limit"},{"location":"info/signal-health/#rssi-channel","text":"RSSI and LQI are included already in the protocol used to communicate to the flight controller, so the \"RSSI Channel\" on the Receiver tab should be set to Disabled. RSSI_ADC / \"Analog RSSI input\" on the Configuration tab should also be disabled.","title":"RSSI Channel"},{"location":"info/signal-health/#available-rssi-osd-fields","text":"RSSI dBm - This is the true RSSI value we've talked about here, and is available on Betaflight after 4.1 (?) and iNav after 2.6 (?) Link Quality - This is LQI discussed here, and has the same version requirements. Betaflight adds the RF Mode to this as well, e.g. 7:100 means mode 7 = 500Hz and 100% LQI. RSSI Value - Or sometimes just RSSI . This is the old undefined units of Signal Strength value that everyone is used to with no idea what value is good or what value is too bad. What value you'll actually see here varies, even on ExpressLRS, and is covered in the RSSI Value OSD field section. It is not recommended to use this field unless you have to (e.g. DJI).","title":"Available RSSI OSD Fields"},{"location":"info/signal-health/#rssi-value-osd-field","text":"What appears in the RSSI Value field is based on what is selected as the RSSI Channel as ExpressLRS also sends LQI and RSSI as channels (AUX11/ch15 and AUX12/ch16 respectively). It is better to use the dBm or LQ OSD fields instead of this one if you can. DJI users are forced to use this due to it being the only field supported by their OSD. Changes to RSSI Channel in Betaflight requires a reboot to take effect. Disabled is set as the \"RSSI Channel\" field in Betaflight - Displays RSSI dBm scaled as a percentage from -130dBm to 0dBm. Not recommended since what percentage of 130 is the Sensitivity Limit for your selected rate? Math! AUX11/ch15 is set as the \"RSSI Channel\" - Simply LQI although the value might be slightly off due to rounding. AUX12/ch16 is set as the \"RSSI Channel\" - Displays the RSSI dBm scaled as a percentage from the current Sensitivity Limit to -50dBm and is a decent indicator of how much range is left before the LQI cliff (0 here = Sensitivity Limit). In iNAV, the RSSI Value on the OSD is called RSSI (Signal Strength), and will always display 0. To show a filtered (by iNav) LQI in that field, set the rssi_source to protocol using the CLI with set rssi_source = PROTOCOL .","title":"RSSI Value OSD field"},{"location":"info/signal-health/#what-about-snr","text":"Wow look at you smarty pants! SNR stands for Signal to Noise ratio and compares RSSI dBm to the RF background noise level and is in dB units (not dBm). Notice it compares the background noise level and not the Sensitivity Limit. The value is of limited usefulness because the RF chip can only approximate the noise level and can only register a value so high above it leading to this value getting clipped. Add to that, LoRa modulation can actually receive data below the noise floor to some degree, so just ignore this number really, but positive values are better.","title":"What about SNR?"},{"location":"info/signal-health/#how-far-can-i-go-on-xmw","text":"Very far? This question is usually used in place of the actual question \"Will I get good signal where I fly?\" which is impossible to answer. ExpressLRS 2.4GHz can go over 40km at 250Hz 100mW on omnidirectional antennas with excellent LQI, or it can go 400m with less stellar LQI. By far the biggest factor in determining maximum range is direct line of sight. Blocking line of sight reduces RSSI dBm. A few trees or a building isn't going to keep you from flying due to ExpressLRS's excellent sensitivity even when line of sight isn't available, but range is reduced a bit for every physical object between you and the receiver. Piloting from an elevated position can eliminate some ground obstacles and provide a measurable boost in range. The second largest factor is interference. Interference is the clobbering of our packets by outside sources, such as wifi on 2.4GHz or other ISM transmissions on 868/915MHz, and is seen as a drop in LQI well before the sensitivity limit. Increasing TX power output is usually not the solution you'd expect, where each doubling in output power only might only add 10% to the usable range due to interference.","title":"How far can I go on XmW?"},{"location":"info/signal-health/#team868team915-or-team24","text":"Unfortunately, there is a misconception about the 2.4GHz range thanks to other radio protocols on the market. ExpressLRS uses LoRa, which has had some amazing results on 2.4GHz. Again, 40km on 100mW 250Hz on 2.4GHz. The advantages of 2.4GHz is that the antennas are 2.5x smaller than 915MHz antennas, and there's more spectrum for ExpressLRS to hop around in, opening up the air for more pilots at once. 868/915MHz does have increased penetration and is the ultimate king of long range flying, but penetration difference may not be as great as you think. The high sensitivity of ExpressLRS receivers allows them to fly places you wouldn't dream of flying FSK-based 2.4 receivers such as FrSky ACCST/ACCESS, FlySky AFHDS2A, Spektrum DMX, or Redpine.","title":"#Team868/#Team915 or #Team2.4"},{"location":"info/signal-health/#rf-noise","text":"We have all heard the stories of racers powering up his TBS crossfire full module at 2W and causing people to fail-safe during a race. This happens because the 868/915mhz band has limited bandwidth. The solution for this is to use a low power mode during races, so you do not blast anyone out of the sky. 2.4ghz does not have this issue. Flite Test has a world record of having 179 RC airplanes in the sky using 2.4 GHz. 2.4GHz LoRa can also handle WiFi noise very well. Studies have been conducted with the coexistence of WiFi and LoRa bands. 868/915 does not have to worry about WiFi signal but it does have to worry about cell towers and other RF noise. You are fighting against thermostats, fire systems, burglar systems and any other device running on that band.","title":"RF noise"},{"location":"info/telem-bandwidth/","text":"Telemetry Burst describes the allocation of telemetry packets in ExpressLRS added in #472 . There are two types of packets, LINK and DATA. LINK is the standard link statistics and is always available, and DATA is \"Advanced Telemetry\" which is telemetry coming from the flight controller and shares bandwidth with MSP transfers. Burst mode attempts to maintain a minimum rate of LINK packets and use the rest of the available telemetry slots for DATA. The LINK rate chosen was one every 512ms, roughly 2 per second but slightly higher to allow more rates to have an additional burst packet at lower ratios. Air Rate Telem Ratio Telem Interval (ms) Packets/second Burst Count Bandwidth (no Burst) Bandwidth (Burst) 500 1:128 256 3.9 1 78bps 78bps 500 1:64 128 7.8 3 156bps 234bps 500 1:32 64 15.6 7 312bps 547bps 500 1:16 32 31.2 15 625bps 1172bps 500 1:8 16 62.5 31 1250bps 2422bps 500 1:4 8 125.0 63 2500bps 4922bps 500 1:2 4 250.0 127 5000bps 9922bps Air Rate Telem Ratio Telem Interval (ms) Packets/second Burst Count Bandwidth (no Burst) Bandwidth (Burst) 250 1:128 512 2.0 1 39bps 39bps 250 1:64 256 3.9 1 78bps 78bps 250 1:32 128 7.8 3 156bps 234bps 250 1:16 64 15.6 7 312bps 547bps 250 1:8 32 31.2 15 625bps 1172bps 250 1:4 16 62.5 31 1250bps 2422bps 250 1:2 8 125.0 63 2500bps 4922bps Air Rate Telem Ratio Telem Interval (ms) Packets/second Burst Count Bandwidth (no Burst) Bandwidth (Burst) 200 1:128 640 1.6 1 31bps 31bps 200 1:64 320 3.1 1 62bps 62bps 200 1:32 160 6.2 2 125bps 167bps 200 1:16 80 12.5 5 250bps 417bps 200 1:8 40 25.0 11 500bps 917bps 200 1:4 20 50.0 24 1000bps 1920bps 200 1:2 10 100.0 50 2000bps 3922bps Air Rate Telem Ratio Telem Interval (ms) Packets/second Burst Count Bandwidth (no Burst) Bandwidth (Burst) 150 1:128 853 1.2 1 23bps 23bps 150 1:64 426 2.3 1 47bps 47bps 150 1:32 213 4.7 1 94bps 94bps 150 1:16 106 9.4 3 188bps 281bps 150 1:8 53 18.8 8 375bps 667bps 150 1:4 26 37.5 18 750bps 1421bps 150 1:2 13 75.0 37 1500bps 2921bps Air Rate Telem Ratio Telem Interval (ms) Packets/second Burst Count Bandwidth (no Burst) Bandwidth (Burst) 100 1:128 1280 0.8 1 16bps 16bps 100 1:64 640 1.6 1 31bps 31bps 100 1:32 320 3.1 1 62bps 62bps 100 1:16 160 6.2 2 125bps 167bps 100 1:8 80 12.5 5 250bps 417bps 100 1:4 40 25.0 11 500bps 917bps 100 1:2 20 50.0 24 1000bps 1920bps Air Rate Telem Ratio Telem Interval (ms) Packets/second Burst Count Bandwidth (no Burst) Bandwidth (Burst) 50 1:128 2560 0.4 1 8bps 8bps 50 1:64 1280 0.8 1 16bps 16bps 50 1:32 640 1.6 1 31bps 31bps 50 1:16 320 3.1 1 62bps 62bps 50 1:8 160 6.2 2 125bps 167bps 50 1:4 80 12.5 5 250bps 417bps 50 1:2 40 25.0 11 500bps 917bps Air Rate Telem Ratio Telem Interval (ms) Packets/second Burst Count Bandwidth (no Burst) Bandwidth (Burst) 25 1:128 5120 0.2 1 4bps 4bps 25 1:64 2560 0.4 1 8bps 8bps 25 1:32 1280 0.8 1 16bps 16bps 25 1:16 640 1.6 1 31bps 31bps 25 1:8 320 3.1 1 62bps 62bps 25 1:4 160 6.2 2 125bps 167bps 25 1:2 80 12.5 5 250bps 417bps // Source code for table generator int main(void) { for (uint8_t rate=RATE_500HZ; rate<RATE_4HZ; ++rate) { uint32_t hz = RateEnumToHz((expresslrs_RFrates_e)rate); printf(\"| Air Rate | Telem Ratio | Telem Interval (ms) | Packets/second | Bandwidth (no Burst) | Bandwidth (Burst)\\n\"); if (rate == RATE_500HZ) printf(\"|---|---|---|---|---|---|\\n\"); for (uint8_t ratio=TLM_RATIO_1_128; ratio<TLM_RATIO_ENUM_MAX; ++ratio) { uint32_t tlmRatio = TLMratioEnumToValue((expresslrs_tlm_ratio_e)ratio); float telemPps = (float)hz / tlmRatio; uint32_t telemInterval = 1000 * tlmRatio / hz; uint32_t tlmBurst = TELEM_MIN_LINK_INTERVAL * hz / tlmRatio / 1000; // Reserve one slot for LINK telemetry if (tlmBurst > 1) --tlmBurst; else tlmBurst = 1; printf(\"%u | 1:%u | %u | %.1f | %u | %.0fbps | %.0fbps\\n\", hz, tlmRatio, telemInterval, telemPps, tlmBurst, telemPps*1/2*5*8, 5*8*telemPps*tlmBurst/(tlmBurst+1)); } } return 0; }","title":"Telemetry Bandwith"},{"location":"quick-start/bf-cfg/","text":"Serial Setup \u00b6 As with any serial-based receiver, you need to attach the TX/RX pads to a UART on your flight controller, then enable the corresponding UART as a serial receiver in Betaflight: Protocol \u00b6 Similar to in OpenTX, we use the CRSF protocol to communicate between the ExpressLRS receiver and Betaflight, so on the \"Configuration\" tab, you need to select \"Serial-based receiver\" on the \"Receiver\" panel, and select \"CRSF\" as the protocol. Telemetry is optional here and will reduce your stick update rate due to those transmit slots being used for telemetry. Modes \u00b6 By default, ExpressLRS uses one-bit switches for the AUX channels. This means a three-position switch will only send two positions (fully off, or 1000, and fully on, or 2000) to Betaflight on the AUX channels. Set your modes appropriately if you are using one-bit switches, or enable HYBRID_SWITCHES_8 for expanded position options. For more information, read the switch modes page . RSSI and Link Quality \u00b6 To get RSSI and Link Quality displayed in the OSD, set RSSI Channel to \"Disabled\" in the Receiver tab of the Betaflight Configurator, and RSSI_ADC should be disabled on the Configuration tab. Both of these are the default. On the OSD menu, use the \"Link Quality\" and \"RSSI dBm value \" elements (not \"RSSI Value\"). If you wish to enable the rssi dBm warning, you'll have to change the alarm level using set osd_rssi_dbm_alarm = -100 in CLI. A sensible value is 5-10 higher than the sensitivity shown in the ELRS.lua for the packet rate (e.g. 250Hz=-108, so -103 to -98 for the alarm). If using DJI Goggles, you're required to use \"RSSI Value\" as the OSD element. Therefore you have to decide between LQ or RSSI, by selecting either AUX11 (LQ) or AUX12 (RSSI) as RSSI Channel on the Receiver tab. More information about signal metrics is found in this article on signal health . Blackbox \u00b6 Blackbox is handy for evaluating the performance of the RF link for a flight. Set your BB to debug mode RC_SMOOTHING_RATE , which will capture the rate that Betaflight is receiving RC Packets from the RX. Telemetry \u00b6 Initially ExpressLRS had very limited telemetry support but with Version 1.0.0-RC1 this changed and full telemetry was added as optional feature . The default setting only includes the link status message that includes the RSSI and Link quality. To receive all messages the feature telemetry has to be enabled in the user defines It's possible to flash your TX module with telemetry support enabled and use it with a RX without telemetry enabled . So you can flash certain receivers with telemetry support and others without it and use it with the same TX module. The RX transmits a subset of telemetry it receives from the flight controller. Disabling certain messages only works if the flight controller firmware does support it. For Betaflight this is possible with the telemetry_disabled_* cli settings: # Disable Attitude telemetry item set telemetry_disabled_pitch = ON set telemetry_disabled_roll = ON set telemetry_disabled_heading = ON # Disable Battery telemetry item set telemetry_disabled_voltage = ON set telemetry_disabled_current = ON set telemetry_disabled_fuel = ON # Disable GPS telemetry item set telemetry_disabled_altitude = ON set telemetry_disabled_lat_long = ON set telemetry_disabled_ground_speed = ON set telemetry_disabled_heading = ON # Disable Flight Mode telemetry item (BF >4.2.9) set telemetry_disabled_mode = ON Since telemetry messages are sent with low priority it takes some time to transmit the data. The telemetry rate in the lua settings script controls how often a telemetry message should be sent. So a ratio of 1:2 means that every second message is a telemetry message, so the telemetry data is transferred very fast. A ratio 1:64 means that only one of 64 messages is a telemetry message and so the transfer happens much slower. The refresh rate also impacts the transfer speed. 50 Hz is slower compared to 200 Hz. So if you need fast a fast telemetry update rate choose high refresh rate, and a ratio that favors telemetry messages e.g. 200 Hz and 1:16 usually works good. For detailed information on telemetry bandwidth at different rates and ratios, see this page on telemetry bandwidth . To finish the telemetry setup open the telemetry page on your transmitter and select \"Discover new sensors\" and wait for the list to fill. You will notice that there is a * sign for each row. This star indicates that this telemetry sensor was just updated. If you see a row that does not change, and the name of the row is in square brackets it means that this sensor was not updated for some time. The first values (including RSSI and link quality) should always be updated (flashing stars). If this does not happen multiple times per second the transmitter will issue a \"telemetry warning\". To prevent this warning use the setting TLM_REPORT_INTERVAL_MS. It should look like this (and if it does not there is something wrong with your setup): The remaining values are updated at a different rate (depending on refresh rate and tlm ratio). So if you use 50 Hz and 1:64 it will happen really slow, and the update takes multiple seconds for each sensor: If you use 200Hz and 1:2 tlm ratio the stars will not even blink because the update happens so fast: MSP \u00b6 To configure betaflight from your transmitter it's possible to use the betaflight lua scripts. This requires the telemetry feature enabled for the RX+TX. If the telemetry page of OpenTx does not show regular updates for all sensors the LUA script will also not work. Mavlink is not supported and currently not planned to be added. To get a responsive UI configure ExpressLRS for fast data transfer so make sure to use something like 200Hz/250Hz with 1:2 tlm and a serial baud rate of 400000 . Currently MSP is limited to 50Hz on 11520 Baud and does not work with 500 Hz refresh rate. The initial VTX tables download does take long - but is cached after that. If you get a \"retrying\" message while saving changes it means that the lua script did not receive a response fast enough. But the change usually still goes through so try reloading the page to check if the change was saved. With the recommended settings this does not happen but with slower settings it could happen.","title":"Bf cfg"},{"location":"quick-start/bf-cfg/#serial-setup","text":"As with any serial-based receiver, you need to attach the TX/RX pads to a UART on your flight controller, then enable the corresponding UART as a serial receiver in Betaflight:","title":"Serial Setup"},{"location":"quick-start/bf-cfg/#protocol","text":"Similar to in OpenTX, we use the CRSF protocol to communicate between the ExpressLRS receiver and Betaflight, so on the \"Configuration\" tab, you need to select \"Serial-based receiver\" on the \"Receiver\" panel, and select \"CRSF\" as the protocol. Telemetry is optional here and will reduce your stick update rate due to those transmit slots being used for telemetry.","title":"Protocol"},{"location":"quick-start/bf-cfg/#modes","text":"By default, ExpressLRS uses one-bit switches for the AUX channels. This means a three-position switch will only send two positions (fully off, or 1000, and fully on, or 2000) to Betaflight on the AUX channels. Set your modes appropriately if you are using one-bit switches, or enable HYBRID_SWITCHES_8 for expanded position options. For more information, read the switch modes page .","title":"Modes"},{"location":"quick-start/bf-cfg/#rssi-and-link-quality","text":"To get RSSI and Link Quality displayed in the OSD, set RSSI Channel to \"Disabled\" in the Receiver tab of the Betaflight Configurator, and RSSI_ADC should be disabled on the Configuration tab. Both of these are the default. On the OSD menu, use the \"Link Quality\" and \"RSSI dBm value \" elements (not \"RSSI Value\"). If you wish to enable the rssi dBm warning, you'll have to change the alarm level using set osd_rssi_dbm_alarm = -100 in CLI. A sensible value is 5-10 higher than the sensitivity shown in the ELRS.lua for the packet rate (e.g. 250Hz=-108, so -103 to -98 for the alarm). If using DJI Goggles, you're required to use \"RSSI Value\" as the OSD element. Therefore you have to decide between LQ or RSSI, by selecting either AUX11 (LQ) or AUX12 (RSSI) as RSSI Channel on the Receiver tab. More information about signal metrics is found in this article on signal health .","title":"RSSI and Link Quality"},{"location":"quick-start/bf-cfg/#blackbox","text":"Blackbox is handy for evaluating the performance of the RF link for a flight. Set your BB to debug mode RC_SMOOTHING_RATE , which will capture the rate that Betaflight is receiving RC Packets from the RX.","title":"Blackbox"},{"location":"quick-start/bf-cfg/#telemetry","text":"Initially ExpressLRS had very limited telemetry support but with Version 1.0.0-RC1 this changed and full telemetry was added as optional feature . The default setting only includes the link status message that includes the RSSI and Link quality. To receive all messages the feature telemetry has to be enabled in the user defines It's possible to flash your TX module with telemetry support enabled and use it with a RX without telemetry enabled . So you can flash certain receivers with telemetry support and others without it and use it with the same TX module. The RX transmits a subset of telemetry it receives from the flight controller. Disabling certain messages only works if the flight controller firmware does support it. For Betaflight this is possible with the telemetry_disabled_* cli settings: # Disable Attitude telemetry item set telemetry_disabled_pitch = ON set telemetry_disabled_roll = ON set telemetry_disabled_heading = ON # Disable Battery telemetry item set telemetry_disabled_voltage = ON set telemetry_disabled_current = ON set telemetry_disabled_fuel = ON # Disable GPS telemetry item set telemetry_disabled_altitude = ON set telemetry_disabled_lat_long = ON set telemetry_disabled_ground_speed = ON set telemetry_disabled_heading = ON # Disable Flight Mode telemetry item (BF >4.2.9) set telemetry_disabled_mode = ON Since telemetry messages are sent with low priority it takes some time to transmit the data. The telemetry rate in the lua settings script controls how often a telemetry message should be sent. So a ratio of 1:2 means that every second message is a telemetry message, so the telemetry data is transferred very fast. A ratio 1:64 means that only one of 64 messages is a telemetry message and so the transfer happens much slower. The refresh rate also impacts the transfer speed. 50 Hz is slower compared to 200 Hz. So if you need fast a fast telemetry update rate choose high refresh rate, and a ratio that favors telemetry messages e.g. 200 Hz and 1:16 usually works good. For detailed information on telemetry bandwidth at different rates and ratios, see this page on telemetry bandwidth . To finish the telemetry setup open the telemetry page on your transmitter and select \"Discover new sensors\" and wait for the list to fill. You will notice that there is a * sign for each row. This star indicates that this telemetry sensor was just updated. If you see a row that does not change, and the name of the row is in square brackets it means that this sensor was not updated for some time. The first values (including RSSI and link quality) should always be updated (flashing stars). If this does not happen multiple times per second the transmitter will issue a \"telemetry warning\". To prevent this warning use the setting TLM_REPORT_INTERVAL_MS. It should look like this (and if it does not there is something wrong with your setup): The remaining values are updated at a different rate (depending on refresh rate and tlm ratio). So if you use 50 Hz and 1:64 it will happen really slow, and the update takes multiple seconds for each sensor: If you use 200Hz and 1:2 tlm ratio the stars will not even blink because the update happens so fast:","title":"Telemetry"},{"location":"quick-start/bf-cfg/#msp","text":"To configure betaflight from your transmitter it's possible to use the betaflight lua scripts. This requires the telemetry feature enabled for the RX+TX. If the telemetry page of OpenTx does not show regular updates for all sensors the LUA script will also not work. Mavlink is not supported and currently not planned to be added. To get a responsive UI configure ExpressLRS for fast data transfer so make sure to use something like 200Hz/250Hz with 1:2 tlm and a serial baud rate of 400000 . Currently MSP is limited to 50Hz on 11520 Baud and does not work with 500 Hz refresh rate. The initial VTX tables download does take long - but is cached after that. If you get a \"retrying\" message while saving changes it means that the lua script did not receive a response fast enough. But the change usually still goes through so try reloading the page to check if the change was saved. With the recommended settings this does not happen but with slower settings it could happen.","title":"MSP"},{"location":"quick-start/binding/","text":"Binding can be done with either a hard coded unique binding phrase or in a more traditional way where you put the receiver and transmitter into bind mode, and they link up. There is no reason to use traditional binding if you're flashing both your TX and RX firmware anyway. If you used a bind phrase in your user defines, there is no need to read this article. Go out and fly! If not, here is how to bind an ELRS TX and RX. Unique Phrase \u00b6 You need to have a unique binding phrase in the user_defines.txt file or entered in the \"Custom Binding Phrase\" box in the Configurator. After flashing your TX and RX will automatically be bound. Is my binding phrase a secret? -DMY_BINDING_PHRASE=\"default ExpressLRS binding phrase\" Traditional Binding \u00b6 For traditional binding, the binding phrase must be commented out in user_defines on the RX. Power off your transmitter Plug in and unplug your receiver three times Make sure the LED is doing a quick double blink, which indicates the receiver is in bind mode Use the [BIND] button on the Lua script, which sends out a binding pulse If the receiver has a solid light, it's bound! Important: If the RX firmware has a bind phrase, the RX will never enter binding mode using the above procedure. It must be flashed without a binding phrase to do traditional binding. Why would you not use a bind phrase though if you're already having to flash the RX anyway? Connection Check \u00b6 Go to the Telemetry Page of your model setup and try to find new sensors. If the telemetry data shows up then you are connected!","title":"Binding ExpressLRS"},{"location":"quick-start/binding/#unique-phrase","text":"You need to have a unique binding phrase in the user_defines.txt file or entered in the \"Custom Binding Phrase\" box in the Configurator. After flashing your TX and RX will automatically be bound. Is my binding phrase a secret? -DMY_BINDING_PHRASE=\"default ExpressLRS binding phrase\"","title":"Unique Phrase"},{"location":"quick-start/binding/#traditional-binding","text":"For traditional binding, the binding phrase must be commented out in user_defines on the RX. Power off your transmitter Plug in and unplug your receiver three times Make sure the LED is doing a quick double blink, which indicates the receiver is in bind mode Use the [BIND] button on the Lua script, which sends out a binding pulse If the receiver has a solid light, it's bound! Important: If the RX firmware has a bind phrase, the RX will never enter binding mode using the above procedure. It must be flashed without a binding phrase to do traditional binding. Why would you not use a bind phrase though if you're already having to flash the RX anyway?","title":"Traditional Binding"},{"location":"quick-start/binding/#connection-check","text":"Go to the Telemetry Page of your model setup and try to find new sensors. If the telemetry data shows up then you are connected!","title":"Connection Check"},{"location":"quick-start/firmware-options/","text":"This page aims to explain which options to set on the ExpressLRS Configurator for a particular Hardware. It helps guide you through which options you should enable for your purposes or which options should be left at default. Some of these options are present on both the Tx and Rx Targets. It is important that these options match to both the TX module and receiver in order for them to bind. team2400 and team900 also share a few options and some options are unique to that frequency band. Shown below are common options available on team2400 and team900 TXes respectively. Regulatory Domains \u00b6 Regulatory_Domain_AU_915 Regulatory_Domain_EU_868 Regulatory_Domain_FCC_915 Regulatory_Domain_ISM_2400 This is a relatively simple one - enable whatever regulatory domain you are in. EU 868 is compliant to the frequency but is not LBT compliant \ud83d\udc42 . Every other band is near compliant \ud83d\udc7f but may not be fully compliant for your regulatory domain. Binding Phrase \u00b6 This step is simple but important . Both the TX and RX NEED to have the same binding phrase or ExpressLRS WILL NOT WORK . Anyone using the same binding phrase as you will be able to control your model, so be unique. Set something memorable, and limit to alphanumeric phrases conforming to the Latin alphabet. Receivers flashed with firmware builds that do not have binding phrase enabled will support and require the traditional binding method . \ud83d\udcdc Performance Options \u00b6 NO_SYNC_ON_ARM no sync on arm doesn't transmit sync packets while armed. This is useful for racing as there is less time & packets wasted \ud83d\uddd1\ufe0f on sending sync packets. HOWEVER if you are doing serious long range \u26f0\ufe0f, keep this commented because in the case of a sustained failsafe, link can not be regained while armed. AUX1 is the channel ExpressLRS uses to detect \"ARMED\", and this feature assumes that a low value of the arm switch is disarmed, and a high value is armed . OpenTX can invert your switch if you prefer it to be mechanically inverted. It may be best not to enable no sync on arm when you are first setting up ExpressLRS as it can be a source of confusion. FEATURE_OPENTX_SYNC This option enables lower latency \ud83c\udfc3\u200d\u2642\ufe0f from the OpenTX radio to the TX and should be kept enabled. To get the full benefit of the option, you should be running an OpenTX version with CRSFShot or Mixer Sync enabled. USE-500HZ This enables 500Hz mode for 2.4 GHz RXes and TXes. The drawback is that you have to give up 25Hz mode to add 500Hz mode. It requires OpenTX 2.3.12 or Newer , EdgeTX or a Radio firmware that has CRSFShot or Mixer Sync. Note: Since version 1.0.0-RC9, this option is now always enabled and in turn, 25Hz has been dropped/removed. Extra Data \u00b6 HYBRID_SWITCHES_8 Changes how the AUX channels are sent over the air. The default option is Normal Mode with 8x 2-position low-latency switches. Enabling HYBRID_SWITCHES_8 changes this to 1x 2-pos + 6x 7-pos + 1x 16-pos, with only the 2-position being low-latency. In Normal Mode, all switches are sent with every packet; while in Hybrid Mode, only AUX1 is sent with every packet and the rest are rotated through. Note: The switch mode MUST match between the TX and RX . A detailed explanation of the differences between the two options can be found in the Switch Modes page. ENABLE_TELEMETRY Enable advanced telemetry support. This option must be enabled on both TX and RX . The following telemetry messages are supported: GPS BATTERY_SENSOR ATTITUDE DEVICE_INFO FLIGHT_MODE MSP_RESP Note 1 : Increase the telemetry rate with the ExpressLRS lua script. Increase the rate until the sensor lost warnings go away. It is normal to set it up to 1:16 with 200 Hz refresh rate. Note 2 : It must be enabled together with HYBRID_SWITCHES_8 . With this unchecked/disabled, you will only get the basic RC Link Telemetry like 1RRS (RSSI dbm), RQLY (LQ) etc. Tip. You can have this option enabled in the Firmware Configuration, but set TLM Ratio to OFF in the ELRS Lua Script when you don't need advanced telemetry (like when racing). Should you need the telemetry (freestyle or medium-to-long-range flying), flip TLM Ratio back to your favorite ratio, like 1:16 or 1:8. TLM_REPORT_INTERVAL_MS It makes the TX module send the telemetry data to OpenTX to the interval you set. This stops the telemetry lost warnings when running a high telemetry ratio, or low rates like 50hz. Default value is 320LU . If you want to change that you have to suffix your milliseconds value with LU . For example, in order to specify 100 ms telemetry update rate you have to enter it like this: 100LU . Typically, you want to keep 320LU value for OpenTX based radios, and 100LU for ErskyTx ones. Tip: only check this if you're changing the value. No need to enable it if you'll be using the default 320LU value Other Options \u00b6 JUST_BEEP_ONCE DISABLE_STARTUP_BEEP MY_STARTUP_MELODY=\"<music string>|<bpm>|<semitone offset>\" For TXes like the R9M, this sets if the TX only beeps one-time, not beep at all or play custom a startup song. By default it is set to play the ExpressLRS Startup Tune \ud83c\udfbc , but if you don't prefer it, or simply want to go stealthy, enable any of these options. \u2716\ufe0f For all your customization needs, use MY_STARTUP_MELODY to define your own startup melody using either the BlHeli32 syntax or RTTL. The BlHeli32 Synatax has the required parameters music string and bpm , and semitone offset is optional to transpose the entire melody up or down by the defined amount of semitones. Example BlHeli32 melodies are available on Rox Wolfs youtube channel , some experimentation may be required though. To write your own melody, this (Sheet Music 101) and this (BLHeli Piano) are useful resources. The RTTL Syntax is the same as used in old mobil phones for ringtones and some examples of it can be found here , where you can search through many existing RTTL melodies. UNLOCK_HIGHER_POWER Majority of the ExpressLRS modules maxes out at 250mW. With this option, higher power levels can be unlocked on the modules that supports it. However, it is imperative that you have taken measures to provide ample cooling to the module's internals through the use of a Fan Mod . This specifically applies to the R9M, which, from factory, supports a higher power level up to 1W; but because ExpressLRS runs at a much higher duty cycle, it taxes the circuity and thus produces heat much earlier. To keep it stable, cooling should be implemented. Without any cooling, you run the risk of ending up with a red paperweight. UART_INVERTED This only works with ESP based TXes (will not work with modules without built-in inversion/uninversion), but enables compatibility with radios that output inverted CRSF, such as the FrSky QX7, TBS Tango 2, RadioMaster TX16S. You want to keep this enabled in most of the cases. If your radio is T8SG V2 or you use Deviation firmware turn this setting off. Receiver Only Options \u00b6 Note: Configuration of the Receivers should match the configuration of the Transmitter Module for Sync/Binding to happen between devices. The explanation of the options for the Transmitter Modules also apply for the Receivers. But here's a few Receiver-specific Options you can configure: LOCK_ON_FIRST_CONNECTION RF Mode Locking - When the RX is waiting for a connection, it cycles through all available rates waiting for a connection on each one. By default, ExpressLRS will go back to this mode after a disconnect (failsafe). If LOCK_ON_FIRST_CONNECTION is used, ELRS will not cycle after a disconnect, but instead just stay on whatever rate the last connection was. This makes connection re-establishment quick, because the RX is always listening at the proper rate. This is generally what everyone wants, but there is utility in being able to switch the TX to the lowest rate to get more range to re-establish a link with a downed model, which can't happen if the RX is locked at the previous rate. When cycling through the rates, the RX starts with the fastest packet rate and works down to the slowest, then repeats. It waits PACKET_INTERVAL * PACKS_PER_HOP * HOP_COUNT * 1.1 at each rate. Example: 4ms * 4 * 80 * 1.1 = 1.408s for 250Hz. The duration is extended 10x if a valid packet is received during that time. Even with LOCK_ON_FIRST_CONNECTION, the rate can be changed by changing the TX rate using ELRS.lua while connected, or by power cycling the RX. AUTO_WIFI_ON_INTERVAL \u26a0\ufe0f Must be defined if you plan to update your RX over wifi without using a button on the RX \u26a0\ufe0f This will automatically turn the wifi \ud83d\udcf6 on for any module that has an ESP8285 on it if no TX connection is established after N seconds from boot (Factory Firmware of the HappyModel receivers set this to the previous default of 20s. RC8 has increased the interval to 30s). This enables pushing firmware updates to the RX by connecting to its wifi network and visiting http://10.0.0.1 . USE_DIVERSITY Enable antenna-switching diversity for Receivers that support it. USE_R9MM_R9MINI_SBUS This does not turn on SBUS protocol it simply changes the pin used for communication from those two side pins (A9 and A10) to use the pin labeled \"SBUS\" on the RX, which is inverted. This is useful for F4 FCs which only have an inverted receiver input UART RX. \ud83d\udd3c. This is only one way, so you lose the telemetry downlink to your radio as well as passthrough flashing. Enabling this turns on CRSF protocol output on the S.BUS \ud83d\ude8c pin on your R9MM/R9Mini. set serialrx_inverted = ON may also be needed within Betaflight \ud83d\udc1d for compatibility Done! It's time to flash the firmware on your transmitter","title":"Firmware Options"},{"location":"quick-start/firmware-options/#regulatory-domains","text":"Regulatory_Domain_AU_915 Regulatory_Domain_EU_868 Regulatory_Domain_FCC_915 Regulatory_Domain_ISM_2400 This is a relatively simple one - enable whatever regulatory domain you are in. EU 868 is compliant to the frequency but is not LBT compliant \ud83d\udc42 . Every other band is near compliant \ud83d\udc7f but may not be fully compliant for your regulatory domain.","title":"Regulatory Domains"},{"location":"quick-start/firmware-options/#binding-phrase","text":"This step is simple but important . Both the TX and RX NEED to have the same binding phrase or ExpressLRS WILL NOT WORK . Anyone using the same binding phrase as you will be able to control your model, so be unique. Set something memorable, and limit to alphanumeric phrases conforming to the Latin alphabet. Receivers flashed with firmware builds that do not have binding phrase enabled will support and require the traditional binding method . \ud83d\udcdc","title":"Binding Phrase"},{"location":"quick-start/firmware-options/#performance-options","text":"NO_SYNC_ON_ARM no sync on arm doesn't transmit sync packets while armed. This is useful for racing as there is less time & packets wasted \ud83d\uddd1\ufe0f on sending sync packets. HOWEVER if you are doing serious long range \u26f0\ufe0f, keep this commented because in the case of a sustained failsafe, link can not be regained while armed. AUX1 is the channel ExpressLRS uses to detect \"ARMED\", and this feature assumes that a low value of the arm switch is disarmed, and a high value is armed . OpenTX can invert your switch if you prefer it to be mechanically inverted. It may be best not to enable no sync on arm when you are first setting up ExpressLRS as it can be a source of confusion. FEATURE_OPENTX_SYNC This option enables lower latency \ud83c\udfc3\u200d\u2642\ufe0f from the OpenTX radio to the TX and should be kept enabled. To get the full benefit of the option, you should be running an OpenTX version with CRSFShot or Mixer Sync enabled. USE-500HZ This enables 500Hz mode for 2.4 GHz RXes and TXes. The drawback is that you have to give up 25Hz mode to add 500Hz mode. It requires OpenTX 2.3.12 or Newer , EdgeTX or a Radio firmware that has CRSFShot or Mixer Sync. Note: Since version 1.0.0-RC9, this option is now always enabled and in turn, 25Hz has been dropped/removed.","title":"Performance Options"},{"location":"quick-start/firmware-options/#extra-data","text":"HYBRID_SWITCHES_8 Changes how the AUX channels are sent over the air. The default option is Normal Mode with 8x 2-position low-latency switches. Enabling HYBRID_SWITCHES_8 changes this to 1x 2-pos + 6x 7-pos + 1x 16-pos, with only the 2-position being low-latency. In Normal Mode, all switches are sent with every packet; while in Hybrid Mode, only AUX1 is sent with every packet and the rest are rotated through. Note: The switch mode MUST match between the TX and RX . A detailed explanation of the differences between the two options can be found in the Switch Modes page. ENABLE_TELEMETRY Enable advanced telemetry support. This option must be enabled on both TX and RX . The following telemetry messages are supported: GPS BATTERY_SENSOR ATTITUDE DEVICE_INFO FLIGHT_MODE MSP_RESP Note 1 : Increase the telemetry rate with the ExpressLRS lua script. Increase the rate until the sensor lost warnings go away. It is normal to set it up to 1:16 with 200 Hz refresh rate. Note 2 : It must be enabled together with HYBRID_SWITCHES_8 . With this unchecked/disabled, you will only get the basic RC Link Telemetry like 1RRS (RSSI dbm), RQLY (LQ) etc. Tip. You can have this option enabled in the Firmware Configuration, but set TLM Ratio to OFF in the ELRS Lua Script when you don't need advanced telemetry (like when racing). Should you need the telemetry (freestyle or medium-to-long-range flying), flip TLM Ratio back to your favorite ratio, like 1:16 or 1:8. TLM_REPORT_INTERVAL_MS It makes the TX module send the telemetry data to OpenTX to the interval you set. This stops the telemetry lost warnings when running a high telemetry ratio, or low rates like 50hz. Default value is 320LU . If you want to change that you have to suffix your milliseconds value with LU . For example, in order to specify 100 ms telemetry update rate you have to enter it like this: 100LU . Typically, you want to keep 320LU value for OpenTX based radios, and 100LU for ErskyTx ones. Tip: only check this if you're changing the value. No need to enable it if you'll be using the default 320LU value","title":"Extra Data"},{"location":"quick-start/firmware-options/#other-options","text":"JUST_BEEP_ONCE DISABLE_STARTUP_BEEP MY_STARTUP_MELODY=\"<music string>|<bpm>|<semitone offset>\" For TXes like the R9M, this sets if the TX only beeps one-time, not beep at all or play custom a startup song. By default it is set to play the ExpressLRS Startup Tune \ud83c\udfbc , but if you don't prefer it, or simply want to go stealthy, enable any of these options. \u2716\ufe0f For all your customization needs, use MY_STARTUP_MELODY to define your own startup melody using either the BlHeli32 syntax or RTTL. The BlHeli32 Synatax has the required parameters music string and bpm , and semitone offset is optional to transpose the entire melody up or down by the defined amount of semitones. Example BlHeli32 melodies are available on Rox Wolfs youtube channel , some experimentation may be required though. To write your own melody, this (Sheet Music 101) and this (BLHeli Piano) are useful resources. The RTTL Syntax is the same as used in old mobil phones for ringtones and some examples of it can be found here , where you can search through many existing RTTL melodies. UNLOCK_HIGHER_POWER Majority of the ExpressLRS modules maxes out at 250mW. With this option, higher power levels can be unlocked on the modules that supports it. However, it is imperative that you have taken measures to provide ample cooling to the module's internals through the use of a Fan Mod . This specifically applies to the R9M, which, from factory, supports a higher power level up to 1W; but because ExpressLRS runs at a much higher duty cycle, it taxes the circuity and thus produces heat much earlier. To keep it stable, cooling should be implemented. Without any cooling, you run the risk of ending up with a red paperweight. UART_INVERTED This only works with ESP based TXes (will not work with modules without built-in inversion/uninversion), but enables compatibility with radios that output inverted CRSF, such as the FrSky QX7, TBS Tango 2, RadioMaster TX16S. You want to keep this enabled in most of the cases. If your radio is T8SG V2 or you use Deviation firmware turn this setting off.","title":"Other Options"},{"location":"quick-start/firmware-options/#receiver-only-options","text":"Note: Configuration of the Receivers should match the configuration of the Transmitter Module for Sync/Binding to happen between devices. The explanation of the options for the Transmitter Modules also apply for the Receivers. But here's a few Receiver-specific Options you can configure: LOCK_ON_FIRST_CONNECTION RF Mode Locking - When the RX is waiting for a connection, it cycles through all available rates waiting for a connection on each one. By default, ExpressLRS will go back to this mode after a disconnect (failsafe). If LOCK_ON_FIRST_CONNECTION is used, ELRS will not cycle after a disconnect, but instead just stay on whatever rate the last connection was. This makes connection re-establishment quick, because the RX is always listening at the proper rate. This is generally what everyone wants, but there is utility in being able to switch the TX to the lowest rate to get more range to re-establish a link with a downed model, which can't happen if the RX is locked at the previous rate. When cycling through the rates, the RX starts with the fastest packet rate and works down to the slowest, then repeats. It waits PACKET_INTERVAL * PACKS_PER_HOP * HOP_COUNT * 1.1 at each rate. Example: 4ms * 4 * 80 * 1.1 = 1.408s for 250Hz. The duration is extended 10x if a valid packet is received during that time. Even with LOCK_ON_FIRST_CONNECTION, the rate can be changed by changing the TX rate using ELRS.lua while connected, or by power cycling the RX. AUTO_WIFI_ON_INTERVAL \u26a0\ufe0f Must be defined if you plan to update your RX over wifi without using a button on the RX \u26a0\ufe0f This will automatically turn the wifi \ud83d\udcf6 on for any module that has an ESP8285 on it if no TX connection is established after N seconds from boot (Factory Firmware of the HappyModel receivers set this to the previous default of 20s. RC8 has increased the interval to 30s). This enables pushing firmware updates to the RX by connecting to its wifi network and visiting http://10.0.0.1 . USE_DIVERSITY Enable antenna-switching diversity for Receivers that support it. USE_R9MM_R9MINI_SBUS This does not turn on SBUS protocol it simply changes the pin used for communication from those two side pins (A9 and A10) to use the pin labeled \"SBUS\" on the RX, which is inverted. This is useful for F4 FCs which only have an inverted receiver input UART RX. \ud83d\udd3c. This is only one way, so you lose the telemetry downlink to your radio as well as passthrough flashing. Enabling this turns on CRSF protocol output on the S.BUS \ud83d\ude8c pin on your R9MM/R9Mini. set serialrx_inverted = ON may also be needed within Betaflight \ud83d\udc1d for compatibility Done! It's time to flash the firmware on your transmitter","title":"Receiver Only Options"},{"location":"quick-start/flashing-bootloader/","text":"For hardware that requires STLink v2 flashing, this guide simply explains how to wire the given piece of hardware to the StLink before that flashing. FrSky Receivers \u00b6 R9mm/mini, R9mx, R9Slim+ \u00b6 This guide applies for the R9mm, R9mini, R9mx, R9Slim+, R9Slim+ OTA, if you have a OpenTX transmitter with a SmartPort output, you can flash your RXes bootloader. Download the bootloader .frk file for your respective receiver. The files are as follows: R9mm/mini: r9mm_elrs_bl.frk (14kb) or r9mm_no_btn_elrs_bl.frk (14kb) (no_btn bootloader is only used if your bind/boot button on the receiver is faulty or has gone bad, and is indicated by both LEDs (red and green) being constantly illuminated.) R9mx: r9mx_elrs_bl.frk (20kb) R9Slim+ (ACCST): r9slim_plus_elrs_bl.frk (14kb) R9Slim+ (ACCESS/OTA): r9slim_plus_ota_elrs_bl.frk (18kb) Copy the relevant file to your handset's SD card (You can put it inside /FIRMWARE folder for easy access). Wire the receiver to your radio's Smart Port, as shown: Next, flash the .frk via the S.port flashing option in OpenTX . (It helps if the External RF module is set to PPM mode.) Navigate in OpenTX to the TOOLS menu (hold SYS button) Page to the SD-HC CARD page, then the FIRMWARE folder Flash the frk file by holding OK and selecting \"Flash external module\" Unplug the receiver, and your bootloader is flashed. Now, wire the RX to your flight controller as shown below: Note: This will be the same wiring you'll use for flying and the next firmware updates (via Passthrough). Forget the factory wiring guide! Continue to the next page to set up your user defines. R9Slim \u00b6 This RX requires an StLink v2 to be flashed. Wire up the RX to the STLink using + = 3v3 , - = GND , C = CLK and D = DIO . Then, Continue to the next page to set up your user defines. FrSky Transmitters \u00b6 R9M & R9M Lite \u00b6 The R9M and R9M Lite can be flashed in a similar way to their corresponding RXes. Using an OpenTX transmitter, you flash the bootloader, and then flash ELRS. Here is a quick 2 minute demo if you would rather watch a video than read the steps: To do this you need a new version of OpenTX - you can either use the ELRS fork or a nightly build: FAQ: Why do I need a custom version of OpenTX? Currently, the most stable version of OpenTX to use with ExpressLRS is 2.3.10 ExpressLRS version found here: ExpressLRS OpenTX 2.3.10 If your radio isn't supported by the 2.3.10 ExpressLRS Binaries, your next best option at the moment is the OpenTX 2.3.12. Using the OpenTX Companion Software , download the .bin file for your Radio. Flash the bin to your radio using normal OpenTX updating protocols (remember to back everything up!) Then, with your new version of OpenTX, copy r9m_elrs_bl.frk onto the SD card of your radio, in the /FIRMWARE folder. Flash r9m_elrs_bl.frk (14kb) to your TX module: Navigate in OpenTX to the TOOLS menu (hold SYS button) Page to the SD-HC CARD page, then the FIRMWARE folder Flash the frk file by holding OK and selecting \"Flash external module\" Done! Continue to the next page to set up your user defines. R9M Lite Pro \u00b6 The R9M Lite Pro must be flashed using STLINK. This is non-reversible and requires an STLink v2 . That means solder your STLINK to + = 3v3 , - = GND , C = CLK and D = DIO . ( - may also be labeled as G ). This does not require a seperate bootloader step, so continue to the next page to set up your user defines. The flashing process will flash the bootloader as well as the firmware. Ghost Hardware \u00b6 Here is a 10 minute video, showing the steps required to both flash the bootloader and the ELRS firmware itself. Flashing the Ghost RX's is currently a 1 WAY flash once you flash ExpressLRS to the TX you will not be able to use them with stock Ghost RX's (running stock firmware, they will work while running ELRS). You will need a StLink V2 to flash the TX Wire 3.3v , GND , CLK , and DIO to their respective pins on your part from the StLink. (You can power with the StLink but in the first two image the radio is used to power the module). Done! You're ready to set up your user defines and flash the firmware to your Ghost hardware Jumper R900 Mini \u00b6 This also requires an STLink, so the wiring is as follows: Wire + = 3v3 , - = GND , C = CLK and D = DIO to their respective pins on the RX from the StLink. Because those pins are so small one option is to only solder a wire on the CLK and DIO then power it with the 5v pin with an external power source. Done! You're ready to set up your user defines and flash the firmware to your R900mini SIYI FM30 \u00b6 Here is a full guide on how to flash the FM30/FRminiRX . Thank you to @Jupa Creations","title":"Flashing bootloader"},{"location":"quick-start/flashing-bootloader/#frsky-receivers","text":"","title":"FrSky Receivers"},{"location":"quick-start/flashing-bootloader/#r9mmmini-r9mx-r9slim","text":"This guide applies for the R9mm, R9mini, R9mx, R9Slim+, R9Slim+ OTA, if you have a OpenTX transmitter with a SmartPort output, you can flash your RXes bootloader. Download the bootloader .frk file for your respective receiver. The files are as follows: R9mm/mini: r9mm_elrs_bl.frk (14kb) or r9mm_no_btn_elrs_bl.frk (14kb) (no_btn bootloader is only used if your bind/boot button on the receiver is faulty or has gone bad, and is indicated by both LEDs (red and green) being constantly illuminated.) R9mx: r9mx_elrs_bl.frk (20kb) R9Slim+ (ACCST): r9slim_plus_elrs_bl.frk (14kb) R9Slim+ (ACCESS/OTA): r9slim_plus_ota_elrs_bl.frk (18kb) Copy the relevant file to your handset's SD card (You can put it inside /FIRMWARE folder for easy access). Wire the receiver to your radio's Smart Port, as shown: Next, flash the .frk via the S.port flashing option in OpenTX . (It helps if the External RF module is set to PPM mode.) Navigate in OpenTX to the TOOLS menu (hold SYS button) Page to the SD-HC CARD page, then the FIRMWARE folder Flash the frk file by holding OK and selecting \"Flash external module\" Unplug the receiver, and your bootloader is flashed. Now, wire the RX to your flight controller as shown below: Note: This will be the same wiring you'll use for flying and the next firmware updates (via Passthrough). Forget the factory wiring guide! Continue to the next page to set up your user defines.","title":"R9mm/mini, R9mx, R9Slim+"},{"location":"quick-start/flashing-bootloader/#r9slim","text":"This RX requires an StLink v2 to be flashed. Wire up the RX to the STLink using + = 3v3 , - = GND , C = CLK and D = DIO . Then, Continue to the next page to set up your user defines.","title":"R9Slim"},{"location":"quick-start/flashing-bootloader/#frsky-transmitters","text":"","title":"FrSky Transmitters"},{"location":"quick-start/flashing-bootloader/#r9m-r9m-lite","text":"The R9M and R9M Lite can be flashed in a similar way to their corresponding RXes. Using an OpenTX transmitter, you flash the bootloader, and then flash ELRS. Here is a quick 2 minute demo if you would rather watch a video than read the steps: To do this you need a new version of OpenTX - you can either use the ELRS fork or a nightly build: FAQ: Why do I need a custom version of OpenTX? Currently, the most stable version of OpenTX to use with ExpressLRS is 2.3.10 ExpressLRS version found here: ExpressLRS OpenTX 2.3.10 If your radio isn't supported by the 2.3.10 ExpressLRS Binaries, your next best option at the moment is the OpenTX 2.3.12. Using the OpenTX Companion Software , download the .bin file for your Radio. Flash the bin to your radio using normal OpenTX updating protocols (remember to back everything up!) Then, with your new version of OpenTX, copy r9m_elrs_bl.frk onto the SD card of your radio, in the /FIRMWARE folder. Flash r9m_elrs_bl.frk (14kb) to your TX module: Navigate in OpenTX to the TOOLS menu (hold SYS button) Page to the SD-HC CARD page, then the FIRMWARE folder Flash the frk file by holding OK and selecting \"Flash external module\" Done! Continue to the next page to set up your user defines.","title":"R9M &amp; R9M Lite"},{"location":"quick-start/flashing-bootloader/#r9m-lite-pro","text":"The R9M Lite Pro must be flashed using STLINK. This is non-reversible and requires an STLink v2 . That means solder your STLINK to + = 3v3 , - = GND , C = CLK and D = DIO . ( - may also be labeled as G ). This does not require a seperate bootloader step, so continue to the next page to set up your user defines. The flashing process will flash the bootloader as well as the firmware.","title":"R9M Lite Pro"},{"location":"quick-start/flashing-bootloader/#ghost-hardware","text":"Here is a 10 minute video, showing the steps required to both flash the bootloader and the ELRS firmware itself. Flashing the Ghost RX's is currently a 1 WAY flash once you flash ExpressLRS to the TX you will not be able to use them with stock Ghost RX's (running stock firmware, they will work while running ELRS). You will need a StLink V2 to flash the TX Wire 3.3v , GND , CLK , and DIO to their respective pins on your part from the StLink. (You can power with the StLink but in the first two image the radio is used to power the module). Done! You're ready to set up your user defines and flash the firmware to your Ghost hardware","title":"Ghost Hardware"},{"location":"quick-start/flashing-bootloader/#jumper-r900-mini","text":"This also requires an STLink, so the wiring is as follows: Wire + = 3v3 , - = GND , C = CLK and D = DIO to their respective pins on the RX from the StLink. Because those pins are so small one option is to only solder a wire on the CLK and DIO then power it with the 5v pin with an external power source. Done! You're ready to set up your user defines and flash the firmware to your R900mini","title":"Jumper R900 Mini"},{"location":"quick-start/flashing-bootloader/#siyi-fm30","text":"Here is a full guide on how to flash the FM30/FRminiRX . Thank you to @Jupa Creations","title":"SIYI FM30"},{"location":"quick-start/flashing-elrs/","text":"Now that you've installed the bootloader on your non-ELRS hardware and have set up your user defines it's time to flash your hardware. Your configurator window should look something like this: Notes: The Compiling and Firmware build will take a while the first time. It could take up to 10 minutes if there aren't any issues. Ensure you are connected to the Internet and aren't behind any firewalls that could prevent data transfer from Github, or platformIO dependency repositories. Also note that the process will use up some disk space for these libraries as well as Memory (RAM) and CPU cycles. Non-ELRS Hardware \u00b6 FrSky TXes \u00b6 Flashing via OpenTX (Requires OpenTX 2.3.12) \u00b6 Using Build in the ExpressLRS Configurator, wait for the firmware to be compiled. After that's done, ExpressLRS Configurator Log should show the Success Message, and it will automatically open the folder where the firmware.elrs can be found. Put (copy-paste) the firmware.elrs to your Radio's SD Card (preferably to the /FIRMWARE folder for easy access). Once on your radio, navigate to the /FIRMWARE folder, select the firmware.elrs and click-hold the Enter button and select \"Flash External ELRS\". By this point, the bootloader (r9m_elrs_bl.frk) should've been flashed already. Wait for the flashing to finish, and if your module is equipped with a speaker (full size R9Ms), you should hear the tune and two beeps (if external module is now set to CRSF protocol). Flashing using STLink \u00b6 With the module connected as described in Flashing Bootloader , and your configuration set, hit Build & Flash in the ExpressLRS Configurator and wait for the process to finish. Once that's done, and the Success Message showing, you can now remove/unsolder the STLink, and re-assemble the module, and put it into your Radio's Module Bay. The ExpressLRS tune should play and then two beeps after that can be heard, for units that has a speaker (R9Ms) and if the External Module is set to CRSF Protocol. Verification can be done using the ELRS.lua script. It should show the Version Hash at the top, as well as the options you can set. If it's showing \"Connecting\", check if External Module is set to CRSF for the selected model in your radio, and that internal RF module is set to off. See general Troubleshooting section for other ways to determine your module is flashed and ready for flying. FrSky RXes \u00b6 Note: This will be the same wiring you'll use for flying and the next firmware updates (via Passthrough). Forget the factory wiring guide! Passthrough Flashing (works with Betaflight, iNav) \u00b6 Make sure the correct Bootloader has been flashed to the receiver prior to wiring it up to your flight controller. Using the wiring guide above, find a free, uninverted UART in your FC. You can use your FC's wiring guide for a Crossfire or Ghost receiver. Once wired to your FC, connect USB. Did your receiver powered up too (with both LEDs lit)? If so, disconnect USB, hold the bind button on your receiver, and reconnect to USB. The LED should start alternating between the Green and Red LEDs. Once it's alternating, you can then let go of the Bind Button. If your receiver didn't get powered from USB, have a lipo ready and continue with the next steps. On the ExpressLRS Configurator, with your Options set, click on Build & Flash . Like on the TX module, it will take a while on the first time. Watch out for the Passthrough Init stage. This stage will check your FC Configuration for the Serial RX UART (Software Inversion via \"set serialrx_inverted\" and Half Duplex mode via \"set serialrx_halfduplex\" will be checked; both should be off.) If Retry... lines appear, connect a LiPo if your receiver isn't powered by the USB (i.e. power up your receiver and FC). Wait for this process to finish. It's done once the \"Success\" prompt is shown. Flashing via STLink (only recommended as last resort) \u00b6 This method is irreversible. It will remove the ability to reflash back to Frsky firmware. You have been warned! Make sure your STLink dongle is properly recognized by your System as such (Drivers are installed, etc.). Disable 'Readout Protection'. To do this download the ST-LINK Utility and follow this quick how to video . Or alternatively under linux you can use OpenOCD . Connect your STLink to the receiver as shown in the wiring guides below. You'll need the GND, DIO (Data), CLK (Clock) and 3.3v. r9mm/r9mini r9mx Using the correct target specific for your receiver, hit \"Build & Flash\". Once done, wire your receiver to your Flight Controller. Passthrough flashing can now be used for updating the receiver. Jumper RX \u00b6 Disable 'Readout Protection'. To do this download the ST-LINK Utility and follow this quick how to video . Or alternatively under linux you can use OpenOCD . Using the correct target specific for your receiver, hit \"Build & Flash\". After the flash is successful, desolder the STLink and connect RX2 and TX2 (you will need to solder on the STM32 pins, see picture) to a flight controller and setting up the receiver with the CRSF serial protocol, the env:Jumper_RX_R900MINI_via_Passthrough target may now be used for future uploads through Betaflight Passthrough. ImmersionRC RXes \u00b6 TODO ImmersionRC TXes \u00b6 TODO SIYI FM30 TX \u00b6 TODO SIYI FRmini RX \u00b6 TODO ELRS Hardware \u00b6 Happymodel TX \u00b6 ES900TX \u00b6 (ES915TX/ES868TX) TODO ES24TX (inc. Lite) \u00b6 Flashing via WiFi \u00b6 Build your firmware using the ExpressLRS Configurator. Once it's done, it should open the Target folder for you where the firmware.bin file is. Do not close this window so you can easily locate the correct file to upload to the module. The next steps will require the ELRS Lua Script (right-click, save as). Download the ELRS.lua script and save it to your Radio's /Scripts/Tools folder. Insert/attach your module into your module bay and make sure it's not loose and there's proper connection with the radio. Execute the ELRS.lua script by pressing \"System Menu\" in your radio and then under Tools, select ELRS.lua. At first, it will show \"Mismatch\"; it's normal. Tap Enter once on your radio to \"Force Use\" the script. If it's showing a \"Connecting\" message, then recheck the connection of the module to your radio. Select \"Wifi Update\" from the lua script. Lua script will instruct you to go to a specific Ip Address, but you have to first connect to the Wifi Hotspot it created. It will show up in your network as ExpressLRS TX Module , and the password is simply expresslrs . Using your browser, navigate to the correct page (typically http://10.0.0.1/ ) and it should show an upload form (you will have to scroll down a bit). You can drag-and-drop the firmware.bin file from the folder that ExpressLRS Configurator opened for you, or you can manually navigate to it via the Browse or Choose File button on the Upload form. Click on Update once and the update process should commence. Take note that you should be taking a TX firmware.bin file. The folder name where you can get this file is the same as the Target you have selected in the ExpressLRS Configurator. Once the file is uploaded, the webserver should load a White page, with the message Update Success! Rebooting... As it rebooted, the connection to the Webserver got terminated. Check via the Lua Script whether you have successfully updated the TX module. The first line of the lua script should show a 6-character hash that corresponds to the Git commit hash for the firmware version you have on the module. There should be no more \"Mismatch\" messages as well. Flashing via USB/UART \u00b6 This method requires you move two jumpers into specific pins in the module board. See the following image for the jumper location and which pin should be bridged for this method to work. The jumpers should be moved into the USB/UART (Green) position from the image above. Attach your USB cable into the module and your computer. CP210x Drivers will have to be installed for this to work properly (Windows). Make sure your computer recognizes the module as a USB-to-UART Bridge device, otherwise, this method will not work. Using the ExpressLRS Configurator with the correct Target selected and options set, hit Build & Flash . Wait for the process to finish, and you should be greeted with the \"Success\" message. Assemble the module back together and attach it to your radio module bay and verify with the ELRS.lua script if you have successfully updated your module. Happymodel RX \u00b6 Happymodel ES900RX \u00b6 TODO Happymodel EP RXes \u00b6 Flashing via Wifi (Recommended as first-flash method) Wire up your receiver to a free uart in your Flight Controller. The image above shows the pinouts for these receivers. Wire TX on receiver to an RX pad on the FC, and the RX on receiver to a TX pad on the FC in the same UART. Wire 5v and Gnd as normal (5v to a 5v pad on FC and Gnd to a Gnd pad on the FC). Note: There are Flight Controllers that will pull the RX pads LOW which will put the ESP-based receivers into Bootloader Mode unintentionally. A solid LED light on these receivers even with the TX module off is a sign they are in Bootloader Mode. If this is the case, rewire the receiver to a different UART. Build the firmware using the ExpressLRS Configurator using the correct Target and options. Once done, it should open a new window where the firmware.bin is. Do not close this window so you can easily navigate to it once it's time to upload the firmware into the receiver. Power your Flight Controller by either connecting a LiPo or attaching the USB cable (if receiver gets powered from USB via a 4v5 pad). Receiver's LED will blink slow at first, and after 20s or 30s (can be adjusted via ExpressLRS Configurator using AUTO_WIFI_ON_INTERVAL ), it should blink fast indicating it's on Wifi Hotspot Mode. Connect to the Wifi Network the receiver has created. It should be named something like ExpressLRS RX with the same expresslrs password as the TX Module Hotspot. Navigate to the same web address as the TX Module (usually http://10.0.0.1 ). The Firmware upload page should load, and using the File Upload Form, navigate where the correct Receiver firmware.bin is (like with the Tx module, you can also drag-and-drop the firmware file into the form field or use the Browse or Choose File button). Click on Update button and the firmware file will be uploaded and the update process should commence. A white page should load momentarily with the message Update Success! Rebooting... . Wait a little bit and the receiver should be updated. Power cycle and your module and receiver should now be bound (given you have updated the Tx Module as well, and that they have the same binding phrase and options). Flashing via Passthrough Wire up your receiver to a free uart in your Flight Controller. The image above shows the pinouts for these receivers. Wire TX on receiver to an RX pad on the FC, and the RX on receiver to a TX pad on the FC in the same UART. Wire 5v and Gnd as normal (5v to a 5v pad on FC and Gnd to a Gnd pad on the FC). You will need to bridge the Boot pads on the receiver the first time you'll be updating via this method. The image above shows where the Boot pads are. A solid LED indicates the receiver is in Bootloader mode when the TX module is OFF (Solid LED also indicates Radio+module & Receiver is bound and has connection). Note: if you haven't bridged the Boot pads but the receiver has solid LED light, your FC is probably pulling the current UART's RX pad LOW which will interfere with the normal and passthrough flashing of this receiver. Find another UART and wire your receiver there instead Bridging the Boot pads is no longer needed past 1.0.0-RC6. Power your FC with a LiPo, or if receiver is powered via USB (receiver is connected to a 4v5 pad), connect the FC to your USB port. Using the ExpressLRS Configurator, with the correct Target selected and options set, click on Build & Flash . Wait for the process to finish and you should be greeted with the \"Success\" banner. Unplug USB and LiPo, and removed the solder on the bridged Boot pads. You no longer need it (past 1.0.0-RC6). Power your TX Module and then your FC to verify you are bound and has connection. Happymodel PP RXes \u00b6 The PP receivers do not have Wifi, and so, it can only be updated via Passthrough. Follow the same wiring as that of the EP receivers. The PP has a silkscreened \"RT5G\" on one of its side indicating the order of the pads, with R = Rx, T = Tx, 5 = 5v and G = Gnd, respectively. Connect the Rx pad to a Tx pad on the FC, and the Tx pad to an RX pad on the FC, with 5v and Gnd to their usual connections. The PP doesn't have a Boot pad either so there's no need to bridge any pads. Once wired, power up your FC by connecting a LiPo or, if the receiver is getting powered via USB, connect your USB cable to a vacant port. Using the ExpressLRS Configurator, with the correct Target selected and options set, hit Build & Flash . Wait a bit for the process to finish and you should see a \"Success\" banner. Power-cycle the FC and verify receiver connects to the Tx module (power up the Tx first, then the Receiver). DIY Hardware \u00b6 DIY 2.4G TXes \u00b6 TODO DIY 2.4G RXes \u00b6 TODO DIY 900M RXes \u00b6 TODO","title":"Flashing elrs"},{"location":"quick-start/flashing-elrs/#non-elrs-hardware","text":"","title":"Non-ELRS Hardware"},{"location":"quick-start/flashing-elrs/#frsky-txes","text":"","title":"FrSky TXes"},{"location":"quick-start/flashing-elrs/#flashing-via-opentx-requires-opentx-2312","text":"Using Build in the ExpressLRS Configurator, wait for the firmware to be compiled. After that's done, ExpressLRS Configurator Log should show the Success Message, and it will automatically open the folder where the firmware.elrs can be found. Put (copy-paste) the firmware.elrs to your Radio's SD Card (preferably to the /FIRMWARE folder for easy access). Once on your radio, navigate to the /FIRMWARE folder, select the firmware.elrs and click-hold the Enter button and select \"Flash External ELRS\". By this point, the bootloader (r9m_elrs_bl.frk) should've been flashed already. Wait for the flashing to finish, and if your module is equipped with a speaker (full size R9Ms), you should hear the tune and two beeps (if external module is now set to CRSF protocol).","title":"Flashing via OpenTX (Requires OpenTX 2.3.12)"},{"location":"quick-start/flashing-elrs/#flashing-using-stlink","text":"With the module connected as described in Flashing Bootloader , and your configuration set, hit Build & Flash in the ExpressLRS Configurator and wait for the process to finish. Once that's done, and the Success Message showing, you can now remove/unsolder the STLink, and re-assemble the module, and put it into your Radio's Module Bay. The ExpressLRS tune should play and then two beeps after that can be heard, for units that has a speaker (R9Ms) and if the External Module is set to CRSF Protocol. Verification can be done using the ELRS.lua script. It should show the Version Hash at the top, as well as the options you can set. If it's showing \"Connecting\", check if External Module is set to CRSF for the selected model in your radio, and that internal RF module is set to off. See general Troubleshooting section for other ways to determine your module is flashed and ready for flying.","title":"Flashing using STLink"},{"location":"quick-start/flashing-elrs/#frsky-rxes","text":"Note: This will be the same wiring you'll use for flying and the next firmware updates (via Passthrough). Forget the factory wiring guide!","title":"FrSky RXes"},{"location":"quick-start/flashing-elrs/#passthrough-flashing-works-with-betaflight-inav","text":"Make sure the correct Bootloader has been flashed to the receiver prior to wiring it up to your flight controller. Using the wiring guide above, find a free, uninverted UART in your FC. You can use your FC's wiring guide for a Crossfire or Ghost receiver. Once wired to your FC, connect USB. Did your receiver powered up too (with both LEDs lit)? If so, disconnect USB, hold the bind button on your receiver, and reconnect to USB. The LED should start alternating between the Green and Red LEDs. Once it's alternating, you can then let go of the Bind Button. If your receiver didn't get powered from USB, have a lipo ready and continue with the next steps. On the ExpressLRS Configurator, with your Options set, click on Build & Flash . Like on the TX module, it will take a while on the first time. Watch out for the Passthrough Init stage. This stage will check your FC Configuration for the Serial RX UART (Software Inversion via \"set serialrx_inverted\" and Half Duplex mode via \"set serialrx_halfduplex\" will be checked; both should be off.) If Retry... lines appear, connect a LiPo if your receiver isn't powered by the USB (i.e. power up your receiver and FC). Wait for this process to finish. It's done once the \"Success\" prompt is shown.","title":"Passthrough Flashing (works with Betaflight, iNav)"},{"location":"quick-start/flashing-elrs/#flashing-via-stlink-only-recommended-as-last-resort","text":"This method is irreversible. It will remove the ability to reflash back to Frsky firmware. You have been warned! Make sure your STLink dongle is properly recognized by your System as such (Drivers are installed, etc.). Disable 'Readout Protection'. To do this download the ST-LINK Utility and follow this quick how to video . Or alternatively under linux you can use OpenOCD . Connect your STLink to the receiver as shown in the wiring guides below. You'll need the GND, DIO (Data), CLK (Clock) and 3.3v. r9mm/r9mini r9mx Using the correct target specific for your receiver, hit \"Build & Flash\". Once done, wire your receiver to your Flight Controller. Passthrough flashing can now be used for updating the receiver.","title":"Flashing via STLink (only recommended as last resort)"},{"location":"quick-start/flashing-elrs/#jumper-rx","text":"Disable 'Readout Protection'. To do this download the ST-LINK Utility and follow this quick how to video . Or alternatively under linux you can use OpenOCD . Using the correct target specific for your receiver, hit \"Build & Flash\". After the flash is successful, desolder the STLink and connect RX2 and TX2 (you will need to solder on the STM32 pins, see picture) to a flight controller and setting up the receiver with the CRSF serial protocol, the env:Jumper_RX_R900MINI_via_Passthrough target may now be used for future uploads through Betaflight Passthrough.","title":"Jumper RX"},{"location":"quick-start/flashing-elrs/#immersionrc-rxes","text":"TODO","title":"ImmersionRC RXes"},{"location":"quick-start/flashing-elrs/#immersionrc-txes","text":"TODO","title":"ImmersionRC TXes"},{"location":"quick-start/flashing-elrs/#siyi-fm30-tx","text":"TODO","title":"SIYI FM30 TX"},{"location":"quick-start/flashing-elrs/#siyi-frmini-rx","text":"TODO","title":"SIYI FRmini RX"},{"location":"quick-start/flashing-elrs/#elrs-hardware","text":"","title":"ELRS Hardware"},{"location":"quick-start/flashing-elrs/#happymodel-tx","text":"","title":"Happymodel TX"},{"location":"quick-start/flashing-elrs/#es900tx","text":"(ES915TX/ES868TX) TODO","title":"ES900TX"},{"location":"quick-start/flashing-elrs/#es24tx-inc-lite","text":"","title":"ES24TX (inc. Lite)"},{"location":"quick-start/flashing-elrs/#flashing-via-wifi","text":"Build your firmware using the ExpressLRS Configurator. Once it's done, it should open the Target folder for you where the firmware.bin file is. Do not close this window so you can easily locate the correct file to upload to the module. The next steps will require the ELRS Lua Script (right-click, save as). Download the ELRS.lua script and save it to your Radio's /Scripts/Tools folder. Insert/attach your module into your module bay and make sure it's not loose and there's proper connection with the radio. Execute the ELRS.lua script by pressing \"System Menu\" in your radio and then under Tools, select ELRS.lua. At first, it will show \"Mismatch\"; it's normal. Tap Enter once on your radio to \"Force Use\" the script. If it's showing a \"Connecting\" message, then recheck the connection of the module to your radio. Select \"Wifi Update\" from the lua script. Lua script will instruct you to go to a specific Ip Address, but you have to first connect to the Wifi Hotspot it created. It will show up in your network as ExpressLRS TX Module , and the password is simply expresslrs . Using your browser, navigate to the correct page (typically http://10.0.0.1/ ) and it should show an upload form (you will have to scroll down a bit). You can drag-and-drop the firmware.bin file from the folder that ExpressLRS Configurator opened for you, or you can manually navigate to it via the Browse or Choose File button on the Upload form. Click on Update once and the update process should commence. Take note that you should be taking a TX firmware.bin file. The folder name where you can get this file is the same as the Target you have selected in the ExpressLRS Configurator. Once the file is uploaded, the webserver should load a White page, with the message Update Success! Rebooting... As it rebooted, the connection to the Webserver got terminated. Check via the Lua Script whether you have successfully updated the TX module. The first line of the lua script should show a 6-character hash that corresponds to the Git commit hash for the firmware version you have on the module. There should be no more \"Mismatch\" messages as well.","title":"Flashing via WiFi"},{"location":"quick-start/flashing-elrs/#flashing-via-usbuart","text":"This method requires you move two jumpers into specific pins in the module board. See the following image for the jumper location and which pin should be bridged for this method to work. The jumpers should be moved into the USB/UART (Green) position from the image above. Attach your USB cable into the module and your computer. CP210x Drivers will have to be installed for this to work properly (Windows). Make sure your computer recognizes the module as a USB-to-UART Bridge device, otherwise, this method will not work. Using the ExpressLRS Configurator with the correct Target selected and options set, hit Build & Flash . Wait for the process to finish, and you should be greeted with the \"Success\" message. Assemble the module back together and attach it to your radio module bay and verify with the ELRS.lua script if you have successfully updated your module.","title":"Flashing via USB/UART"},{"location":"quick-start/flashing-elrs/#happymodel-rx","text":"","title":"Happymodel RX"},{"location":"quick-start/flashing-elrs/#happymodel-es900rx","text":"TODO","title":"Happymodel ES900RX"},{"location":"quick-start/flashing-elrs/#happymodel-ep-rxes","text":"Flashing via Wifi (Recommended as first-flash method) Wire up your receiver to a free uart in your Flight Controller. The image above shows the pinouts for these receivers. Wire TX on receiver to an RX pad on the FC, and the RX on receiver to a TX pad on the FC in the same UART. Wire 5v and Gnd as normal (5v to a 5v pad on FC and Gnd to a Gnd pad on the FC). Note: There are Flight Controllers that will pull the RX pads LOW which will put the ESP-based receivers into Bootloader Mode unintentionally. A solid LED light on these receivers even with the TX module off is a sign they are in Bootloader Mode. If this is the case, rewire the receiver to a different UART. Build the firmware using the ExpressLRS Configurator using the correct Target and options. Once done, it should open a new window where the firmware.bin is. Do not close this window so you can easily navigate to it once it's time to upload the firmware into the receiver. Power your Flight Controller by either connecting a LiPo or attaching the USB cable (if receiver gets powered from USB via a 4v5 pad). Receiver's LED will blink slow at first, and after 20s or 30s (can be adjusted via ExpressLRS Configurator using AUTO_WIFI_ON_INTERVAL ), it should blink fast indicating it's on Wifi Hotspot Mode. Connect to the Wifi Network the receiver has created. It should be named something like ExpressLRS RX with the same expresslrs password as the TX Module Hotspot. Navigate to the same web address as the TX Module (usually http://10.0.0.1 ). The Firmware upload page should load, and using the File Upload Form, navigate where the correct Receiver firmware.bin is (like with the Tx module, you can also drag-and-drop the firmware file into the form field or use the Browse or Choose File button). Click on Update button and the firmware file will be uploaded and the update process should commence. A white page should load momentarily with the message Update Success! Rebooting... . Wait a little bit and the receiver should be updated. Power cycle and your module and receiver should now be bound (given you have updated the Tx Module as well, and that they have the same binding phrase and options). Flashing via Passthrough Wire up your receiver to a free uart in your Flight Controller. The image above shows the pinouts for these receivers. Wire TX on receiver to an RX pad on the FC, and the RX on receiver to a TX pad on the FC in the same UART. Wire 5v and Gnd as normal (5v to a 5v pad on FC and Gnd to a Gnd pad on the FC). You will need to bridge the Boot pads on the receiver the first time you'll be updating via this method. The image above shows where the Boot pads are. A solid LED indicates the receiver is in Bootloader mode when the TX module is OFF (Solid LED also indicates Radio+module & Receiver is bound and has connection). Note: if you haven't bridged the Boot pads but the receiver has solid LED light, your FC is probably pulling the current UART's RX pad LOW which will interfere with the normal and passthrough flashing of this receiver. Find another UART and wire your receiver there instead Bridging the Boot pads is no longer needed past 1.0.0-RC6. Power your FC with a LiPo, or if receiver is powered via USB (receiver is connected to a 4v5 pad), connect the FC to your USB port. Using the ExpressLRS Configurator, with the correct Target selected and options set, click on Build & Flash . Wait for the process to finish and you should be greeted with the \"Success\" banner. Unplug USB and LiPo, and removed the solder on the bridged Boot pads. You no longer need it (past 1.0.0-RC6). Power your TX Module and then your FC to verify you are bound and has connection.","title":"Happymodel EP RXes"},{"location":"quick-start/flashing-elrs/#happymodel-pp-rxes","text":"The PP receivers do not have Wifi, and so, it can only be updated via Passthrough. Follow the same wiring as that of the EP receivers. The PP has a silkscreened \"RT5G\" on one of its side indicating the order of the pads, with R = Rx, T = Tx, 5 = 5v and G = Gnd, respectively. Connect the Rx pad to a Tx pad on the FC, and the Tx pad to an RX pad on the FC, with 5v and Gnd to their usual connections. The PP doesn't have a Boot pad either so there's no need to bridge any pads. Once wired, power up your FC by connecting a LiPo or, if the receiver is getting powered via USB, connect your USB cable to a vacant port. Using the ExpressLRS Configurator, with the correct Target selected and options set, hit Build & Flash . Wait a bit for the process to finish and you should see a \"Success\" banner. Power-cycle the FC and verify receiver connects to the Tx module (power up the Tx first, then the Receiver).","title":"Happymodel PP RXes"},{"location":"quick-start/flashing-elrs/#diy-hardware","text":"","title":"DIY Hardware"},{"location":"quick-start/flashing-elrs/#diy-24g-txes","text":"TODO","title":"DIY 2.4G TXes"},{"location":"quick-start/flashing-elrs/#diy-24g-rxes","text":"TODO","title":"DIY 2.4G RXes"},{"location":"quick-start/flashing-elrs/#diy-900m-rxes","text":"TODO","title":"DIY 900M RXes"},{"location":"quick-start/getting-started/","text":"Welcome to the ELRS Quick Start Guide! To navigate this guide either use the sidebar to navigate through the pages or just hit the Next arrow in footer. . In longer pages, we recommend using the right Table of Contents section to select your hardware We hope this guide helps you get your ELRS gear up and running, and you ripping the best RC link known to mankind.","title":"Getting Started"},{"location":"quick-start/installing-configurator/","text":"There are two ways to build & flash ExpressLRS. The recommended way is to use ExpressLRS Configurator. For advanced users who want to modify the code, you can setup the development toolchain. Configurator Setup \u00b6 Download the latest ExpressLRS Configurator application for your platform, following the instructions written by jurgelenas . Go to the supported hardware page to find the correct target for your hardware.","title":"Installing Configurator"},{"location":"quick-start/installing-configurator/#configurator-setup","text":"Download the latest ExpressLRS Configurator application for your platform, following the instructions written by jurgelenas . Go to the supported hardware page to find the correct target for your hardware.","title":"Configurator Setup"},{"location":"quick-start/otx-cfg/","text":"OpenTX Version \u00b6 We recommend OpenTX-2.3.12 , which allow for use of .elrs files and contain crsfshot , which allows for 500Hz+ rates. CRSF Protocol \u00b6 ExpressLRS uses the CRSF serial protocol to communicate between the transmitter and the TX module. To set this up, enter into your model settings, and on the \"Model Setup\" tab, enable your \"External RF\" and select \"CRSF\" as the protocol: NOTE: If using 2.4ghz ELRS, the internal module must be turned off. NOTE: If using 2.4ghz ELRS, internal module must be turned off. Serial Baud Rate \u00b6 On some transmitters, the baud rate for comms between the opentx and the ExpressLRS module can be changed. The two rates available are 115200 and 400000. ExpressLRS supports both rates (auto switches to the correct rate on power-up), however, we have found that on the R9M modules, the inverter IC's that are used are not capable of reliably handling 400k baud. If you're using an R9M, select 115200 baud in OpenTX, or do the resistor mod described on the Supported Hardware page. ADC Filter \u00b6 The ADC filter is enabled by default in OpenTX and is known to cause issues with RC Command data. This can result in \"jagged\" RC command responses in black box logs, caused by sequential RC packets that have the same command value (which were \"smoothed\" by the ADC filter). We recommend turning the ADC filter OFF in OpenTX Lua Script \u00b6 For faster access to the Lua script, save the ELRS.lua File from this link: ExLRS Lua Script onto the radio's SD Card in the Scripts/Tools folder and Long Press the \"SYS\" button (for T16 or similar Radios) or the \"Menu\" button (for Taranis X9D or similar Radios) to access the Tools Menu where you can find ELRS script ready to run with only one click. NB If you're prompted with Syntax Error , make sure you downloaded the raw file, and not html. The file is also available in your local clone, it's located at src/lua/ELRS.lua . Also the Lua script was recently updated with an important feature, top right it shows an indicator 0:200 which tells you how many bad UART packets and how many packets/second it's getting from the radio. It can be used to confirm the communication between the Radio and the R9M module is working properly. 0:200 means : 0 bad packets and 200 good packets (per second). The value should match the selected air rate (200 for 200Hz, 50 for 50Hz, etc..) If it doesn't and is stuck at 250 that means crsfshot isn't working.","title":"Otx cfg"},{"location":"quick-start/otx-cfg/#opentx-version","text":"We recommend OpenTX-2.3.12 , which allow for use of .elrs files and contain crsfshot , which allows for 500Hz+ rates.","title":"OpenTX Version"},{"location":"quick-start/otx-cfg/#crsf-protocol","text":"ExpressLRS uses the CRSF serial protocol to communicate between the transmitter and the TX module. To set this up, enter into your model settings, and on the \"Model Setup\" tab, enable your \"External RF\" and select \"CRSF\" as the protocol: NOTE: If using 2.4ghz ELRS, the internal module must be turned off. NOTE: If using 2.4ghz ELRS, internal module must be turned off.","title":"CRSF Protocol"},{"location":"quick-start/otx-cfg/#serial-baud-rate","text":"On some transmitters, the baud rate for comms between the opentx and the ExpressLRS module can be changed. The two rates available are 115200 and 400000. ExpressLRS supports both rates (auto switches to the correct rate on power-up), however, we have found that on the R9M modules, the inverter IC's that are used are not capable of reliably handling 400k baud. If you're using an R9M, select 115200 baud in OpenTX, or do the resistor mod described on the Supported Hardware page.","title":"Serial Baud Rate"},{"location":"quick-start/otx-cfg/#adc-filter","text":"The ADC filter is enabled by default in OpenTX and is known to cause issues with RC Command data. This can result in \"jagged\" RC command responses in black box logs, caused by sequential RC packets that have the same command value (which were \"smoothed\" by the ADC filter). We recommend turning the ADC filter OFF in OpenTX","title":"ADC Filter"},{"location":"quick-start/otx-cfg/#lua-script","text":"For faster access to the Lua script, save the ELRS.lua File from this link: ExLRS Lua Script onto the radio's SD Card in the Scripts/Tools folder and Long Press the \"SYS\" button (for T16 or similar Radios) or the \"Menu\" button (for Taranis X9D or similar Radios) to access the Tools Menu where you can find ELRS script ready to run with only one click. NB If you're prompted with Syntax Error , make sure you downloaded the raw file, and not html. The file is also available in your local clone, it's located at src/lua/ELRS.lua . Also the Lua script was recently updated with an important feature, top right it shows an indicator 0:200 which tells you how many bad UART packets and how many packets/second it's getting from the radio. It can be used to confirm the communication between the Radio and the R9M module is working properly. 0:200 means : 0 bad packets and 200 good packets (per second). The value should match the selected air rate (200 for 200Hz, 50 for 50Hz, etc..) If it doesn't and is stuck at 250 that means crsfshot isn't working.","title":"Lua Script"},{"location":"quick-start/pre-1stflight/","text":"Prior to your first ExpressLRS flight, you may want to do a few tweaks to your setup to ensure a fun and trouble-free ExpressLRS experience! Modes \u00b6 By default, ExpressLRS uses one-bit switches for the AUX channels. This means a three-position switch will only send two positions (fully off, or 1000, and fully on, or 2000) to Betaflight on the AUX channels. Set your modes appropriately if you are using one-bit switches, or enable HYBRID_SWITCHES_8 for expanded position options. For more information, read the switch modes page . RSSI and Link Quality \u00b6 To get RSSI and Link Quality displayed in the OSD, set RSSI Channel to \"Disabled\" in the Receiver tab of the Betaflight Configurator, and RSSI_ADC should be disabled on the Configuration tab. Both of these are the default. On the OSD menu, use the Link Quality and RSSI dBm value elements (not \"RSSI Value\"). If you wish to enable the rssi dBm warning, you'll have to change the alarm level using set osd_rssi_dbm_alarm = -100 in CLI. A sensible value is 5-10 higher than the sensitivity shown in the ELRS.lua for the packet rate (e.g. 250Hz=-108, so -103 to -98 for the alarm). If using DJI Goggles, you're required to use \"RSSI Value\" as the OSD element. Therefore you have to decide between LQ or RSSI, by selecting either AUX11 (LQ) or AUX12 (RSSI) as RSSI Channel on the Receiver tab. More information about signal metrics is found in this article on signal health . Blackbox \u00b6 Blackbox is handy for evaluating the performance of the RF link for a flight. Set your BB to debug mode RC_SMOOTHING_RATE , which will capture the rate that Betaflight is receiving RC Packets from the RX. Telemetry \u00b6 Initially ExpressLRS had very limited telemetry support but with Version 1.0.0-RC1 this changed and full telemetry was added as optional feature . The default setting only includes the link status message that includes the RSSI and Link quality. To receive all messages the feature telemetry has to be enabled in the user defines It's possible to flash your TX module with telemetry support enabled and use it with a RX without telemetry enabled . So you can flash certain receivers with telemetry support and others without it and use it with the same TX module. The RX transmits a subset of telemetry it receives from the flight controller. Disabling certain messages only works if the flight controller firmware does support it. For Betaflight this is possible with the telemetry_disabled_* cli settings: # Disable Attitude telemetry item set telemetry_disabled_pitch = ON set telemetry_disabled_roll = ON set telemetry_disabled_heading = ON # Disable Battery telemetry item set telemetry_disabled_voltage = ON set telemetry_disabled_current = ON set telemetry_disabled_fuel = ON # Disable GPS telemetry item set telemetry_disabled_altitude = ON set telemetry_disabled_lat_long = ON set telemetry_disabled_ground_speed = ON set telemetry_disabled_heading = ON # Disable Flight Mode telemetry item (BF >4.2.9) set telemetry_disabled_mode = ON Since telemetry messages are sent with low priority it takes some time to transmit the data. The telemetry rate in the lua settings script controls how often a telemetry message should be sent. So a ratio of 1:2 means that every second message is a telemetry message, so the telemetry data is transferred very fast. A ratio 1:64 means that only one of 64 messages is a telemetry message and so the transfer happens much slower. The refresh rate also impacts the transfer speed. 50 Hz is slower compared to 200 Hz. So if you need fast a fast telemetry update rate choose high refresh rate, and a ratio that favors telemetry messages e.g. 200 Hz and 1:16 usually works good. For detailed information on telemetry bandwidth at different rates and ratios, see this page on telemetry bandwidth . To finish the telemetry setup open the telemetry page on your transmitter and select \"Discover new sensors\" and wait for the list to fill. You will notice that there is a * sign for each row. This star indicates that this telemetry sensor was just updated. If you see a row that does not change, and the name of the row is in square brackets it means that this sensor was not updated for some time. The first values (including RSSI and link quality) should always be updated (flashing stars). If this does not happen multiple times per second the transmitter will issue a \"telemetry warning\". To prevent this warning use the setting TLM_REPORT_INTERVAL_MS. It should look like this (and if it does not there is something wrong with your setup): The remaining values are updated at a different rate (depending on refresh rate and tlm ratio). So if you use 50 Hz and 1:64 it will happen really slow, and the update takes multiple seconds for each sensor: If you use 200Hz and 1:2 tlm ratio the stars will not even blink because the update happens so fast: MSP \u00b6 To configure betaflight from your transmitter it's possible to use the betaflight lua scripts. This requires the telemetry feature enabled for the RX+TX. If the telemetry page of OpenTx does not show regular updates for all sensors the LUA script will also not work. Mavlink is not supported and currently not planned to be added. To get a responsive UI configure ExpressLRS for fast data transfer so make sure to use something like 200Hz/250Hz with 1:2 tlm and a serial baud rate of 400000 . Currently MSP is limited to 50Hz on 11520 Baud and does not work with 500 Hz refresh rate. The initial VTX tables download does take long - but is cached after that. If you get a \"retrying\" message while saving changes it means that the lua script did not receive a response fast enough. But the change usually still goes through so try reloading the page to check if the change was saved. With the recommended settings this does not happen but with slower settings it could happen. Done. Go Fly!","title":"Pre-first Flight Checks"},{"location":"quick-start/pre-1stflight/#modes","text":"By default, ExpressLRS uses one-bit switches for the AUX channels. This means a three-position switch will only send two positions (fully off, or 1000, and fully on, or 2000) to Betaflight on the AUX channels. Set your modes appropriately if you are using one-bit switches, or enable HYBRID_SWITCHES_8 for expanded position options. For more information, read the switch modes page .","title":"Modes"},{"location":"quick-start/pre-1stflight/#rssi-and-link-quality","text":"To get RSSI and Link Quality displayed in the OSD, set RSSI Channel to \"Disabled\" in the Receiver tab of the Betaflight Configurator, and RSSI_ADC should be disabled on the Configuration tab. Both of these are the default. On the OSD menu, use the Link Quality and RSSI dBm value elements (not \"RSSI Value\"). If you wish to enable the rssi dBm warning, you'll have to change the alarm level using set osd_rssi_dbm_alarm = -100 in CLI. A sensible value is 5-10 higher than the sensitivity shown in the ELRS.lua for the packet rate (e.g. 250Hz=-108, so -103 to -98 for the alarm). If using DJI Goggles, you're required to use \"RSSI Value\" as the OSD element. Therefore you have to decide between LQ or RSSI, by selecting either AUX11 (LQ) or AUX12 (RSSI) as RSSI Channel on the Receiver tab. More information about signal metrics is found in this article on signal health .","title":"RSSI and Link Quality"},{"location":"quick-start/pre-1stflight/#blackbox","text":"Blackbox is handy for evaluating the performance of the RF link for a flight. Set your BB to debug mode RC_SMOOTHING_RATE , which will capture the rate that Betaflight is receiving RC Packets from the RX.","title":"Blackbox"},{"location":"quick-start/pre-1stflight/#telemetry","text":"Initially ExpressLRS had very limited telemetry support but with Version 1.0.0-RC1 this changed and full telemetry was added as optional feature . The default setting only includes the link status message that includes the RSSI and Link quality. To receive all messages the feature telemetry has to be enabled in the user defines It's possible to flash your TX module with telemetry support enabled and use it with a RX without telemetry enabled . So you can flash certain receivers with telemetry support and others without it and use it with the same TX module. The RX transmits a subset of telemetry it receives from the flight controller. Disabling certain messages only works if the flight controller firmware does support it. For Betaflight this is possible with the telemetry_disabled_* cli settings: # Disable Attitude telemetry item set telemetry_disabled_pitch = ON set telemetry_disabled_roll = ON set telemetry_disabled_heading = ON # Disable Battery telemetry item set telemetry_disabled_voltage = ON set telemetry_disabled_current = ON set telemetry_disabled_fuel = ON # Disable GPS telemetry item set telemetry_disabled_altitude = ON set telemetry_disabled_lat_long = ON set telemetry_disabled_ground_speed = ON set telemetry_disabled_heading = ON # Disable Flight Mode telemetry item (BF >4.2.9) set telemetry_disabled_mode = ON Since telemetry messages are sent with low priority it takes some time to transmit the data. The telemetry rate in the lua settings script controls how often a telemetry message should be sent. So a ratio of 1:2 means that every second message is a telemetry message, so the telemetry data is transferred very fast. A ratio 1:64 means that only one of 64 messages is a telemetry message and so the transfer happens much slower. The refresh rate also impacts the transfer speed. 50 Hz is slower compared to 200 Hz. So if you need fast a fast telemetry update rate choose high refresh rate, and a ratio that favors telemetry messages e.g. 200 Hz and 1:16 usually works good. For detailed information on telemetry bandwidth at different rates and ratios, see this page on telemetry bandwidth . To finish the telemetry setup open the telemetry page on your transmitter and select \"Discover new sensors\" and wait for the list to fill. You will notice that there is a * sign for each row. This star indicates that this telemetry sensor was just updated. If you see a row that does not change, and the name of the row is in square brackets it means that this sensor was not updated for some time. The first values (including RSSI and link quality) should always be updated (flashing stars). If this does not happen multiple times per second the transmitter will issue a \"telemetry warning\". To prevent this warning use the setting TLM_REPORT_INTERVAL_MS. It should look like this (and if it does not there is something wrong with your setup): The remaining values are updated at a different rate (depending on refresh rate and tlm ratio). So if you use 50 Hz and 1:64 it will happen really slow, and the update takes multiple seconds for each sensor: If you use 200Hz and 1:2 tlm ratio the stars will not even blink because the update happens so fast:","title":"Telemetry"},{"location":"quick-start/pre-1stflight/#msp","text":"To configure betaflight from your transmitter it's possible to use the betaflight lua scripts. This requires the telemetry feature enabled for the RX+TX. If the telemetry page of OpenTx does not show regular updates for all sensors the LUA script will also not work. Mavlink is not supported and currently not planned to be added. To get a responsive UI configure ExpressLRS for fast data transfer so make sure to use something like 200Hz/250Hz with 1:2 tlm and a serial baud rate of 400000 . Currently MSP is limited to 50Hz on 11520 Baud and does not work with 500 Hz refresh rate. The initial VTX tables download does take long - but is cached after that. If you get a \"retrying\" message while saving changes it means that the lua script did not receive a response fast enough. But the change usually still goes through so try reloading the page to check if the change was saved. With the recommended settings this does not happen but with slower settings it could happen. Done. Go Fly!","title":"MSP"},{"location":"quick-start/rx-bootloader/","text":"R9mm/mini, R9mx, R9Slim+ \u00b6 This guide applies for the R9mm, R9mini, R9mx, R9Slim+, R9Slim+ OTA, if you have a OpenTX transmitter with a SmartPort output, you can flash your RXes bootloader. Download the bootloader .frk file for your respective receiver. The files are as follows: R9mm/mini: r9mm_elrs_bl.frk (14kb) or r9mm_no_btn_elrs_bl.frk (14kb) (no_btn bootloader is only used if your bind/boot button on the receiver is faulty or has gone bad, and is indicated by both LEDs (red and green) being constantly illuminated.) R9mx: r9mx_elrs_bl.frk (20kb) R9Slim+ (ACCST): r9slim_plus_elrs_bl.frk (14kb) R9Slim+ (ACCESS/OTA): r9slim_plus_ota_elrs_bl.frk (18kb) Copy the relevant file to your handset's SD card (You can put it inside /FIRMWARE folder for easy access). Wire the receiver to your radio's Smart Port, as shown: Next, flash the .frk via the S.port flashing option in OpenTX . (It helps if the External RF module is set to PPM mode.) Navigate in OpenTX to the TOOLS menu (hold SYS button) Page to the SD-HC CARD page, then the FIRMWARE folder Flash the frk file by holding OK and selecting \"Flash external module\" Unplug the receiver, and your bootloader is flashed. You can now proceed to the next step!","title":"Flashing Bootloader"},{"location":"quick-start/rx-bootloader/#r9mmmini-r9mx-r9slim","text":"This guide applies for the R9mm, R9mini, R9mx, R9Slim+, R9Slim+ OTA, if you have a OpenTX transmitter with a SmartPort output, you can flash your RXes bootloader. Download the bootloader .frk file for your respective receiver. The files are as follows: R9mm/mini: r9mm_elrs_bl.frk (14kb) or r9mm_no_btn_elrs_bl.frk (14kb) (no_btn bootloader is only used if your bind/boot button on the receiver is faulty or has gone bad, and is indicated by both LEDs (red and green) being constantly illuminated.) R9mx: r9mx_elrs_bl.frk (20kb) R9Slim+ (ACCST): r9slim_plus_elrs_bl.frk (14kb) R9Slim+ (ACCESS/OTA): r9slim_plus_ota_elrs_bl.frk (18kb) Copy the relevant file to your handset's SD card (You can put it inside /FIRMWARE folder for easy access). Wire the receiver to your radio's Smart Port, as shown: Next, flash the .frk via the S.port flashing option in OpenTX . (It helps if the External RF module is set to PPM mode.) Navigate in OpenTX to the TOOLS menu (hold SYS button) Page to the SD-HC CARD page, then the FIRMWARE folder Flash the frk file by holding OK and selecting \"Flash external module\" Unplug the receiver, and your bootloader is flashed. You can now proceed to the next step!","title":"R9mm/mini, R9mx, R9Slim+"},{"location":"quick-start/rx-diyreceivers/","text":"Valid Targets: DIY_2400_RX_ESP8285_SX1280_via_BetaflightPassthrough DIY_2400_RX_ESP8285_SX1280_via_UART DIY_2400_RX_ESP8285_SX1280_via_WIFI DIY_2400_RX_STM32_CCG_Nano_v0_5_via_BetaflightPassthrough DIY_2400_RX_STM32_CCG_Nano_v0_5_via_STLINK","title":"Flashing DIY 2400RX"},{"location":"quick-start/rx-diyreceivers900/","text":"Valid Targets: DIY_900_RX_ESP8285_SX127x_via_BetaflightPassthrough DIY_900_RX_ESP8285_SX127x_via_UART","title":"Flashing DIY 900RX"},{"location":"quick-start/rx-fcprep/","text":"Wiring your Receiver \u00b6 R9MM/mini, R9mx, R9Slim+ \u00b6 Note: This will be the same wiring you'll use for flying and the subsequent firmware updates (via Passthrough). Forget the factory wiring guide! Happymodel EP1, EP2, PP \u00b6 Labels show the receiver pinouts and not to which pads to connect them (in case of the RX and Tx pads). As we're dealing with UART connection, Rx on receiver goes to a TX pad in the FC, and Tx on Receiver goes to an uninverted Rx pad on the FC. There are certain FCs that puts their Receiver UART's RX pads Low, which in turn, puts the EP-based (e.g. EP1 and EP2) receivers to Bootloader mode unintentionally. One remedy is to wire them into a different UART, or wire a pull-up resistor (300-1k ohm) into the RX pad (FC Rx pad -> Resistor -> 3v3 pad). Also of note is that the EP receivers require their Boot pads (see figure above) be bridged on first time Passthrough Flash from their factory firmwares. After the first passthrough flashing, the bridge needs to be removed, and is no longer needed for subsequent passthrough flashing. Flashing via Wifi doesn't need the Boot Pads bridged. Moreover, if it is bridged, the receiver will stay in bootloader mode and will not activate the wifi hotspot. If your receiver is not powered via USB, connect a LiPo to power it up and turn it on. Happymodel ES915/868RX (Discontinued) \u00b6 Labels in the receiver show the pinouts. Connect Rx to a Tx pad in the FC and the Tx to an Rx pad in the FC. Of course, don't forget to connect VCC to a 5V pad, and GND to a GND pad on the FC. Happymodel ES900RX \u00b6 Shown above is the pinouts for the ES900RX receivers. Connect Rx to a Tx pad on the FC and Tx to an Rx pad on the FC. Additionally, the Boot Pads, encircled in the photo above, needs to be bridged in the first-time passthrough flash from the factory firmware. As this is an ESP-based receiver, be aware that there are certain FCs that puts their Receiver UART's RX pads Low, which in turn, puts the receiver to Bootloader mode unintentionally. One remedy is to wire them into a different UART, or wire a pull-up resistor (300-1k ohm) into the RX pad (FC Rx pad -> Resistor -> 3v3 pad). Should you be updating via Wifi, the bridging of the boot pads is not needed. If your receiver is not powered via USB, connect a LiPo to power it up and turn it on. NamimnoRC Voyager & Flash \u00b6 TODO Serial RX Setup \u00b6 As with any serial-based receiver, you need to attach the TX/RX pads to a UART on your flight controller, then enable the corresponding UART as a serial receiver in Betaflight: Protocol \u00b6 Similar to in OpenTX, we use the CRSF protocol to communicate between the ExpressLRS receiver and Betaflight, so on the \"Configuration\" tab, you need to select \"Serial-based receiver\" on the \"Receiver\" panel, and select \"CRSF\" as the protocol. Telemetry is optional here and will reduce your stick update rate due to those transmit slots being used for telemetry. Inversion (Software & Hardware) and Duplex Modes \u00b6 The CRSF Protocol requires a full UART pair, uninverted and in full-duplex mode. Using the CLI, check if serialrx_inverted is OFF and serialrx_halfduplex is OFF. You can't use an RX pad that is shared to an SBUS pad, unless you remove the inversion or reroute the line (by bridging pads in the FC). The easiest way to determine which UART can be used with ExpressLRS is to check which UART the manufacturer suggests you wire a Crossfire/Ghost receiver to.","title":"Preparing for Passthrough Flashing"},{"location":"quick-start/rx-fcprep/#wiring-your-receiver","text":"","title":"Wiring your Receiver"},{"location":"quick-start/rx-fcprep/#r9mmmini-r9mx-r9slim","text":"Note: This will be the same wiring you'll use for flying and the subsequent firmware updates (via Passthrough). Forget the factory wiring guide!","title":"R9MM/mini, R9mx, R9Slim+"},{"location":"quick-start/rx-fcprep/#happymodel-ep1-ep2-pp","text":"Labels show the receiver pinouts and not to which pads to connect them (in case of the RX and Tx pads). As we're dealing with UART connection, Rx on receiver goes to a TX pad in the FC, and Tx on Receiver goes to an uninverted Rx pad on the FC. There are certain FCs that puts their Receiver UART's RX pads Low, which in turn, puts the EP-based (e.g. EP1 and EP2) receivers to Bootloader mode unintentionally. One remedy is to wire them into a different UART, or wire a pull-up resistor (300-1k ohm) into the RX pad (FC Rx pad -> Resistor -> 3v3 pad). Also of note is that the EP receivers require their Boot pads (see figure above) be bridged on first time Passthrough Flash from their factory firmwares. After the first passthrough flashing, the bridge needs to be removed, and is no longer needed for subsequent passthrough flashing. Flashing via Wifi doesn't need the Boot Pads bridged. Moreover, if it is bridged, the receiver will stay in bootloader mode and will not activate the wifi hotspot. If your receiver is not powered via USB, connect a LiPo to power it up and turn it on.","title":"Happymodel EP1, EP2, PP"},{"location":"quick-start/rx-fcprep/#happymodel-es915868rx-discontinued","text":"Labels in the receiver show the pinouts. Connect Rx to a Tx pad in the FC and the Tx to an Rx pad in the FC. Of course, don't forget to connect VCC to a 5V pad, and GND to a GND pad on the FC.","title":"Happymodel ES915/868RX (Discontinued)"},{"location":"quick-start/rx-fcprep/#happymodel-es900rx","text":"Shown above is the pinouts for the ES900RX receivers. Connect Rx to a Tx pad on the FC and Tx to an Rx pad on the FC. Additionally, the Boot Pads, encircled in the photo above, needs to be bridged in the first-time passthrough flash from the factory firmware. As this is an ESP-based receiver, be aware that there are certain FCs that puts their Receiver UART's RX pads Low, which in turn, puts the receiver to Bootloader mode unintentionally. One remedy is to wire them into a different UART, or wire a pull-up resistor (300-1k ohm) into the RX pad (FC Rx pad -> Resistor -> 3v3 pad). Should you be updating via Wifi, the bridging of the boot pads is not needed. If your receiver is not powered via USB, connect a LiPo to power it up and turn it on.","title":"Happymodel ES900RX"},{"location":"quick-start/rx-fcprep/#namimnorc-voyager-flash","text":"TODO","title":"NamimnoRC Voyager &amp; Flash"},{"location":"quick-start/rx-fcprep/#serial-rx-setup","text":"As with any serial-based receiver, you need to attach the TX/RX pads to a UART on your flight controller, then enable the corresponding UART as a serial receiver in Betaflight:","title":"Serial RX Setup"},{"location":"quick-start/rx-fcprep/#protocol","text":"Similar to in OpenTX, we use the CRSF protocol to communicate between the ExpressLRS receiver and Betaflight, so on the \"Configuration\" tab, you need to select \"Serial-based receiver\" on the \"Receiver\" panel, and select \"CRSF\" as the protocol. Telemetry is optional here and will reduce your stick update rate due to those transmit slots being used for telemetry.","title":"Protocol"},{"location":"quick-start/rx-fcprep/#inversion-software-hardware-and-duplex-modes","text":"The CRSF Protocol requires a full UART pair, uninverted and in full-duplex mode. Using the CLI, check if serialrx_inverted is OFF and serialrx_halfduplex is OFF. You can't use an RX pad that is shared to an SBUS pad, unless you remove the inversion or reroute the line (by bridging pads in the FC). The easiest way to determine which UART can be used with ExpressLRS is to check which UART the manufacturer suggests you wire a Crossfire/Ghost receiver to.","title":"Inversion (Software &amp; Hardware) and Duplex Modes"},{"location":"quick-start/rx-flash2400/","text":"Valid Targets: NamimnoRC_FLASH_2400_ESP_RX_via_BetaflightPassthrough NamimnoRC_FLASH_2400_ESP_RX_via_UART NamimnoRC_FLASH_2400_ESP_RX_via_WIFI NamimnoRC_FLASH_2400_RX_via_BetaflightPassthrough NamimnoRC_FLASH_2400_RX_via_STLINK","title":"Flashing NamimnoRC Flash"},{"location":"quick-start/rx-ghost2400/","text":"Flashing Ghost Atto/Zepto RX's \u00b6 Target: GHOST_ATTO_2400_RX_via_STLINK Flashing the Ghost RX's is currently a 1 WAY flash once you flash ExpressLRS to these RX's you will not be able to use them with Ghost TX. You will need a StLink V2 to flash the RX's Wire 3.3v , GND , CLK , and DIO to their respective pins on the RX from the StLink. Select the GHOST_ATTO_2400_via_STLINK target. Set your Firmware Options and click on Build and Flash . Connect your receiver to your Flight Controller as normal (i.e. Rx to Tx, and Tx to Rx); Subsequent Firmware Updates can now be done using via_BetaflightPassthrough target.","title":"Flashing Ghost Receiver"},{"location":"quick-start/rx-ghost2400/#flashing-ghost-attozepto-rxs","text":"Target: GHOST_ATTO_2400_RX_via_STLINK Flashing the Ghost RX's is currently a 1 WAY flash once you flash ExpressLRS to these RX's you will not be able to use them with Ghost TX. You will need a StLink V2 to flash the RX's Wire 3.3v , GND , CLK , and DIO to their respective pins on the RX from the StLink. Select the GHOST_ATTO_2400_via_STLINK target. Set your Firmware Options and click on Build and Flash . Connect your receiver to your Flight Controller as normal (i.e. Rx to Tx, and Tx to Rx); Subsequent Firmware Updates can now be done using via_BetaflightPassthrough target.","title":"Flashing Ghost Atto/Zepto RX's"},{"location":"quick-start/rx-hmep2400/","text":"Flashing via Wifi \u00b6 (Recommended as first-flash method) Target: HappyModel_EP_2400_RX_via_WIFI Wire up your receiver to a free uart in your Flight Controller. The image above shows the pinouts for these receivers. Wire TX on receiver to an RX pad on the FC, and the RX on receiver to a TX pad on the FC in the same UART. Wire 5v and Gnd as normal (5v to a 5v pad on FC and Gnd to a Gnd pad on the FC). Note: There are Flight Controllers that will pull the RX pads LOW which will put the ESP-based receivers into Bootloader Mode unintentionally. A solid LED light on these receivers even with the TX module off is a sign they are in Bootloader Mode. If this is the case, rewire the receiver to a different UART. Build the firmware using the ExpressLRS Configurator using the correct Target and options. Once done, it should open a new window where the firmware.bin is. Do not close this window so you can easily navigate to it once it's time to upload the firmware into the receiver. Power your Flight Controller by either connecting a LiPo or attaching the USB cable (if receiver gets powered from USB via a 4v5 pad). Receiver's LED will blink slow at first, and after 20s or 30s (can be adjusted via ExpressLRS Configurator using AUTO_WIFI_ON_INTERVAL ), it should blink fast indicating it's on Wifi Hotspot Mode. Connect to the Wifi Network the receiver has created. It should be named something like ExpressLRS RX with the same expresslrs password as the TX Module Hotspot. Navigate to the same web address as the TX Module (usually http://10.0.0.1 ). The Firmware upload page should load, and using the File Upload Form, navigate where the correct Receiver firmware.bin is (like with the Tx module, you can also drag-and-drop the firmware file into the form field or use the Browse or Choose File button). Click on Update button and the firmware file will be uploaded and the update process should commence. A white page should load momentarily with the message Update Success! Rebooting... . Wait a little bit and the receiver should be updated. Power cycle and your module and receiver should now be bound (given you have updated the Tx Module as well, and that they have the same binding phrase and options). Flashing via Passthrough \u00b6 Target: HappyModel_EP_2400_RX_via_BetaflightPassthrough Wire up your receiver to a free uart in your Flight Controller. The image above shows the pinouts for these receivers. Wire TX on receiver to an RX pad on the FC, and the RX on receiver to a TX pad on the FC in the same UART. Wire 5v and Gnd as normal (5v to a 5v pad on FC and Gnd to a Gnd pad on the FC). You will need to bridge the Boot pads on the receiver the first time you'll be updating via this method. The image above shows where the Boot pads are. A solid LED indicates the receiver is in Bootloader mode when the TX module is OFF (Solid LED also indicates Radio+module & Receiver is bound and has connection). Note: if you haven't bridged the Boot pads but the receiver has solid LED light, your FC is probably pulling the current UART's RX pad LOW which will interfere with the normal and passthrough flashing of this receiver. Find another UART and wire your receiver there instead Bridging the Boot pads is no longer needed past 1.0.0-RC6. Power your FC with a LiPo, or if receiver is powered via USB (receiver is connected to a 4v5 pad), connect the FC to your USB port. Using the ExpressLRS Configurator, with the correct Target selected and options set, click on Build & Flash . Wait for the process to finish and you should be greeted with the \"Success\" banner. Unplug USB and LiPo, and removed the solder on the bridged Boot pads. You no longer need it (past 1.0.0-RC6). Power your TX Module and then your FC to verify you are bound and has connection. Flashing via FTDI \u00b6 Target: HappyModel_EP_2400_RX_via_UART Wire the receiver into the FTDI, with TX on receiver connected to the Rx on the FTDI, and RX on receiver connected to the Tx of the FTDI. Wire 5V and GND of the FTDI to 5V and GND of the Receiver. Short the boot pad while powering the RX on, and release - the LED should now be solid. Select the _UART target and flash. Select the target and set your Firmware Options. Once done, click on Build and Flash .","title":"Flashing HM EP Receivers"},{"location":"quick-start/rx-hmep2400/#flashing-via-wifi","text":"(Recommended as first-flash method) Target: HappyModel_EP_2400_RX_via_WIFI Wire up your receiver to a free uart in your Flight Controller. The image above shows the pinouts for these receivers. Wire TX on receiver to an RX pad on the FC, and the RX on receiver to a TX pad on the FC in the same UART. Wire 5v and Gnd as normal (5v to a 5v pad on FC and Gnd to a Gnd pad on the FC). Note: There are Flight Controllers that will pull the RX pads LOW which will put the ESP-based receivers into Bootloader Mode unintentionally. A solid LED light on these receivers even with the TX module off is a sign they are in Bootloader Mode. If this is the case, rewire the receiver to a different UART. Build the firmware using the ExpressLRS Configurator using the correct Target and options. Once done, it should open a new window where the firmware.bin is. Do not close this window so you can easily navigate to it once it's time to upload the firmware into the receiver. Power your Flight Controller by either connecting a LiPo or attaching the USB cable (if receiver gets powered from USB via a 4v5 pad). Receiver's LED will blink slow at first, and after 20s or 30s (can be adjusted via ExpressLRS Configurator using AUTO_WIFI_ON_INTERVAL ), it should blink fast indicating it's on Wifi Hotspot Mode. Connect to the Wifi Network the receiver has created. It should be named something like ExpressLRS RX with the same expresslrs password as the TX Module Hotspot. Navigate to the same web address as the TX Module (usually http://10.0.0.1 ). The Firmware upload page should load, and using the File Upload Form, navigate where the correct Receiver firmware.bin is (like with the Tx module, you can also drag-and-drop the firmware file into the form field or use the Browse or Choose File button). Click on Update button and the firmware file will be uploaded and the update process should commence. A white page should load momentarily with the message Update Success! Rebooting... . Wait a little bit and the receiver should be updated. Power cycle and your module and receiver should now be bound (given you have updated the Tx Module as well, and that they have the same binding phrase and options).","title":"Flashing via Wifi"},{"location":"quick-start/rx-hmep2400/#flashing-via-passthrough","text":"Target: HappyModel_EP_2400_RX_via_BetaflightPassthrough Wire up your receiver to a free uart in your Flight Controller. The image above shows the pinouts for these receivers. Wire TX on receiver to an RX pad on the FC, and the RX on receiver to a TX pad on the FC in the same UART. Wire 5v and Gnd as normal (5v to a 5v pad on FC and Gnd to a Gnd pad on the FC). You will need to bridge the Boot pads on the receiver the first time you'll be updating via this method. The image above shows where the Boot pads are. A solid LED indicates the receiver is in Bootloader mode when the TX module is OFF (Solid LED also indicates Radio+module & Receiver is bound and has connection). Note: if you haven't bridged the Boot pads but the receiver has solid LED light, your FC is probably pulling the current UART's RX pad LOW which will interfere with the normal and passthrough flashing of this receiver. Find another UART and wire your receiver there instead Bridging the Boot pads is no longer needed past 1.0.0-RC6. Power your FC with a LiPo, or if receiver is powered via USB (receiver is connected to a 4v5 pad), connect the FC to your USB port. Using the ExpressLRS Configurator, with the correct Target selected and options set, click on Build & Flash . Wait for the process to finish and you should be greeted with the \"Success\" banner. Unplug USB and LiPo, and removed the solder on the bridged Boot pads. You no longer need it (past 1.0.0-RC6). Power your TX Module and then your FC to verify you are bound and has connection.","title":"Flashing via Passthrough"},{"location":"quick-start/rx-hmep2400/#flashing-via-ftdi","text":"Target: HappyModel_EP_2400_RX_via_UART Wire the receiver into the FTDI, with TX on receiver connected to the Rx on the FTDI, and RX on receiver connected to the Tx of the FTDI. Wire 5V and GND of the FTDI to 5V and GND of the Receiver. Short the boot pad while powering the RX on, and release - the LED should now be solid. Select the _UART target and flash. Select the target and set your Firmware Options. Once done, click on Build and Flash .","title":"Flashing via FTDI"},{"location":"quick-start/rx-hmes900/","text":"ES900RX \u00b6 Flashing via Passthrough \u00b6 Target: HappyModel_RX_ES900RX_via_BetaflightPassthrough With the receiver wired properly to your FC, select the right target and set your Firmware Options, then click on Build and Flash on the ExpressLRS Configurator. First time Compile naturally takes a while but if you do the prep work properly, you'll be greeted with the Success message soon enough! Flashing via Wifi \u00b6 Build the firmware using the ExpressLRS Configurator using the correct Target and options. Once done, it should open a new window where the firmware.bin is. Do not close this window so you can easily navigate to it once it's time to upload the firmware into the receiver. Power your Flight Controller by either connecting a LiPo or attaching the USB cable (if receiver gets powered from USB via a 4v5 pad). Receiver's LED will blink slow at first, and after 20s or 30s (can be adjusted via ExpressLRS Configurator using AUTO_WIFI_ON_INTERVAL ), it should blink fast indicating it's on Wifi Hotspot Mode. Connect to the Wifi Network the receiver has created. It should be named something like ExpressLRS RX with the same expresslrs password as the TX Module Hotspot. Navigate to the same web address as the TX Module (usually http://10.0.0.1 ). The Firmware upload page should load, and using the File Upload Form, navigate where the correct Receiver firmware.bin is (like with the Tx module, you can also drag-and-drop the firmware file into the form field or use the Browse or Choose File button). Click on Update button and the firmware file will be uploaded and the update process should commence. A white page should load momentarily with the message Update Success! Rebooting... . Wait a little bit and the receiver should be updated. Power cycle and your module and receiver should now be bound (given you have updated the Tx Module as well, and that they have the same binding phrase and options). ES915/868RX (Discontinued) \u00b6 Flashing via Passthrough \u00b6 Target: HappyModel_RX_ES915RX_via_BetaflightPassthrough Once wired properly to your FC, connect USB. Did your receiver powered up too (with both LEDs lit)? If so, disconnect USB, hold the bind button on your receiver, and reconnect to USB. The LED should start alternating between the Green and Red LEDs. Once it's alternating, you can then let go of the Bind Button. If your receiver didn't get powered from USB, have a lipo ready and continue with the next steps. On the ExpressLRS Configurator, with your Options set, click on Build & Flash . Like on the TX module, it will take a while on the first time. Watch out for the Passthrough Init stage. This stage will check your FC Configuration for the Serial RX UART (Software Inversion via \"set serialrx_inverted\" and Half Duplex mode via \"set serialrx_halfduplex\" will be checked; both should be off.) Once Retry... lines appear, connect a LiPo if your receiver isn't powered by the USB (i.e. power up your receiver and FC). On subsequent flash, you can have the LiPo plugged in and receiver powered up from the start. Wait for this process to finish. It's done once the \"Success\" prompt is shown. Flashing via STLink \u00b6 Target: HappyModel_RX_ES915RX_via_STLINK Using the correct target specific for your receiver, set your Firmware Options and hit Build & Flash on the ExpressLRS Configurator. Once done, wire your receiver to your Flight Controller. Passthrough flashing can now be used for updating the receiver.","title":"Flashing HM ES900RX"},{"location":"quick-start/rx-hmes900/#es900rx","text":"","title":"ES900RX"},{"location":"quick-start/rx-hmes900/#flashing-via-passthrough","text":"Target: HappyModel_RX_ES900RX_via_BetaflightPassthrough With the receiver wired properly to your FC, select the right target and set your Firmware Options, then click on Build and Flash on the ExpressLRS Configurator. First time Compile naturally takes a while but if you do the prep work properly, you'll be greeted with the Success message soon enough!","title":"Flashing via Passthrough"},{"location":"quick-start/rx-hmes900/#flashing-via-wifi","text":"Build the firmware using the ExpressLRS Configurator using the correct Target and options. Once done, it should open a new window where the firmware.bin is. Do not close this window so you can easily navigate to it once it's time to upload the firmware into the receiver. Power your Flight Controller by either connecting a LiPo or attaching the USB cable (if receiver gets powered from USB via a 4v5 pad). Receiver's LED will blink slow at first, and after 20s or 30s (can be adjusted via ExpressLRS Configurator using AUTO_WIFI_ON_INTERVAL ), it should blink fast indicating it's on Wifi Hotspot Mode. Connect to the Wifi Network the receiver has created. It should be named something like ExpressLRS RX with the same expresslrs password as the TX Module Hotspot. Navigate to the same web address as the TX Module (usually http://10.0.0.1 ). The Firmware upload page should load, and using the File Upload Form, navigate where the correct Receiver firmware.bin is (like with the Tx module, you can also drag-and-drop the firmware file into the form field or use the Browse or Choose File button). Click on Update button and the firmware file will be uploaded and the update process should commence. A white page should load momentarily with the message Update Success! Rebooting... . Wait a little bit and the receiver should be updated. Power cycle and your module and receiver should now be bound (given you have updated the Tx Module as well, and that they have the same binding phrase and options).","title":"Flashing via Wifi"},{"location":"quick-start/rx-hmes900/#es915868rx-discontinued","text":"","title":"ES915/868RX (Discontinued)"},{"location":"quick-start/rx-hmes900/#flashing-via-passthrough_1","text":"Target: HappyModel_RX_ES915RX_via_BetaflightPassthrough Once wired properly to your FC, connect USB. Did your receiver powered up too (with both LEDs lit)? If so, disconnect USB, hold the bind button on your receiver, and reconnect to USB. The LED should start alternating between the Green and Red LEDs. Once it's alternating, you can then let go of the Bind Button. If your receiver didn't get powered from USB, have a lipo ready and continue with the next steps. On the ExpressLRS Configurator, with your Options set, click on Build & Flash . Like on the TX module, it will take a while on the first time. Watch out for the Passthrough Init stage. This stage will check your FC Configuration for the Serial RX UART (Software Inversion via \"set serialrx_inverted\" and Half Duplex mode via \"set serialrx_halfduplex\" will be checked; both should be off.) Once Retry... lines appear, connect a LiPo if your receiver isn't powered by the USB (i.e. power up your receiver and FC). On subsequent flash, you can have the LiPo plugged in and receiver powered up from the start. Wait for this process to finish. It's done once the \"Success\" prompt is shown.","title":"Flashing via Passthrough"},{"location":"quick-start/rx-hmes900/#flashing-via-stlink","text":"Target: HappyModel_RX_ES915RX_via_STLINK Using the correct target specific for your receiver, set your Firmware Options and hit Build & Flash on the ExpressLRS Configurator. Once done, wire your receiver to your Flight Controller. Passthrough flashing can now be used for updating the receiver.","title":"Flashing via STLink"},{"location":"quick-start/rx-hmpp2400/","text":"Flashing via Passthrough \u00b6 Target: HappyModel_PP_2400_RX_via_BetaflightPassthrough The PP receivers do not have Wifi, and so, it can only be updated via Passthrough. Follow the same wiring as that of the EP receivers. The PP has a silkscreened \"RT5G\" on one of its side indicating the order of the pads, with R = Rx, T = Tx, 5 = 5v and G = Gnd, respectively. Connect the Rx pad to a Tx pad on the FC, and the Tx pad to an RX pad on the FC, with 5v and Gnd to their usual connections. The PP doesn't have a Boot pad either so there's no need to bridge any pads. Once wired, power up your FC by connecting a LiPo or, if the receiver is getting powered via USB, connect your USB cable to a vacant port. Using the ExpressLRS Configurator, with the correct Target selected and options set, hit Build & Flash . Wait a bit for the process to finish and you should see a \"Success\" banner. Power-cycle the FC and verify receiver connects to the Tx module (power up the Tx first, then the Receiver).","title":"Flashing HM PP Receiver"},{"location":"quick-start/rx-hmpp2400/#flashing-via-passthrough","text":"Target: HappyModel_PP_2400_RX_via_BetaflightPassthrough The PP receivers do not have Wifi, and so, it can only be updated via Passthrough. Follow the same wiring as that of the EP receivers. The PP has a silkscreened \"RT5G\" on one of its side indicating the order of the pads, with R = Rx, T = Tx, 5 = 5v and G = Gnd, respectively. Connect the Rx pad to a Tx pad on the FC, and the Tx pad to an RX pad on the FC, with 5v and Gnd to their usual connections. The PP doesn't have a Boot pad either so there's no need to bridge any pads. Once wired, power up your FC by connecting a LiPo or, if the receiver is getting powered via USB, connect your USB cable to a vacant port. Using the ExpressLRS Configurator, with the correct Target selected and options set, hit Build & Flash . Wait a bit for the process to finish and you should see a \"Success\" banner. Power-cycle the FC and verify receiver connects to the Tx module (power up the Tx first, then the Receiver).","title":"Flashing via Passthrough"},{"location":"quick-start/rx-jumper900/","text":"Jumper RX \u00b6 Targets: Jumper_RX_R900MINI_via_STLINK Jumper_RX_R900MINI_via_BetaflightPassthrough Disable 'Readout Protection'. To do this download the ST-LINK Utility and follow this quick how to video . Or alternatively under linux you can use OpenOCD . Using the correct target specific for your receiver, hit \"Build & Flash\". After the flash is successful, desolder the STLink and connect RX2 and TX2 (you will need to solder on the STM32 pins, see picture) to a flight controller and setting up the receiver with the CRSF serial protocol, the Jumper_RX_R900MINI_via_BetaflightPassthrough target may now be used for future firmware updates.","title":"Flashing Jumper R9 Mini"},{"location":"quick-start/rx-jumper900/#jumper-rx","text":"Targets: Jumper_RX_R900MINI_via_STLINK Jumper_RX_R900MINI_via_BetaflightPassthrough Disable 'Readout Protection'. To do this download the ST-LINK Utility and follow this quick how to video . Or alternatively under linux you can use OpenOCD . Using the correct target specific for your receiver, hit \"Build & Flash\". After the flash is successful, desolder the STLink and connect RX2 and TX2 (you will need to solder on the STM32 pins, see picture) to a flight controller and setting up the receiver with the CRSF serial protocol, the Jumper_RX_R900MINI_via_BetaflightPassthrough target may now be used for future firmware updates.","title":"Jumper RX"},{"location":"quick-start/rx-r9receivers/","text":"FrSky RXes \u00b6 Note: This will be the same wiring you'll use for flying and the next firmware updates (via Passthrough). Forget the factory wiring guide! Passthrough Flashing (works with Betaflight, iNav) \u00b6 Valid Targets: Frsky_RX_R9MM_R9MINI_via_BetaflightPassthrough Frsky_RX_R9MX_via_BetaflightPassthrough Frsky_RX_R9SLIM_via_BetaflightPassthrough Frsky_RX_R9SLIMPLUS_via_BetaflightPassthrough Frsky_RX_R9SLIMPLUS_OTA_via_BetaflightPassthrough Make sure the correct Bootloader has been flashed to the receiver prior to wiring it up to your flight controller. Using the wiring guide above, find a free, uninverted UART in your FC. You can use your FC's wiring guide for a Crossfire or Ghost receiver. Once wired to your FC, connect USB. Did your receiver powered up too (with both LEDs lit)? If so, disconnect USB, hold the bind button on your receiver, and reconnect to USB. The LED should start alternating between the Green and Red LEDs. Once it's alternating, you can then let go of the Bind Button. If your receiver didn't get powered from USB, have a lipo ready and continue with the next steps. On the ExpressLRS Configurator, with your Options set, click on Build & Flash . Like on the TX module, it will take a while on the first time. Watch out for the Passthrough Init stage. This stage will check your FC Configuration for the Serial RX UART (Software Inversion via \"set serialrx_inverted\" and Half Duplex mode via \"set serialrx_halfduplex\" will be checked; both should be off.) Once Retry... lines appear, connect a LiPo if your receiver isn't powered by the USB (i.e. power up your receiver and FC). On subsequent flash, you can have the LiPo plugged in and receiver powered up from the start. Wait for this process to finish. It's done once the \"Success\" prompt is shown. Flashing via STLink (only recommended as last resort) \u00b6 Valid Targets: Frsky_RX_R9MM_R9MINI_via_STLINK Frsky_RX_R9MX_via_STLINK Frsky_RX_R9SLIM_via_STLINK Frsky_RX_R9SLIMPLUS_via_STLINK Frsky_RX_R9SLIMPLUS_OTA_via_STLINK This method is irreversible. It will remove the ability to reflash back to Frsky firmware. You have been warned! Make sure your STLink dongle is properly recognized by your System as such (Drivers are installed, etc.). Disable 'Readout Protection'. To do this download the ST-LINK Utility and follow this quick how to video . Or alternatively under linux you can use OpenOCD . After doing so, Disconnect from STLink Utility. Using the correct target specific for your receiver, set your Firmware Options and hit Build & Flash on the ExpressLRS Configurator. Once done, wire your receiver to your Flight Controller. Passthrough flashing can now be used for updating the receiver.","title":"Flashing R9 Receivers"},{"location":"quick-start/rx-r9receivers/#frsky-rxes","text":"Note: This will be the same wiring you'll use for flying and the next firmware updates (via Passthrough). Forget the factory wiring guide!","title":"FrSky RXes"},{"location":"quick-start/rx-r9receivers/#passthrough-flashing-works-with-betaflight-inav","text":"Valid Targets: Frsky_RX_R9MM_R9MINI_via_BetaflightPassthrough Frsky_RX_R9MX_via_BetaflightPassthrough Frsky_RX_R9SLIM_via_BetaflightPassthrough Frsky_RX_R9SLIMPLUS_via_BetaflightPassthrough Frsky_RX_R9SLIMPLUS_OTA_via_BetaflightPassthrough Make sure the correct Bootloader has been flashed to the receiver prior to wiring it up to your flight controller. Using the wiring guide above, find a free, uninverted UART in your FC. You can use your FC's wiring guide for a Crossfire or Ghost receiver. Once wired to your FC, connect USB. Did your receiver powered up too (with both LEDs lit)? If so, disconnect USB, hold the bind button on your receiver, and reconnect to USB. The LED should start alternating between the Green and Red LEDs. Once it's alternating, you can then let go of the Bind Button. If your receiver didn't get powered from USB, have a lipo ready and continue with the next steps. On the ExpressLRS Configurator, with your Options set, click on Build & Flash . Like on the TX module, it will take a while on the first time. Watch out for the Passthrough Init stage. This stage will check your FC Configuration for the Serial RX UART (Software Inversion via \"set serialrx_inverted\" and Half Duplex mode via \"set serialrx_halfduplex\" will be checked; both should be off.) Once Retry... lines appear, connect a LiPo if your receiver isn't powered by the USB (i.e. power up your receiver and FC). On subsequent flash, you can have the LiPo plugged in and receiver powered up from the start. Wait for this process to finish. It's done once the \"Success\" prompt is shown.","title":"Passthrough Flashing (works with Betaflight, iNav)"},{"location":"quick-start/rx-r9receivers/#flashing-via-stlink-only-recommended-as-last-resort","text":"Valid Targets: Frsky_RX_R9MM_R9MINI_via_STLINK Frsky_RX_R9MX_via_STLINK Frsky_RX_R9SLIM_via_STLINK Frsky_RX_R9SLIMPLUS_via_STLINK Frsky_RX_R9SLIMPLUS_OTA_via_STLINK This method is irreversible. It will remove the ability to reflash back to Frsky firmware. You have been warned! Make sure your STLink dongle is properly recognized by your System as such (Drivers are installed, etc.). Disable 'Readout Protection'. To do this download the ST-LINK Utility and follow this quick how to video . Or alternatively under linux you can use OpenOCD . After doing so, Disconnect from STLink Utility. Using the correct target specific for your receiver, set your Firmware Options and hit Build & Flash on the ExpressLRS Configurator. Once done, wire your receiver to your Flight Controller. Passthrough flashing can now be used for updating the receiver.","title":"Flashing via STLink (only recommended as last resort)"},{"location":"quick-start/rx-siyiFRmini/","text":"Targets: FM30_RX_MINI_via_STLINK (First-time Flash) FM30_RX_MINI_via_BetaflightPassthrough (Updates) The STLink solderpads on the FRmini RX are very tiny and very close together. The picture below is very enlarged. Solder 5 (preferable Silicon) wires to the GND-RST-VDD-CLK-DIO pads. Solder the open ends to a female 2.54 mm pin connector. (Use 3.3V NOT 5V ). Using the correct target specific for your receiver, set your firmware options and hit Build & Flash on the ExpressLRS Configurator. Once done, wire your receiver to your Flight Controller. Passthrough flashing can now be used for updating the receiver. The wiring is show below, where the FC TX goes to RX2 and the FC RX goes to TX2. Thank you to @JupaCreations","title":"Flashing Siyi FR Mini"},{"location":"quick-start/rx-stlink/","text":"Disable readout protection as shown in this video: R9MM/Mini \u00b6 Connect the STLink V2 into the pads shown below: 3v3 , GND , C = CLK and D = DIO . R9MX \u00b6 Connect the STLink V2 into the pads shown below: 3v3 , GND , C = CLK and D = DIO . R9Slim \u00b6 This RX requires an StLink v2 to be flashed. Wire up the RX to the STLink using + = 3v3 , - = GND , C = CLK and D = DIO . Jumper R900 Mini \u00b6 This also requires an STLink, so the wiring is as follows: Wire + = 3v3 , - = GND , C = CLK and D = DIO to their respective pins on the RX from the StLink. Because those pins are so small one option is to only solder a wire on the CLK and DIO then power it with the 5v pin with an external power source. ES915RX (Discontinued) \u00b6 Connect your STLink into GND , DIO , CLK , 3V3 of the receiver. These pads are marked clearly as in the image above.","title":"Preparing for STLink Flashing"},{"location":"quick-start/rx-stlink/#r9mmmini","text":"Connect the STLink V2 into the pads shown below: 3v3 , GND , C = CLK and D = DIO .","title":"R9MM/Mini"},{"location":"quick-start/rx-stlink/#r9mx","text":"Connect the STLink V2 into the pads shown below: 3v3 , GND , C = CLK and D = DIO .","title":"R9MX"},{"location":"quick-start/rx-stlink/#r9slim","text":"This RX requires an StLink v2 to be flashed. Wire up the RX to the STLink using + = 3v3 , - = GND , C = CLK and D = DIO .","title":"R9Slim"},{"location":"quick-start/rx-stlink/#jumper-r900-mini","text":"This also requires an STLink, so the wiring is as follows: Wire + = 3v3 , - = GND , C = CLK and D = DIO to their respective pins on the RX from the StLink. Because those pins are so small one option is to only solder a wire on the CLK and DIO then power it with the 5v pin with an external power source.","title":"Jumper R900 Mini"},{"location":"quick-start/rx-stlink/#es915rx-discontinued","text":"Connect your STLink into GND , DIO , CLK , 3V3 of the receiver. These pads are marked clearly as in the image above.","title":"ES915RX (Discontinued)"},{"location":"quick-start/rx-voyager900/","text":"Valid Targets: NamimnoRC_VOYAGER_900_ESP_RX_via_BetaflightPassthrough NamimnoRC_VOYAGER_900_ESP_RX_via_UART NamimnoRC_VOYAGER_900_ESP_RX_via_WIFI NamimnoRC_VOYAGER_900_RX_via_BetaflightPassthrough NamimnoRC_VOYAGER_900_RX_via_STLINK","title":"Flashing NamimnoRC Voyager"},{"location":"quick-start/tx-diy/","text":"Valid Targets: DIY_2400_TX_ESP32_SX1280_E28_via_UART DIY_2400_TX_ESP32_SX1280_LORA1280F27_via_UART DIY_2400_TX_ESP32_SX1280_Mini_via_UART Plug the ESP32 of the DIY TX into the USB of your computer. Then select the correct target given the RF chip you chose and press Build & Flash . Further updates can be performed by building and flashing the .bin file to the external module using OpenTX.","title":"Flashing DIY 2400TX"},{"location":"quick-start/tx-diy900/","text":"ESP32 Targets \u00b6 Valid Targets: - DIY_900_TX_ESP32_SX127x_E19_via_UART - DIY_900_TX_ESP32_SX127x_RFM95_via_UART Plug the ESP32 of the DIY TX into the USB of your computer. Then select the correct target given the RF chip you chose and press Build & Flash . Further updates can be performed by building and flashing the .bin file to the external module using OpenTX. TTGo Targets \u00b6 Valid Targets: - DIY_900_TX_TTGO_V1_SX127x_via_UART - DIY_900_TX_TTGO_V2_SX127x_via_UART Plug the TTGo into the USB of your computer. Then select the correct target given the version you have and press Build & Flash . Further updates can be performed by building and flashing the .bin file to the external module using OpenTX.","title":"Flashing DIY 900TX"},{"location":"quick-start/tx-diy900/#esp32-targets","text":"Valid Targets: - DIY_900_TX_ESP32_SX127x_E19_via_UART - DIY_900_TX_ESP32_SX127x_RFM95_via_UART Plug the ESP32 of the DIY TX into the USB of your computer. Then select the correct target given the RF chip you chose and press Build & Flash . Further updates can be performed by building and flashing the .bin file to the external module using OpenTX.","title":"ESP32 Targets"},{"location":"quick-start/tx-diy900/#ttgo-targets","text":"Valid Targets: - DIY_900_TX_TTGO_V1_SX127x_via_UART - DIY_900_TX_TTGO_V2_SX127x_via_UART Plug the TTGo into the USB of your computer. Then select the correct target given the version you have and press Build & Flash . Further updates can be performed by building and flashing the .bin file to the external module using OpenTX.","title":"TTGo Targets"},{"location":"quick-start/tx-es24tx/","text":"Flashing via WiFi \u00b6 Target: HappyModel_ES24TX_2400_TX_via_WIFI Build your firmware using the ExpressLRS Configurator. Once it's done, it should open the Target folder for you where the firmware.bin file is. Do not close this window so you can easily locate the correct file to upload to the module. The next steps will require the ELRS Lua Script (right-click, save as). Download the ELRS.lua script and save it to your Radio's /Scripts/Tools folder. Insert/attach your module into your module bay and make sure it's not loose and there's proper connection with the radio. Execute the ELRS.lua script by pressing \"System Menu\" in your radio and then under Tools, select ELRS.lua. At first, it will show \"Mismatch\"; it's normal. Tap Enter once on your radio to \"Force Use\" the script. If it's showing a \"Connecting\" message, then recheck the connection of the module to your radio. Select \"Wifi Update\" from the lua script. Lua script will instruct you to go to a specific Ip Address, but you have to first connect to the Wifi Hotspot it created. It will show up in your network as ExpressLRS TX Module , and the password is simply expresslrs . Using your browser, navigate to the correct page (typically http://10.0.0.1/ ) and it should show an upload form (you will have to scroll down a bit). You can drag-and-drop the firmware.bin file from the folder that ExpressLRS Configurator opened for you, or you can manually navigate to it via the Browse or Choose File button on the Upload form. Click on Update once and the update process should commence. Take note that you should be taking a TX firmware.bin file. The folder name where you can get this file is the same as the Target you have selected in the ExpressLRS Configurator. Once the file is uploaded, the webserver should load a White page, with the message Update Success! Rebooting... As it rebooted, the connection to the Webserver got terminated. Check via the Lua Script whether you have successfully updated the TX module. The first line of the lua script should show a 6-character hash that corresponds to the Git commit hash for the firmware version you have on the module. There should be no more \"Mismatch\" messages as well. Flashing via USB/UART \u00b6 Target: HappyModel_ES24TX_2400_TX_via_UART This method requires you move two jumpers into specific pins in the module board. See the following image for the jumper location and which pin should be bridged for this method to work. The jumpers should be moved into the USB/UART (Green) position from the images above. Attach your USB cable into the module and your computer. CP210x Drivers will have to be installed for this to work properly (Windows). Make sure your computer recognizes the module as a USB-to-UART Bridge device, otherwise, this method will not work. Using the ExpressLRS Configurator with the correct Target selected and options set, hit Build & Flash . Wait for the process to finish, and you should be greeted with the \"Success\" message. Assemble the module back together and attach it to your radio module bay and verify with the ELRS.lua script if you have successfully updated your module.","title":"Flashing HM ES24TX"},{"location":"quick-start/tx-es24tx/#flashing-via-wifi","text":"Target: HappyModel_ES24TX_2400_TX_via_WIFI Build your firmware using the ExpressLRS Configurator. Once it's done, it should open the Target folder for you where the firmware.bin file is. Do not close this window so you can easily locate the correct file to upload to the module. The next steps will require the ELRS Lua Script (right-click, save as). Download the ELRS.lua script and save it to your Radio's /Scripts/Tools folder. Insert/attach your module into your module bay and make sure it's not loose and there's proper connection with the radio. Execute the ELRS.lua script by pressing \"System Menu\" in your radio and then under Tools, select ELRS.lua. At first, it will show \"Mismatch\"; it's normal. Tap Enter once on your radio to \"Force Use\" the script. If it's showing a \"Connecting\" message, then recheck the connection of the module to your radio. Select \"Wifi Update\" from the lua script. Lua script will instruct you to go to a specific Ip Address, but you have to first connect to the Wifi Hotspot it created. It will show up in your network as ExpressLRS TX Module , and the password is simply expresslrs . Using your browser, navigate to the correct page (typically http://10.0.0.1/ ) and it should show an upload form (you will have to scroll down a bit). You can drag-and-drop the firmware.bin file from the folder that ExpressLRS Configurator opened for you, or you can manually navigate to it via the Browse or Choose File button on the Upload form. Click on Update once and the update process should commence. Take note that you should be taking a TX firmware.bin file. The folder name where you can get this file is the same as the Target you have selected in the ExpressLRS Configurator. Once the file is uploaded, the webserver should load a White page, with the message Update Success! Rebooting... As it rebooted, the connection to the Webserver got terminated. Check via the Lua Script whether you have successfully updated the TX module. The first line of the lua script should show a 6-character hash that corresponds to the Git commit hash for the firmware version you have on the module. There should be no more \"Mismatch\" messages as well.","title":"Flashing via WiFi"},{"location":"quick-start/tx-es24tx/#flashing-via-usbuart","text":"Target: HappyModel_ES24TX_2400_TX_via_UART This method requires you move two jumpers into specific pins in the module board. See the following image for the jumper location and which pin should be bridged for this method to work. The jumpers should be moved into the USB/UART (Green) position from the images above. Attach your USB cable into the module and your computer. CP210x Drivers will have to be installed for this to work properly (Windows). Make sure your computer recognizes the module as a USB-to-UART Bridge device, otherwise, this method will not work. Using the ExpressLRS Configurator with the correct Target selected and options set, hit Build & Flash . Wait for the process to finish, and you should be greeted with the \"Success\" message. Assemble the module back together and attach it to your radio module bay and verify with the ELRS.lua script if you have successfully updated your module.","title":"Flashing via USB/UART"},{"location":"quick-start/tx-es900tx/","text":"ES900TX \u00b6 Flashing via Wifi \u00b6 Target: HappyModel_TX_ES900TX_via_WIFI Build your firmware using the ExpressLRS Configurator. Once it's done, it should open the Target folder for you where the firmware.bin file is. Do not close this window so you can easily locate the correct file to upload to the module. The next steps will require the ELRS Lua Script (right-click, save as). Download the ELRS.lua script and save it to your Radio's /Scripts/Tools folder. Insert/attach your module into your module bay and make sure it's not loose and there's proper connection with the radio. Execute the ELRS.lua script by pressing \"System Menu\" in your radio and then under Tools, select ELRS.lua. At first, it will show \"Mismatch\"; it's normal. Tap Enter once on your radio to \"Force Use\" the script. If it's showing a \"Connecting\" message, then recheck the connection of the module to your radio. Select \"Wifi Update\" from the lua script. Lua script will instruct you to go to a specific Ip Address, but you have to first connect to the Wifi Hotspot it created. It will show up in your network as ExpressLRS TX Module , and the password is simply expresslrs . Using your browser, navigate to the correct page (typically http://10.0.0.1/ ) and it should show an upload form (you will have to scroll down a bit). You can drag-and-drop the firmware.bin file from the folder that ExpressLRS Configurator opened for you, or you can manually navigate to it via the Browse or Choose File button on the Upload form. Click on Update once and the update process should commence. Take note that you should be taking a TX firmware.bin file. The folder name where you can get this file is the same as the Target you have selected in the ExpressLRS Configurator. Once the file is uploaded, the webserver should load a White page, with the message Update Success! Rebooting... As it rebooted, the connection to the Webserver got terminated. Check via the Lua Script whether you have successfully updated the TX module. The first line of the lua script should show a 6-character hash that corresponds to the Git commit hash for the firmware version you have on the module. There should be no more \"Mismatch\" messages as well. Flashing via USB \u00b6 Target: HappyModel_TX_ES900TX_via_UART This method requires you move two jumpers into specific pins in the module board. See the following image for the jumper location and which pin should be bridged for this method to work. The 2 bottom-most dipswitch should be moved into the position as shown in the image above. Attach your USB cable into the module and your computer. CP210x Drivers will have to be installed for this to work properly (Windows). Make sure your computer recognizes the module as a USB-to-UART Bridge device, otherwise, this method will not work. Using the ExpressLRS Configurator with the correct Target selected and options set, hit Build & Flash . Wait for the process to finish, and you should be greeted with the \"Success\" message. Assemble the module back together and attach it to your radio module bay and verify with the ELRS.lua script if you have successfully updated your module. ES915/868TX (Discontinued) \u00b6 Flashing via OpenTX \u00b6 Target: HappyModel_TX_ES915TX_via_stock_BL Using Build in the ExpressLRS Configurator, wait for the firmware to be compiled. After that's done, ExpressLRS Configurator Log should show the Success Message, and it will automatically open the folder where the firmware.elrs can be found. Put (copy-paste) the firmware.elrs to your Radio's SD Card (preferably to the /FIRMWARE folder for easy access). Once on your radio, navigate to the /FIRMWARE folder, select the firmware.elrs and click-hold the Enter button and select \"Flash External ELRS\". Flashing via STLink \u00b6 Target: HappyModel_TX_ES915TX_via_STLINK Connect your STLink v2 to the pads shown on the image below. With the module connected shown above, and your configuration set, hit Build & Flash in the ExpressLRS Configurator and wait for the process to finish. Once that's done, and the Success Message showing, you can now remove/unsolder the STLink, and re-assemble the module, and put it into your Radio's Module Bay. The ExpressLRS tune should play and then two beeps after that can be heard. Verification can be done using the ELRS.lua script. It should show the Version Hash at the top, as well as the options you can set. If it's showing \"Connecting\", check if External Module is set to CRSF for the selected model in your radio, and that internal RF module is set to off. See general Troubleshooting section for other ways to determine your module is flashed and ready for flying.","title":"Flashing HM ES900TX"},{"location":"quick-start/tx-es900tx/#es900tx","text":"","title":"ES900TX"},{"location":"quick-start/tx-es900tx/#flashing-via-wifi","text":"Target: HappyModel_TX_ES900TX_via_WIFI Build your firmware using the ExpressLRS Configurator. Once it's done, it should open the Target folder for you where the firmware.bin file is. Do not close this window so you can easily locate the correct file to upload to the module. The next steps will require the ELRS Lua Script (right-click, save as). Download the ELRS.lua script and save it to your Radio's /Scripts/Tools folder. Insert/attach your module into your module bay and make sure it's not loose and there's proper connection with the radio. Execute the ELRS.lua script by pressing \"System Menu\" in your radio and then under Tools, select ELRS.lua. At first, it will show \"Mismatch\"; it's normal. Tap Enter once on your radio to \"Force Use\" the script. If it's showing a \"Connecting\" message, then recheck the connection of the module to your radio. Select \"Wifi Update\" from the lua script. Lua script will instruct you to go to a specific Ip Address, but you have to first connect to the Wifi Hotspot it created. It will show up in your network as ExpressLRS TX Module , and the password is simply expresslrs . Using your browser, navigate to the correct page (typically http://10.0.0.1/ ) and it should show an upload form (you will have to scroll down a bit). You can drag-and-drop the firmware.bin file from the folder that ExpressLRS Configurator opened for you, or you can manually navigate to it via the Browse or Choose File button on the Upload form. Click on Update once and the update process should commence. Take note that you should be taking a TX firmware.bin file. The folder name where you can get this file is the same as the Target you have selected in the ExpressLRS Configurator. Once the file is uploaded, the webserver should load a White page, with the message Update Success! Rebooting... As it rebooted, the connection to the Webserver got terminated. Check via the Lua Script whether you have successfully updated the TX module. The first line of the lua script should show a 6-character hash that corresponds to the Git commit hash for the firmware version you have on the module. There should be no more \"Mismatch\" messages as well.","title":"Flashing via Wifi"},{"location":"quick-start/tx-es900tx/#flashing-via-usb","text":"Target: HappyModel_TX_ES900TX_via_UART This method requires you move two jumpers into specific pins in the module board. See the following image for the jumper location and which pin should be bridged for this method to work. The 2 bottom-most dipswitch should be moved into the position as shown in the image above. Attach your USB cable into the module and your computer. CP210x Drivers will have to be installed for this to work properly (Windows). Make sure your computer recognizes the module as a USB-to-UART Bridge device, otherwise, this method will not work. Using the ExpressLRS Configurator with the correct Target selected and options set, hit Build & Flash . Wait for the process to finish, and you should be greeted with the \"Success\" message. Assemble the module back together and attach it to your radio module bay and verify with the ELRS.lua script if you have successfully updated your module.","title":"Flashing via USB"},{"location":"quick-start/tx-es900tx/#es915868tx-discontinued","text":"","title":"ES915/868TX (Discontinued)"},{"location":"quick-start/tx-es900tx/#flashing-via-opentx","text":"Target: HappyModel_TX_ES915TX_via_stock_BL Using Build in the ExpressLRS Configurator, wait for the firmware to be compiled. After that's done, ExpressLRS Configurator Log should show the Success Message, and it will automatically open the folder where the firmware.elrs can be found. Put (copy-paste) the firmware.elrs to your Radio's SD Card (preferably to the /FIRMWARE folder for easy access). Once on your radio, navigate to the /FIRMWARE folder, select the firmware.elrs and click-hold the Enter button and select \"Flash External ELRS\".","title":"Flashing via OpenTX"},{"location":"quick-start/tx-es900tx/#flashing-via-stlink","text":"Target: HappyModel_TX_ES915TX_via_STLINK Connect your STLink v2 to the pads shown on the image below. With the module connected shown above, and your configuration set, hit Build & Flash in the ExpressLRS Configurator and wait for the process to finish. Once that's done, and the Success Message showing, you can now remove/unsolder the STLink, and re-assemble the module, and put it into your Radio's Module Bay. The ExpressLRS tune should play and then two beeps after that can be heard. Verification can be done using the ELRS.lua script. It should show the Version Hash at the top, as well as the options you can set. If it's showing \"Connecting\", check if External Module is set to CRSF for the selected model in your radio, and that internal RF module is set to off. See general Troubleshooting section for other ways to determine your module is flashed and ready for flying.","title":"Flashing via STLink"},{"location":"quick-start/tx-flash2400/","text":"Valid Targets: NamimnoRC_FLASH_2400_TX_via_STLINK NamimnoRC_FLASH_2400_TX_via_WIFI","title":"Flashing NamimnoRC Flash"},{"location":"quick-start/tx-ghost2400/","text":"Flashing Ghost Modules via STLink \u00b6 Targets: GHOST_2400_TX_via_STLINK GHOST_2400_TX_LITE_via_STLINK Initial Flash \u00b6 Here is a 10 minute video, showing the steps required to both flash the TX if you would rather watch than read: Flashing the Ghost TX's is currently a 1 WAY flash once you flash ExpressLRS to the TX you will not be able to use it with stock Ghost RX's (running stock firmware, they will work while running ELRS). You will need a StLink V2 to flash the TX Wire 3.3v , GND , CLK , and DIO to their respective pins on your part from the StLink. (You can power with the StLink but in the first two image the radio is used to power the module). Here is the output/input antennas of the TX: Updating \u00b6 Updating can be done by building an updated version on the configurator and then flashing the firmware.bin file using OpenTX.","title":"Flashing Ghost TX"},{"location":"quick-start/tx-ghost2400/#flashing-ghost-modules-via-stlink","text":"Targets: GHOST_2400_TX_via_STLINK GHOST_2400_TX_LITE_via_STLINK","title":"Flashing Ghost Modules via STLink"},{"location":"quick-start/tx-ghost2400/#initial-flash","text":"Here is a 10 minute video, showing the steps required to both flash the TX if you would rather watch than read: Flashing the Ghost TX's is currently a 1 WAY flash once you flash ExpressLRS to the TX you will not be able to use it with stock Ghost RX's (running stock firmware, they will work while running ELRS). You will need a StLink V2 to flash the TX Wire 3.3v , GND , CLK , and DIO to their respective pins on your part from the StLink. (You can power with the StLink but in the first two image the radio is used to power the module). Here is the output/input antennas of the TX:","title":"Initial Flash"},{"location":"quick-start/tx-ghost2400/#updating","text":"Updating can be done by building an updated version on the configurator and then flashing the firmware.bin file using OpenTX.","title":"Updating"},{"location":"quick-start/tx-prep/","text":"Flashing the Latest OpenTX or EdgeTX for CRSFShot/Mixer Sync \u00b6 ExpressLRS requires CRSFShot or Mixer Sync to ensure full support for high packet rates. Starting with OpenTX-2.3.12 , CRSFshot has been fully implemented, and thus you will have to update your OpenTX radio to these newer versions. Another alternative is EdgeTX , the bleeding edge fork of OpenTX. These firmwares allow flashing of .elrs files too. CRSF Protocol \u00b6 ExpressLRS uses the CRSF serial protocol to communicate between the transmitter and the TX module. To set this up, enter into your model settings, and on the \"Model Setup\" tab, enable your \"External RF\" and select \"CRSF\" as the protocol: NOTE: Make sure the internal module is turned off. NOTE: Make sure the internal module is turned off. Serial Baud Rate \u00b6 On some transmitters, the baud rate for comms between the opentx and the ExpressLRS module can be changed. The two rates available are 115200 and 400000. ExpressLRS supports both rates (auto switches to the correct rate on power-up), however, we have found that on the R9M 2018 modules, the inverter IC's that are used are not capable of reliably handling 400k baud. If you're using an R9M 2018 module, select 115200 baud in OpenTX, or do the resistor mod described on the R9M 2018 Resistor Mod page. The QX7, X10/S, X12 will also going to require the Crossfire Mod if you're going to use 400k baud rates for use with higher packet rates, particularly with the 2.4G ExpressLRS Modules. Alternatively, EdgeTX can be flashed into these Radios and have OneBit enabled. See below for info regarding the X9D(plus). The X9D(plus) can't change its Max Bauds settings, but it has been found to be finicky, causing unstable packet transfers, and constant Telemetry Lost/Recovered messages from OpenTX. One fix for this is the use of the OneBit firmware or EdgeTX. Click here for more info. ADC Filter \u00b6 The ADC filter is enabled by default in OpenTX and is known to cause issues with RC Command data. This can result in \"jagged\" RC command responses in black box logs, caused by sequential RC packets that have the same command value (which were \"smoothed\" by the ADC filter). We recommend turning the ADC filter OFF in OpenTX Lua Script \u00b6 For faster access to the Lua script, save the ELRS.lua File from this link: ExLRS Lua Script onto the radio's SD Card in the Scripts/Tools folder and Long Press the \"SYS\" button (for T16 or similar Radios) or the \"Menu\" button (for Taranis X9D or similar Radios) to access the Tools Menu where you can find ELRS script ready to run with only one click. Another way to get the ELRS Lua Script is via the ExpressLRS Configurator. Here's how it looks in the Tools Menu: Note: The following section will not yet work for you if your TX module is not yet flashed with ExpressLRS The Lua script has an important feature that's highly valuable with troubleshooting. On the first line, after the 6-character version hash, it shows an indicator 0:nnn which tells you how many bad UART packets and how many good UART packets per second it's getting from the radio. It can be used to confirm the communication between the Radio and the TX module is working properly. e.g. if you have set the Packet Rate to 200Hz, 0:200 means 0 bad packets and 200 good packets (per second). The value should match the selected packet rate (200 for 200Hz, 500 for 500Hz, etc..) If it doesn't and is stuck at 250 that means CRSFshot isn't working. Go back to the top of this page and verify you've done all the steps above correctly. Troubleshooting Lua Script \u00b6 \"Connecting\" showing on the Lua Script would mean the Protocol set for the External Module is incorrect or that the module is not properly connected to the pins of the jr bay of the radio. The latter could mean that the module's PCB has gotten loose, common with the first batches of the ES24TX modules from Happymodel. If the number up top the lua script is showing 0:142, etc., have a look at your model settings and make sure the internal RF module is set to off. The \"33e2a6\" from the photo above is the Commit Hash of the firmware version that the module has. You can reference this hash from Releases . Now that your radio is set, you can now proceed with flashing ExpressLRS!","title":"Preparing your Radio"},{"location":"quick-start/tx-prep/#flashing-the-latest-opentx-or-edgetx-for-crsfshotmixer-sync","text":"ExpressLRS requires CRSFShot or Mixer Sync to ensure full support for high packet rates. Starting with OpenTX-2.3.12 , CRSFshot has been fully implemented, and thus you will have to update your OpenTX radio to these newer versions. Another alternative is EdgeTX , the bleeding edge fork of OpenTX. These firmwares allow flashing of .elrs files too.","title":"Flashing the Latest OpenTX or EdgeTX for CRSFShot/Mixer Sync"},{"location":"quick-start/tx-prep/#crsf-protocol","text":"ExpressLRS uses the CRSF serial protocol to communicate between the transmitter and the TX module. To set this up, enter into your model settings, and on the \"Model Setup\" tab, enable your \"External RF\" and select \"CRSF\" as the protocol: NOTE: Make sure the internal module is turned off. NOTE: Make sure the internal module is turned off.","title":"CRSF Protocol"},{"location":"quick-start/tx-prep/#serial-baud-rate","text":"On some transmitters, the baud rate for comms between the opentx and the ExpressLRS module can be changed. The two rates available are 115200 and 400000. ExpressLRS supports both rates (auto switches to the correct rate on power-up), however, we have found that on the R9M 2018 modules, the inverter IC's that are used are not capable of reliably handling 400k baud. If you're using an R9M 2018 module, select 115200 baud in OpenTX, or do the resistor mod described on the R9M 2018 Resistor Mod page. The QX7, X10/S, X12 will also going to require the Crossfire Mod if you're going to use 400k baud rates for use with higher packet rates, particularly with the 2.4G ExpressLRS Modules. Alternatively, EdgeTX can be flashed into these Radios and have OneBit enabled. See below for info regarding the X9D(plus). The X9D(plus) can't change its Max Bauds settings, but it has been found to be finicky, causing unstable packet transfers, and constant Telemetry Lost/Recovered messages from OpenTX. One fix for this is the use of the OneBit firmware or EdgeTX. Click here for more info.","title":"Serial Baud Rate"},{"location":"quick-start/tx-prep/#adc-filter","text":"The ADC filter is enabled by default in OpenTX and is known to cause issues with RC Command data. This can result in \"jagged\" RC command responses in black box logs, caused by sequential RC packets that have the same command value (which were \"smoothed\" by the ADC filter). We recommend turning the ADC filter OFF in OpenTX","title":"ADC Filter"},{"location":"quick-start/tx-prep/#lua-script","text":"For faster access to the Lua script, save the ELRS.lua File from this link: ExLRS Lua Script onto the radio's SD Card in the Scripts/Tools folder and Long Press the \"SYS\" button (for T16 or similar Radios) or the \"Menu\" button (for Taranis X9D or similar Radios) to access the Tools Menu where you can find ELRS script ready to run with only one click. Another way to get the ELRS Lua Script is via the ExpressLRS Configurator. Here's how it looks in the Tools Menu: Note: The following section will not yet work for you if your TX module is not yet flashed with ExpressLRS The Lua script has an important feature that's highly valuable with troubleshooting. On the first line, after the 6-character version hash, it shows an indicator 0:nnn which tells you how many bad UART packets and how many good UART packets per second it's getting from the radio. It can be used to confirm the communication between the Radio and the TX module is working properly. e.g. if you have set the Packet Rate to 200Hz, 0:200 means 0 bad packets and 200 good packets (per second). The value should match the selected packet rate (200 for 200Hz, 500 for 500Hz, etc..) If it doesn't and is stuck at 250 that means CRSFshot isn't working. Go back to the top of this page and verify you've done all the steps above correctly.","title":"Lua Script"},{"location":"quick-start/tx-prep/#troubleshooting-lua-script","text":"\"Connecting\" showing on the Lua Script would mean the Protocol set for the External Module is incorrect or that the module is not properly connected to the pins of the jr bay of the radio. The latter could mean that the module's PCB has gotten loose, common with the first batches of the ES24TX modules from Happymodel. If the number up top the lua script is showing 0:142, etc., have a look at your model settings and make sure the internal RF module is set to off. The \"33e2a6\" from the photo above is the Commit Hash of the firmware version that the module has. You can reference this hash from Releases . Now that your radio is set, you can now proceed with flashing ExpressLRS!","title":"Troubleshooting Lua Script"},{"location":"quick-start/tx-r9m/","text":"Flashing via OpenTX (Requires OpenTX 2.3.12 or newer) \u00b6 Flashing the Bootloader \u00b6 The bootloader is required to be flashed first prior to flashing the ExpressLRS firmware as the bootloader will replace the factory-bootloader, and enable the hardware to instead use the ExpressLRS code. Using an OpenTX transmitter, you flash the bootloader, and then flash ELRS. Here is a quick 2 minute demo if you would rather watch a video than read the steps: With the previous step ( Preparing your Radio ) done, you should now readily flash your R9 Transmitter Module. Copy r9m_elrs_bl.frk onto the SD card of your radio, in the /FIRMWARE folder. Flash r9m_elrs_bl.frk (14kb) to your TX module: Navigate in OpenTX to the TOOLS menu (hold SYS button) Page to the SD-HC CARD page, then the FIRMWARE folder Flash the frk file by holding OK and selecting \"Flash external module\" Flashing the firmware \u00b6 Targets: Frsky_TX_R9M_via_stock_BL Frsky_TX_R9M_LITE_via_stock_BL Using Build in the ExpressLRS Configurator, wait for the firmware to be compiled. After that's done, ExpressLRS Configurator Log should show the Success Message, and it will automatically open the folder where the firmware.elrs can be found. Put (copy-paste) the firmware.elrs to your Radio's SD Card (preferably to the /FIRMWARE folder for easy access). Once on your radio, navigate to the /FIRMWARE folder, select the firmware.elrs and click-hold the Enter button and select \"Flash External ELRS\". By this point, the bootloader (r9m_elrs_bl.frk) should've been flashed already. Wait for the flashing to finish, and if your module is equipped with a speaker (full size R9Ms), you should hear the tune and two beeps (if external module is now set to CRSF protocol). Flashing using STLink \u00b6 Targets: Frsky_TX_R9M_via_STLINK Frsky_TX_R9M_LITE_via_STLINK Frsky_TX_R9M_LITE_PRO_via_STLINK This method is an irreversible one. You will not be able to go back to Frsky firmwares with this method. You have been warned! This method also involves taking apart your module and soldering wires directly into its board. If you're not comfortable doing this, `STOP' now. Before flashing, disable 'Readout Protection' . To do this download the ST-LINK Utility and follow this quick how to video . After such, you can now disconnect from the ST-Link Utility. R9M STLink Connection R9M Lite STLink Connection R9M Lite Pro STLink Connection With the module connected shown above, and your configuration set, hit Build & Flash in the ExpressLRS Configurator and wait for the process to finish. Once that's done, and the Success Message showing, you can now remove/unsolder the STLink, and re-assemble the module, and put it into your Radio's Module Bay. The ExpressLRS tune should play and then two beeps after that can be heard, for units that has a speaker (R9Ms) and if the External Module is set to CRSF Protocol. Verification can be done using the ELRS.lua script. It should show the Version Hash at the top, as well as the options you can set. If it's showing \"Connecting\", check if External Module is set to CRSF for the selected model in your radio, and that internal RF module is set to off. See general Troubleshooting section for other ways to determine your module is flashed and ready for flying.","title":"Flashing Frsky R9Ms"},{"location":"quick-start/tx-r9m/#flashing-via-opentx-requires-opentx-2312-or-newer","text":"","title":"Flashing via OpenTX (Requires OpenTX 2.3.12 or newer)"},{"location":"quick-start/tx-r9m/#flashing-the-bootloader","text":"The bootloader is required to be flashed first prior to flashing the ExpressLRS firmware as the bootloader will replace the factory-bootloader, and enable the hardware to instead use the ExpressLRS code. Using an OpenTX transmitter, you flash the bootloader, and then flash ELRS. Here is a quick 2 minute demo if you would rather watch a video than read the steps: With the previous step ( Preparing your Radio ) done, you should now readily flash your R9 Transmitter Module. Copy r9m_elrs_bl.frk onto the SD card of your radio, in the /FIRMWARE folder. Flash r9m_elrs_bl.frk (14kb) to your TX module: Navigate in OpenTX to the TOOLS menu (hold SYS button) Page to the SD-HC CARD page, then the FIRMWARE folder Flash the frk file by holding OK and selecting \"Flash external module\"","title":"Flashing the Bootloader"},{"location":"quick-start/tx-r9m/#flashing-the-firmware","text":"Targets: Frsky_TX_R9M_via_stock_BL Frsky_TX_R9M_LITE_via_stock_BL Using Build in the ExpressLRS Configurator, wait for the firmware to be compiled. After that's done, ExpressLRS Configurator Log should show the Success Message, and it will automatically open the folder where the firmware.elrs can be found. Put (copy-paste) the firmware.elrs to your Radio's SD Card (preferably to the /FIRMWARE folder for easy access). Once on your radio, navigate to the /FIRMWARE folder, select the firmware.elrs and click-hold the Enter button and select \"Flash External ELRS\". By this point, the bootloader (r9m_elrs_bl.frk) should've been flashed already. Wait for the flashing to finish, and if your module is equipped with a speaker (full size R9Ms), you should hear the tune and two beeps (if external module is now set to CRSF protocol).","title":"Flashing the firmware"},{"location":"quick-start/tx-r9m/#flashing-using-stlink","text":"Targets: Frsky_TX_R9M_via_STLINK Frsky_TX_R9M_LITE_via_STLINK Frsky_TX_R9M_LITE_PRO_via_STLINK This method is an irreversible one. You will not be able to go back to Frsky firmwares with this method. You have been warned! This method also involves taking apart your module and soldering wires directly into its board. If you're not comfortable doing this, `STOP' now. Before flashing, disable 'Readout Protection' . To do this download the ST-LINK Utility and follow this quick how to video . After such, you can now disconnect from the ST-Link Utility. R9M STLink Connection R9M Lite STLink Connection R9M Lite Pro STLink Connection With the module connected shown above, and your configuration set, hit Build & Flash in the ExpressLRS Configurator and wait for the process to finish. Once that's done, and the Success Message showing, you can now remove/unsolder the STLink, and re-assemble the module, and put it into your Radio's Module Bay. The ExpressLRS tune should play and then two beeps after that can be heard, for units that has a speaker (R9Ms) and if the External Module is set to CRSF Protocol. Verification can be done using the ELRS.lua script. It should show the Version Hash at the top, as well as the options you can set. If it's showing \"Connecting\", check if External Module is set to CRSF for the selected model in your radio, and that internal RF module is set to off. See general Troubleshooting section for other ways to determine your module is flashed and ready for flying.","title":"Flashing using STLink"},{"location":"quick-start/tx-siyifm30/","text":"Targets: FM30_TX_via_STLINK (Initial Flash) FM30_TX_via_DFU (Updating) Initial Flash \u00b6 Begin by opening the TX module by removing the 4 screws at the corners using a small phillips screwdriver. Lift the cover from the case and unscrew the antenna holder from the cover. Remove the 2 screws around the edges and remove the PCB module from the case. Solder 4 STLink wires to the JP4 holes (CLK-DIO-RST-GND) and 1 wire to VCC pad as shown: Attach to an STLink as shown: With the module connected shown above, and your configuration set, hit Build & Flash in the ExpressLRS Configurator and wait for the process to finish. Once that's done, and the Success Message showing, you can now remove/unsolder the STLink, and re-assemble the module, and put it into your Radio's Module Bay. Verification can be done using the ELRS.lua script. It should show the Version Hash at the top, as well as the options you can set. If it's showing \"Connecting\", check if External Module is set to CRSF for the selected model in your radio, and that internal RF module is set to off. See general Troubleshooting section for other ways to determine your module is flashed and ready for flying. Updating \u00b6 Plug the FM30 into the USB of your computer. Then select FM30_TX_via_DFU and press Build & Flash to update the TX.","title":"Flashing Siyi FM30"},{"location":"quick-start/tx-siyifm30/#initial-flash","text":"Begin by opening the TX module by removing the 4 screws at the corners using a small phillips screwdriver. Lift the cover from the case and unscrew the antenna holder from the cover. Remove the 2 screws around the edges and remove the PCB module from the case. Solder 4 STLink wires to the JP4 holes (CLK-DIO-RST-GND) and 1 wire to VCC pad as shown: Attach to an STLink as shown: With the module connected shown above, and your configuration set, hit Build & Flash in the ExpressLRS Configurator and wait for the process to finish. Once that's done, and the Success Message showing, you can now remove/unsolder the STLink, and re-assemble the module, and put it into your Radio's Module Bay. Verification can be done using the ELRS.lua script. It should show the Version Hash at the top, as well as the options you can set. If it's showing \"Connecting\", check if External Module is set to CRSF for the selected model in your radio, and that internal RF module is set to off. See general Troubleshooting section for other ways to determine your module is flashed and ready for flying.","title":"Initial Flash"},{"location":"quick-start/tx-siyifm30/#updating","text":"Plug the FM30 into the USB of your computer. Then select FM30_TX_via_DFU and press Build & Flash to update the TX.","title":"Updating"},{"location":"quick-start/tx-voyager900/","text":"Valid Targets: NamimnoRC_VOYAGER_900_TX_via_STLINK NamimnoRC_VOYAGER_900_TX_via_WIFI","title":"Flashing NamimnoRC Voyager"},{"location":"quick-start/your-target/","text":"Here are all the target names for the following hardware. We list the name of the target itself, without the final line be it BetaflightPassthrough , UART , WiFi , Stock_BL , DFU or STLINK . So what are each of these? BetaflightPassthrough : once the RX is connected to the FC and has an ELRS bootloader. UART : used for DIY TXes or flashing via an FTDI. WiFi : used for Espressif (ESP) based hardware, allows clean web interface for flashing. Stock_BL : used for R9/similar hardware, where you can flash through the TX. DFU : can be used to flash the SIYI FM30. STLink : generally deprecated, used to fully flash hardware that did not originally support ELRS, requires soldering. If your hardware is officially ELRS hardware (HappyModel, NamimnoRC, NeutronRC, etc), simply select the target in the dropdown as shown below and skip to the user defines page . If the hardware is not (R9, SIYI, GHOST, DIY), select the target in the dropdown and then go to the bootloader installation page . If the hardware is DIY, skip to user defines page as well. ELRS Hardware \u00b6 Happymodel Hardware \u00b6 Happymodel EP RXs: HappyModel_EP_2400_RX_via_XYZ Happymodel PP RX: HappyModel_PP_2400_RX_via_XYZ Happymodel ES24TX: HappyModel_ES24TX_2400_TX_via_XYZ Happymodel ES915TX: HappyModel_ES915TX_via_XYZ Happymodel ES915RX: HappyModel_ES915RX_via_XYZ NamimnoRC Hardware \u00b6 Namimno Voyager TX: NamimnoRC_Voyager_900_TX_via_XYZ Namimno Voyager ESP RX: NamimnoRC_Voyager_900_ESP_RX_via_XYZ Namimno Voyager RX: NamimnoRC_Voyager_900_RX_via_XYZ Namimno Flash TX: NamimnoRC_FLASH_2400_TX_via_XYZ Namimno Flash ESP RX: NamimnoRC_FLASH_2400_ESP_RX_via_XYZ Namimno Flash RX: NamimnoRC_FLASH_2400_RX_via_XYZ Non-ELRS-specific Hardware \u00b6 FrSky R9 Hardware \u00b6 FrSky R9M: FrSky_TX_R9M_via_XYZ FrSky R9M Lite: FrSky_TX_R9M_LITE_via_XYZ FrSky R9M Lite Pro: FrSky_TX_R9M_LITE_PRO_via_STLink FrSky R9mm/R9mini: Frsky_RX_R9MM_R9MINI_via_XYZ FrSky R9mx: Frsky_RX_R9MX_via_XYZ FrSky R9 Slim: Frsky_RX_R9SLIM_via_XYZ FrSky R9 Slim+: Frsky_RX_R9SLIMPLUS_via_XYZ FrSky R9 Slim+ OTA: Frsky_RX_R9SLIMPLUSOTA_via_XYZ Ghost Hardware \u00b6 Ghost TX: GHOST_2400_TX_via_STLINK Ghost TX Lite: GHOST_2400_TX_LITE_via_STLINK Ghost Atto RX: GHOST_ATTO_2400_RX_via_XYZ GHOST Zepto RX: GHOST_ATTO_2400_RX_via_XYZ Other Off The Shelf Hardware \u00b6 SIYI FM30 TX: FM30_TX_via_XYZ SIYI FRMini RX: FM30_RX_MINI_via_XYZ Jumper R900mini RX: Jumper_RX_R900MINI_via_XYZ DIY Hardware \u00b6 900 MHz \u00b6 TTGO v1: DIY_900_TX_TTGO_V1_SX127x_via_UART TTGO v2: DIY_900_TX_TTGO_V2_SX127x_via_UART DIY ESP8285 RX: DIY_900_RX_ESP8285_SX127x_via_XYZ DIY ESP32 E19 TX: DIY_900_TX_ESP32_SX127x_E19_via_UART DIY ESP32 RFM95 TX: DIY_900_TX_ESP32_SX127x_RFM95_via_UART 2.4 GHz \u00b6 DIY ESP8285 RX: DIY_2400_RX_ESP8285_SX1280_via_XYZ DIY STM32 RX: DIY_2400_RX_STM32_CCG_Nano_v0_5_via_XYZ DIY ESP32 E28 TX: DIY_2400_TX_ESP32_SX1280_E28_via_UART DIY ESP32 LORAF27 TX: DIY_2400_TX_ESP32_SX1280_LORA1280F27_via_UART DIY ESP32 SX1280mini TX: DIY_2400_TX_ESP32_SX1280_Mini_via_UART","title":"Your target"},{"location":"quick-start/your-target/#elrs-hardware","text":"","title":"ELRS Hardware"},{"location":"quick-start/your-target/#happymodel-hardware","text":"Happymodel EP RXs: HappyModel_EP_2400_RX_via_XYZ Happymodel PP RX: HappyModel_PP_2400_RX_via_XYZ Happymodel ES24TX: HappyModel_ES24TX_2400_TX_via_XYZ Happymodel ES915TX: HappyModel_ES915TX_via_XYZ Happymodel ES915RX: HappyModel_ES915RX_via_XYZ","title":"Happymodel Hardware"},{"location":"quick-start/your-target/#namimnorc-hardware","text":"Namimno Voyager TX: NamimnoRC_Voyager_900_TX_via_XYZ Namimno Voyager ESP RX: NamimnoRC_Voyager_900_ESP_RX_via_XYZ Namimno Voyager RX: NamimnoRC_Voyager_900_RX_via_XYZ Namimno Flash TX: NamimnoRC_FLASH_2400_TX_via_XYZ Namimno Flash ESP RX: NamimnoRC_FLASH_2400_ESP_RX_via_XYZ Namimno Flash RX: NamimnoRC_FLASH_2400_RX_via_XYZ","title":"NamimnoRC Hardware"},{"location":"quick-start/your-target/#non-elrs-specific-hardware","text":"","title":"Non-ELRS-specific Hardware"},{"location":"quick-start/your-target/#frsky-r9-hardware","text":"FrSky R9M: FrSky_TX_R9M_via_XYZ FrSky R9M Lite: FrSky_TX_R9M_LITE_via_XYZ FrSky R9M Lite Pro: FrSky_TX_R9M_LITE_PRO_via_STLink FrSky R9mm/R9mini: Frsky_RX_R9MM_R9MINI_via_XYZ FrSky R9mx: Frsky_RX_R9MX_via_XYZ FrSky R9 Slim: Frsky_RX_R9SLIM_via_XYZ FrSky R9 Slim+: Frsky_RX_R9SLIMPLUS_via_XYZ FrSky R9 Slim+ OTA: Frsky_RX_R9SLIMPLUSOTA_via_XYZ","title":"FrSky R9 Hardware"},{"location":"quick-start/your-target/#ghost-hardware","text":"Ghost TX: GHOST_2400_TX_via_STLINK Ghost TX Lite: GHOST_2400_TX_LITE_via_STLINK Ghost Atto RX: GHOST_ATTO_2400_RX_via_XYZ GHOST Zepto RX: GHOST_ATTO_2400_RX_via_XYZ","title":"Ghost Hardware"},{"location":"quick-start/your-target/#other-off-the-shelf-hardware","text":"SIYI FM30 TX: FM30_TX_via_XYZ SIYI FRMini RX: FM30_RX_MINI_via_XYZ Jumper R900mini RX: Jumper_RX_R900MINI_via_XYZ","title":"Other Off The Shelf Hardware"},{"location":"quick-start/your-target/#diy-hardware","text":"","title":"DIY Hardware"},{"location":"quick-start/your-target/#900-mhz","text":"TTGO v1: DIY_900_TX_TTGO_V1_SX127x_via_UART TTGO v2: DIY_900_TX_TTGO_V2_SX127x_via_UART DIY ESP8285 RX: DIY_900_RX_ESP8285_SX127x_via_XYZ DIY ESP32 E19 TX: DIY_900_TX_ESP32_SX127x_E19_via_UART DIY ESP32 RFM95 TX: DIY_900_TX_ESP32_SX127x_RFM95_via_UART","title":"900 MHz"},{"location":"quick-start/your-target/#24-ghz","text":"DIY ESP8285 RX: DIY_2400_RX_ESP8285_SX1280_via_XYZ DIY STM32 RX: DIY_2400_RX_STM32_CCG_Nano_v0_5_via_XYZ DIY ESP32 E28 TX: DIY_2400_TX_ESP32_SX1280_E28_via_UART DIY ESP32 LORAF27 TX: DIY_2400_TX_ESP32_SX1280_LORA1280F27_via_UART DIY ESP32 SX1280mini TX: DIY_2400_TX_ESP32_SX1280_Mini_via_UART","title":"2.4 GHz"},{"location":"software/obsolete-defines/","text":"This page contains old user_defines.txt that have been removed or superseded by new defines. New items should be added to the top of the list so the last entry here is the oldest. The order of each entry should be [code]definename[/code] followed by the original text of the documentation, ending with a separate paragraph \" REMOVED [version] [replacement or reason for removal]\". Obsolete Defines \u00b6 -DFAST_SYNC Option that adds faster initial syncing, by changing how long the receiver waits for a connection in each mode while not connected. This option is now the default, but disabling it can help syncing at lower packet rates (50Hz and below). REMOVED 1.0.0-RC2 initial sync replaced with a full FHSS period wait #-DR9M_UNLOCK_HIGHER_POWER REMOVED 1.0.0-RC1 replaced with generic -DUNLOCK_HIGHER_POWER #-DARM_CHANNEL=AUX1 If you are using a different channel than the default you need to edit \ud83d\udd25 (or you may not be able to gain sync safely - default is listed in #DARM_CHANNEL as AUX1 which is Channel 5). NB This feature assumes that a low value of the arm switch is disarmed, and a high value is armed. If you have the arm switch reversed it will not work correctly and the link won't be established. For this reason it may be best not to enable no sync on arm when you are first setting up ExpressLRS as it can be a source of confusion. REMOVED 1.0.0-RC1 AUX1 is always the arm switch now, no longer configurable #-DLOCK_ON_50HZ LOCK_ON_50HZ locks the RX at 50Hz mode from the powerup. (Only recommended for longrange, and partly redundant with previous feature.) Merged in Pull 143 REMOVED 1.0.0-RC1 not sure why this was removed -DAUTO_WIFI_ON_BOOT REMOVED 1.0.0-RC1 replaced with -DAUTO_WIFI_ON_INTERVAL=X","title":"Obsolete Defines"},{"location":"software/obsolete-defines/#obsolete-defines","text":"-DFAST_SYNC Option that adds faster initial syncing, by changing how long the receiver waits for a connection in each mode while not connected. This option is now the default, but disabling it can help syncing at lower packet rates (50Hz and below). REMOVED 1.0.0-RC2 initial sync replaced with a full FHSS period wait #-DR9M_UNLOCK_HIGHER_POWER REMOVED 1.0.0-RC1 replaced with generic -DUNLOCK_HIGHER_POWER #-DARM_CHANNEL=AUX1 If you are using a different channel than the default you need to edit \ud83d\udd25 (or you may not be able to gain sync safely - default is listed in #DARM_CHANNEL as AUX1 which is Channel 5). NB This feature assumes that a low value of the arm switch is disarmed, and a high value is armed. If you have the arm switch reversed it will not work correctly and the link won't be established. For this reason it may be best not to enable no sync on arm when you are first setting up ExpressLRS as it can be a source of confusion. REMOVED 1.0.0-RC1 AUX1 is always the arm switch now, no longer configurable #-DLOCK_ON_50HZ LOCK_ON_50HZ locks the RX at 50Hz mode from the powerup. (Only recommended for longrange, and partly redundant with previous feature.) Merged in Pull 143 REMOVED 1.0.0-RC1 not sure why this was removed -DAUTO_WIFI_ON_BOOT REMOVED 1.0.0-RC1 replaced with -DAUTO_WIFI_ON_INTERVAL=X","title":"Obsolete Defines"},{"location":"software/open-ocd/","text":"If you are using linux then you can't use the ST-LINK utility from st.com. But fortunately you can achieve the same effect with openocd on the linux command line. This tutorial assumes you have an STLink v2 install openocd from your distro's repository. for debian/ubuntu use: sudo apt-get install openocd change directories to openocd script repository: cd /usr/share/openocd issue the full command: openocd -f ./scripts/interface/stlink-v2.cfg -f ./scripts/target/stm32f1x.cfg -c \"init; reset halt; stm32f1x unlock 0; reset run; shutdown\" restart your device so the disabled readout protection can take effect. Now you can proceed with flashing your R9m or R9MM. this may work on other frsky devices or it might not.","title":"OpenOCD for STLink"},{"location":"software/stlink-fix/","text":"PlatformIO has an older version of STLink. It is unable to communicate with the STM32L MCUs on some Rx's. Affected RX's: -(DIY) PP Swapping out PIO's STLink folder contents with the current STLink will allow using the configurator with these RX's. Go to your STLink folder copy contents of \"ST-Link Utility\" C:\\Program Files (x86)\\STMicroelectronics\\STM32 ST-LINK Utility\\ST-LINK Utility paste files from \"st-link utility\" folder into \"stlink\" folder in your users PIO location C:\\Users\\username\\ .platformio\\packages\\tool-stm32duino","title":"PIO STLink Fix"},{"location":"software/switch-config/","text":"This documentation applies to versions above 1.0.0-RC1 Put your arm switch on AUX1 ExpressLRS has two options for how switches are transmitted: Normal mode and HYBRID_SWITCHES_8 . The switch mode selected MUST match (select either Option 1 or Option 2) between the TX module and RX. The default choice is to have 8x 2-position switches. \ud83e\udd48 That's really about all there is to this mode, other than noting that you should have your arm switch on AUX1. ExpressLRS uses AUX1 to determine if your model is armed. Channel Resolution Frequency AUX1 1-bit / 2-position Every packet, ARM channel AUX2-AUX8 1-bit / 2-position Every packet The other option is HYBRID_SWITCHES_8 where the switches are broken into different types Channel Resolution Frequency AUX1 1-bit / 2-position Every packet, ARM channel AUX2-AUX7 3-bit / 2-position, 3-position, or 6-position Round-robin AUX8 4-bit / 16-position Round-robin The first switch (AUX1) is sent with every packet. Put. Your. Arm. On. AUX1. For the remaining 7 switches, one switch is sent with each packet (in addition to AUX1). When a switch changes, it is given priority to be sent in the next packet to try to reduce its latency. AUX 1 \u00b6 Put your arm switch on AUX1 . AUX1 is the low-latency switch, sent with every packet, and only supports on/off (2-position) operation. ExpressLRS uses AUX1 to determine if your model is armed, and should set up on the transmitter so that ~1000 is disarmed, ~2000 is armed. AUX 2-7 \u00b6 The majority of the aux channels, AUX2 - AUX7, work with 2-position switches, 3-position switches, or 6-position switches / selector buttons. Approx. Channel Input (us) Channel Output (us) Ardupilot Mode 988 1000 Mode1 (up position for 2-pos / 3-pos) 1192 1275 Mode2 1398 1425 Mode3 1500 1500 Mode4 (center position in 3-pos) 1602 1575 Mode4 1807 1725 Mode5 2011 2000 Mode6 (down position for 2-pos / 3-pos) AUX 8 \u00b6 AUX8 is the wide range channel, supporting 16 positions. You can stack all your modes in here, Bardwell style, or get some low-res camera pan action-- 180 degrees / 16 actually isn't terrible. Clever math-heads might note that there's no \"center position\" (1500us) in a 16-position switch, so using AUX8 with a 3-position switch means it will come out as 1533 at the flight controller. Switch Position Channel Output (us) Switch Position Channel Output (us) 0 1000 8 1533 1 1066 9 1600 2 1133 10 1666 3 1200 11 1733 4 1266 12 1800 5 1333 13 1866 6 1400 14 1933 7 1467 15 2000 FAQ \u00b6 Why do you keep saying \" put arm on AUX1 \"? \u00b6 For safety reasons. In HYBRID_SWITCHES_8 mode, AUX1 is sent with every packet going out, this is the most reliable way to be able to tell your model to disarm. If your arm switch is in another aux channel, it may be several packets before that switch is transmitted, and there's no guarantee that the RX will actually receive that packet. There's a non-trivial chance your model may not ever disarm if the link quality is low and it just so happens that the packet containing the arm switch is getting missed every time. Forcing the arm switch into every packet on AUX1 means that if any packet is received by ExpresLRS, it will disarm your model, not just a less than 1-in-7 chance. It also protects against unintentional disarms caused by a corrupt packet changing the value of the arm switch to disarmed. Betaflight requires that 4x \"disarm\" commands are received before disarming to guard against this possibility. With arm on AUX1, a single corrupt packet can not disarm your model. With arm on AUX2-8, the one corrupt switch value will be sent 6 times before the value is refreshed, but the flight controller would have already disarmed by that point. I use a 3-pos switch for arm, this software is unusable \u00b6 You can still use a 3-position switch to arm! AUX1 just needs to be 2-position, not the physical switch. Simply adjust the mixer in your transmitter so AUX1 works like an on-off switch. If your 3-position arm switch had a second function as well, such as enabling Blackbox, just use one of the other 7 AUX channels to send the switch on a second channel. Why can't I have switches / potentiometers with full 10-bit resolution? \u00b6 A lot of the magic of ExpressLRS comes from its small packet sizes, there simply is not enough space to put all that data. There are tricks that can be done with interleaving sticks and switches packets but we believe sticks should be in every packet for the lowest control latency. Different switch modes with higher resolution may be added further down the road for setups where higher latency doesn't matter.","title":"Switch Configs"},{"location":"software/switch-config/#aux-1","text":"Put your arm switch on AUX1 . AUX1 is the low-latency switch, sent with every packet, and only supports on/off (2-position) operation. ExpressLRS uses AUX1 to determine if your model is armed, and should set up on the transmitter so that ~1000 is disarmed, ~2000 is armed.","title":"AUX 1"},{"location":"software/switch-config/#aux-2-7","text":"The majority of the aux channels, AUX2 - AUX7, work with 2-position switches, 3-position switches, or 6-position switches / selector buttons. Approx. Channel Input (us) Channel Output (us) Ardupilot Mode 988 1000 Mode1 (up position for 2-pos / 3-pos) 1192 1275 Mode2 1398 1425 Mode3 1500 1500 Mode4 (center position in 3-pos) 1602 1575 Mode4 1807 1725 Mode5 2011 2000 Mode6 (down position for 2-pos / 3-pos)","title":"AUX 2-7"},{"location":"software/switch-config/#aux-8","text":"AUX8 is the wide range channel, supporting 16 positions. You can stack all your modes in here, Bardwell style, or get some low-res camera pan action-- 180 degrees / 16 actually isn't terrible. Clever math-heads might note that there's no \"center position\" (1500us) in a 16-position switch, so using AUX8 with a 3-position switch means it will come out as 1533 at the flight controller. Switch Position Channel Output (us) Switch Position Channel Output (us) 0 1000 8 1533 1 1066 9 1600 2 1133 10 1666 3 1200 11 1733 4 1266 12 1800 5 1333 13 1866 6 1400 14 1933 7 1467 15 2000","title":"AUX 8"},{"location":"software/switch-config/#faq","text":"","title":"FAQ"},{"location":"software/switch-config/#why-do-you-keep-saying-put-arm-on-aux1","text":"For safety reasons. In HYBRID_SWITCHES_8 mode, AUX1 is sent with every packet going out, this is the most reliable way to be able to tell your model to disarm. If your arm switch is in another aux channel, it may be several packets before that switch is transmitted, and there's no guarantee that the RX will actually receive that packet. There's a non-trivial chance your model may not ever disarm if the link quality is low and it just so happens that the packet containing the arm switch is getting missed every time. Forcing the arm switch into every packet on AUX1 means that if any packet is received by ExpresLRS, it will disarm your model, not just a less than 1-in-7 chance. It also protects against unintentional disarms caused by a corrupt packet changing the value of the arm switch to disarmed. Betaflight requires that 4x \"disarm\" commands are received before disarming to guard against this possibility. With arm on AUX1, a single corrupt packet can not disarm your model. With arm on AUX2-8, the one corrupt switch value will be sent 6 times before the value is refreshed, but the flight controller would have already disarmed by that point.","title":"Why do you keep saying \"put arm on AUX1\"?"},{"location":"software/switch-config/#i-use-a-3-pos-switch-for-arm-this-software-is-unusable","text":"You can still use a 3-position switch to arm! AUX1 just needs to be 2-position, not the physical switch. Simply adjust the mixer in your transmitter so AUX1 works like an on-off switch. If your 3-position arm switch had a second function as well, such as enabling Blackbox, just use one of the other 7 AUX channels to send the switch on a second channel.","title":"I use a 3-pos switch for arm, this software is unusable"},{"location":"software/switch-config/#why-cant-i-have-switches-potentiometers-with-full-10-bit-resolution","text":"A lot of the magic of ExpressLRS comes from its small packet sizes, there simply is not enough space to put all that data. There are tricks that can be done with interleaving sticks and switches packets but we believe sticks should be in every packet for the lowest control latency. Different switch modes with higher resolution may be added further down the road for setups where higher latency doesn't matter.","title":"Why can't I have switches / potentiometers with full 10-bit resolution?"},{"location":"software/toolchain-install/","text":"Note: The following section is intended for advanced users who intend to dabble with the source code directly. If you're not familiar with Programming and Development Environments, STOP and proceed to the next step. Toolchain Setup (Advanced) \u00b6 ExpressLRS is written in C++ using the Arduino framework. Rather than using the Arduino IDE (which let's face it, \ud83d\uddff is pretty clunky), we use platformio To ease the use of pio we recommend to use the according extension for Visual Studio Code PlatformIO \u00b6 \ud83d\udd3d Download a copy of vscode for your computer \ud83d\udcc2 Open vscode, and click on the \" Extensions \" icon in the toolbar on the right (see Managing Extensions \ud83d\udcd8) \ud83d\udd0e In the search box, enter platformio , and install the extension (see the pio install documentation \ud83d\udcda) Git Setup \u00b6 We recommend using VSCode's built-in Git client, as it requires the least 3 rd party software \ud83e\udd16. \ud83d\udd3d Download a copy of git (this is also needed for PlatformIO ) Install git , click yes to the default options (there are a LOT \ud83d\udcaf) IMPORTANT! Make sure you select this option during install, it adds git to PATH which is necessary for VScode cloning (the next step). Cloning the Repo \u00b6 In VSCode open the command pallete (using Cmd+Shift+P on MacOS or Ctrl+Shift+P on Windows) Enter Git: Clone Click that! \ud83d\udc48 Then, enter ExpressLRS Repo URL -> https://github.com/AlessandroAU/ExpressLRS.git \ud83d\udcbb Choose a folder for ExpressLRS. \ud83d\udcc2 Selecting the Latest Release \u00b6 Before we can do any building, you need to select a release build of ELRS. For example, release 0.1.0-RC1 . In Visual Studio Code select that tag. The location of the selector is shown below. \ud83d\uddb1\ufe0f Click the selector, and then type in the name of the tag, in this case 0.1.0-RC1 . PlatformIO Building \u00b6 Once you had the time of your life setting up your toolchain \ud83e\uddf0 you are ready to Flash \u26a1 ExpressLRS to supported hardware . Building Targets using PlatformIO \u00b6 \ud83d\udcc2 When you first launch Visual Studio Code , you should see the PlatformIO Home Page in a tab. Click the Open Project button. Navigate to the ExpressLRS repo directory. Navigate into the src folder (i.e. ./ExpressLRS/src/ ). Finally, press the Open button. \u270f\ufe0f Edit the file ./src/user_defines.txt to define user specific variabls. \ud83d\ude08 Please make sure you did edit the file according to your needs! \ud83d\udcca In the toolbar on the left, click the PlatformIO icon, which will show the list of tasks. Now, select Project Tasks, expand your desired target and select Build/Upload (depending on the method). You should see the result in the terminal. \ud83d\ude43 If something went wrong - please check the Terminal , too. It will contain at least a hint on what the issue is. Please ask the community for further help\ud83e\uddd1\u200d\ud83d\udd27!","title":"Toolchain Setup"},{"location":"software/toolchain-install/#toolchain-setup-advanced","text":"ExpressLRS is written in C++ using the Arduino framework. Rather than using the Arduino IDE (which let's face it, \ud83d\uddff is pretty clunky), we use platformio To ease the use of pio we recommend to use the according extension for Visual Studio Code","title":"Toolchain Setup (Advanced)"},{"location":"software/toolchain-install/#platformio","text":"\ud83d\udd3d Download a copy of vscode for your computer \ud83d\udcc2 Open vscode, and click on the \" Extensions \" icon in the toolbar on the right (see Managing Extensions \ud83d\udcd8) \ud83d\udd0e In the search box, enter platformio , and install the extension (see the pio install documentation \ud83d\udcda)","title":"PlatformIO"},{"location":"software/toolchain-install/#git-setup","text":"We recommend using VSCode's built-in Git client, as it requires the least 3 rd party software \ud83e\udd16. \ud83d\udd3d Download a copy of git (this is also needed for PlatformIO ) Install git , click yes to the default options (there are a LOT \ud83d\udcaf) IMPORTANT! Make sure you select this option during install, it adds git to PATH which is necessary for VScode cloning (the next step).","title":"Git Setup"},{"location":"software/toolchain-install/#cloning-the-repo","text":"In VSCode open the command pallete (using Cmd+Shift+P on MacOS or Ctrl+Shift+P on Windows) Enter Git: Clone Click that! \ud83d\udc48 Then, enter ExpressLRS Repo URL -> https://github.com/AlessandroAU/ExpressLRS.git \ud83d\udcbb Choose a folder for ExpressLRS. \ud83d\udcc2","title":"Cloning the Repo"},{"location":"software/toolchain-install/#selecting-the-latest-release","text":"Before we can do any building, you need to select a release build of ELRS. For example, release 0.1.0-RC1 . In Visual Studio Code select that tag. The location of the selector is shown below. \ud83d\uddb1\ufe0f Click the selector, and then type in the name of the tag, in this case 0.1.0-RC1 .","title":"Selecting the Latest Release"},{"location":"software/toolchain-install/#platformio-building","text":"Once you had the time of your life setting up your toolchain \ud83e\uddf0 you are ready to Flash \u26a1 ExpressLRS to supported hardware .","title":"PlatformIO Building"},{"location":"software/toolchain-install/#building-targets-using-platformio","text":"\ud83d\udcc2 When you first launch Visual Studio Code , you should see the PlatformIO Home Page in a tab. Click the Open Project button. Navigate to the ExpressLRS repo directory. Navigate into the src folder (i.e. ./ExpressLRS/src/ ). Finally, press the Open button. \u270f\ufe0f Edit the file ./src/user_defines.txt to define user specific variabls. \ud83d\ude08 Please make sure you did edit the file according to your needs! \ud83d\udcca In the toolbar on the left, click the PlatformIO icon, which will show the list of tasks. Now, select Project Tasks, expand your desired target and select Build/Upload (depending on the method). You should see the result in the terminal. \ud83d\ude43 If something went wrong - please check the Terminal , too. It will contain at least a hint on what the issue is. Please ask the community for further help\ud83e\uddd1\u200d\ud83d\udd27!","title":"Building Targets using PlatformIO"},{"location":"software/updating/betaflight-passthrough/","text":"Updating through BF Passthrough \u00b6 General Instructions \u00b6 Once you have Flashed ELRS onto your receivers they can be conveniently updating using the passthrough feature of Betaflight (and similar FC FW). This is a relatively simple process. 1. Open VS Code or the configurator and prepare to compile and upload. 2. Plug in your FC to your computer, but do NOT connect to betaflight configurator. 3. Select env:YOUR_RX_via_Betaflight_Passthrough and hit upload. 4. That's it! ESP-Specific Instructions \u00b6 ESP-based receivers need some special care to allow passthrough updating. The boot button needs to be pressed or the pads need to be jumped, and the receiver must be powered up while the computer is trying to connect to it. The following steps explain it. 1. Open VS Code or the configurator and prepare to compile and upload. 2. Plug in your FC to your computer, but do NOT connect to betaflight configurator. 3. Hold the boot button of the RX or jump the boot jumper. 4. Select env:YOUR_RX_via_Betaflight_Passthrough and hit upload. 5. Wait for the command line to show .....----- and plug in a battery or otherwise power up the RX. Troubleshooting \u00b6 If it fails to flash (may display a success message but has errors show up above the final success output), check if it is flashing the correct COM. Sometimes an ethernet adapter on your motherboard will populate a COM port, which will confuse the script and it will attempt to flash to that COM. The solution that could work would be manually editing the UARTUpload.py and BetaflightinitPassthrough.py files in src/python . Another possible solution could be changing the COM to a higher number for the unnecessary COMs Sometimes the boot jumper or button must be used while powering up the receiver. Ardupilot Instructions (community contribution, untested) \u00b6 Connect the autopilot to a PC using a USB cable and connect with a Ground Station (i.e. Mission Planner, QGC, etc). Set SERIAL_PASSTIMO to a length of time (in seconds) that gives you enough time to connect with the sensor\u2019s configuration software. 30 to 60 seconds is a good choice Set SERIAL_PASS2 to the number of the serial port connected to the sensor. I.e. \u201c2\u201d if the sensor is connected to Telem2/Serial2. Be sure to set each port\u2019s baud rate appropriately using the SERIALx_BAUD parameter. The rates may be different for each port. ArduPilot will do the buffering. Press the \u201cDisconnect\u201d button on the ground station but leave the USB cable from the PC to the autopilot connected. Open the sensor\u2019s configuration software and connect to the autopilot\u2019s COM port. If all goes well the configuration software should work as it does when the PC is directly connected to the sensor If the configuration fails to connect there are some things to try: Some configuration software will not allow connecting to the autopilot\u2019s COM port by default but may have a option to display all available COM ports If no serial messages are received from the PC the timeout will expire and SERIAL_PASS2 will revert to -1 https://ardupilot.org/.../common-serial-passthrough.html","title":"Betaflight Passthrough"},{"location":"software/updating/betaflight-passthrough/#updating-through-bf-passthrough","text":"","title":"Updating through BF Passthrough"},{"location":"software/updating/betaflight-passthrough/#general-instructions","text":"Once you have Flashed ELRS onto your receivers they can be conveniently updating using the passthrough feature of Betaflight (and similar FC FW). This is a relatively simple process. 1. Open VS Code or the configurator and prepare to compile and upload. 2. Plug in your FC to your computer, but do NOT connect to betaflight configurator. 3. Select env:YOUR_RX_via_Betaflight_Passthrough and hit upload. 4. That's it!","title":"General Instructions"},{"location":"software/updating/betaflight-passthrough/#esp-specific-instructions","text":"ESP-based receivers need some special care to allow passthrough updating. The boot button needs to be pressed or the pads need to be jumped, and the receiver must be powered up while the computer is trying to connect to it. The following steps explain it. 1. Open VS Code or the configurator and prepare to compile and upload. 2. Plug in your FC to your computer, but do NOT connect to betaflight configurator. 3. Hold the boot button of the RX or jump the boot jumper. 4. Select env:YOUR_RX_via_Betaflight_Passthrough and hit upload. 5. Wait for the command line to show .....----- and plug in a battery or otherwise power up the RX.","title":"ESP-Specific Instructions"},{"location":"software/updating/betaflight-passthrough/#troubleshooting","text":"If it fails to flash (may display a success message but has errors show up above the final success output), check if it is flashing the correct COM. Sometimes an ethernet adapter on your motherboard will populate a COM port, which will confuse the script and it will attempt to flash to that COM. The solution that could work would be manually editing the UARTUpload.py and BetaflightinitPassthrough.py files in src/python . Another possible solution could be changing the COM to a higher number for the unnecessary COMs Sometimes the boot jumper or button must be used while powering up the receiver.","title":"Troubleshooting"},{"location":"software/updating/betaflight-passthrough/#ardupilot-instructions-community-contribution-untested","text":"Connect the autopilot to a PC using a USB cable and connect with a Ground Station (i.e. Mission Planner, QGC, etc). Set SERIAL_PASSTIMO to a length of time (in seconds) that gives you enough time to connect with the sensor\u2019s configuration software. 30 to 60 seconds is a good choice Set SERIAL_PASS2 to the number of the serial port connected to the sensor. I.e. \u201c2\u201d if the sensor is connected to Telem2/Serial2. Be sure to set each port\u2019s baud rate appropriately using the SERIALx_BAUD parameter. The rates may be different for each port. ArduPilot will do the buffering. Press the \u201cDisconnect\u201d button on the ground station but leave the USB cable from the PC to the autopilot connected. Open the sensor\u2019s configuration software and connect to the autopilot\u2019s COM port. If all goes well the configuration software should work as it does when the PC is directly connected to the sensor If the configuration fails to connect there are some things to try: Some configuration software will not allow connecting to the autopilot\u2019s COM port by default but may have a option to display all available COM ports If no serial messages are received from the PC the timeout will expire and SERIAL_PASS2 will revert to -1 https://ardupilot.org/.../common-serial-passthrough.html","title":"Ardupilot Instructions (community contribution, untested)"},{"location":"software/updating/wifi-updating/","text":"Build your fimware and locate your firmware.bin file (this may be named something else if someone built it for you but that's fine) Put your device in Wi-Fi updating mode \ud83d\udcf6 a. For TX, open LUA script on the handset and select \"Wi-Fi Update\" b. For RX, power the receiver by plugging in a battery or USB and wait for LED to be blinking fast \ud83d\ude48 Connect to the Wi-Fi network from your computer with the password expresslrs Note 1: Some receivers have very weak Wi-Fi antennas so they will have to be extremely close to the computer's Wi-Fi antenna. Note 2: If a window pops up automatically when you connect to the Wi-Fi , close it and use a regular browser window instead. Open a browser tab and navigate to http://10.0.0.1 Click \"Choose File\" Select firmware.bin from your latest build(eg: ...ExpressLRS\\src.pio\\build\\[target]\\firmware.bin) Click \"Update\" Wait for the page to refresh and your URL bar to say 10.0.0.1/update (it'll look like the page is frozen for a bit) WAIT AT LEAST 10 SECONDS after the page refreshes indicating the upload is complete. It takes time for the firmware to flash after the upload, so do not pull the power until you see activity on the LED of the device or you will soft brick your device due to pulling power mid-flash. Done! You now have the latest version of ELRS on your hardware. Go Fly! \ud83d\ude81","title":"Wifi Updating"}]}